<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
<channel>
        <title>modal_soul debriefing</title>
        <description>modal_soul debriefing - modal_soul</description>
        <link>http://modalsoul.github.io</link>
        <link>http://modalsoul.github.io</link>
        <lastBuildDate>2013-08-20T22:46:19+09:00</lastBuildDate>
        <pubDate>2013-08-20T22:46:19+09:00</pubDate>
        <ttl>1800</ttl>


        <item>
                <title>Github-pagesでPage　build failureにハマった件。またはLiquid　Exception：　invalid　byte　sequence　in　UTF-8になった件。</title>
                <description>&lt;h2 id=&quot;github&quot;&gt;Githubからの通知の確認&lt;/h2&gt;
&lt;p&gt;Github-pagesのリポジトリへpushすると以下のような文面のメールが届きます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Subject: Page build failure

The page build failed with the following error:

page build failed

For information on troubleshooting Jekyll see https://help.github.com/articles/using-jekyll-with-pages#troubleshooting
If you have any questions please contact GitHub Support.

support@github.com
https://github.com/contact
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;通知してくれるのはいいんですが、情報量が少ない。。せめてビルド時のエラーログなりを送ってほしい。。。&lt;/p&gt;

&lt;h2 id=&quot;github-1&quot;&gt;Githubのヘルプページの確認&lt;/h2&gt;
&lt;p&gt;ひとまず、メールに記載されていたURLのページを確認します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://capture.heartrails.com/128x128?https://help.github.com/articles/using-jekyll-with-pages#troubleshooting&quot; alt=&quot;Troubleshooting｜Using Jekyll with Pages｜GitHub Help&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Troubleshootingに記載されている要旨は、「ローカルでビルドして、パースエラーを見つけなさい」とのこと。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;ローカル環境でビルド&lt;/h3&gt;
&lt;p&gt;GitHubで使っているJekyllとその依存関係のバージョンについては、&lt;a href=&quot;https://github.com/github/pages-gem/blob/master/github-pages.gemspec#L16&quot;&gt;the same versions of Jekyll and other dependencies that we use&lt;/a&gt;に記載されていて、この時点では以下のバージョンになっていた。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  s.rubygems_version      = &quot;1.8.0&quot;
  s.required_ruby_version = &quot;~&amp;gt; 1.9.3&quot;
  ~~~
  # Jekyll and related dependency versions as used by GitHub Pages. 
  # For more information see:
  # https://help.github.com/articles/using-jekyll-with-pages

  s.add_dependency(&quot;RedCloth&quot;,   &quot;= 4.2.9&quot;)
  s.add_dependency(&quot;jekyll&quot;,     &quot;= 1.1.2&quot;)
  s.add_dependency(&quot;kramdown&quot;,   &quot;= 1.0.2&quot;)
  s.add_dependency(&quot;liquid&quot;,     &quot;= 2.5.1&quot;)
  s.add_dependency(&quot;maruku&quot;,     &quot;= 0.6.1&quot;)
  s.add_dependency(&quot;rdiscount&quot;,  &quot;= 1.6.8&quot;)
  s.add_dependency(&quot;redcarpet&quot;,  &quot;= 2.2.2&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ローカルの環境を上記のバージョンに合わせてビルドしてみると、いくつかErrorが。&lt;/p&gt;

&lt;p&gt;エラーの原因は、
* _postの記事に書かれていたサンプルコードがmarkdownのリンク表記とかぶっていたため、不正なリンクとして解釈されていた
* URLにマルチバイト文字を含むためエラーになった
こと&lt;/p&gt;

&lt;p&gt;上記の箇所を修正してローカル環境でビルドしてもエラーや警告が出ないことを確認し、GitHubに再度pushしても、同じくPage build failureとなってしまった。&lt;/p&gt;

&lt;p&gt;ひとまずバージョン依存での問題ではなさそうということはわかった。&lt;/p&gt;

&lt;h2 id=&quot;pages-dont-build-unable-to-run-jekyll&quot;&gt;Pages don&amp;#8217;t build: &amp;#8220;Unable to run Jekyll&amp;#8221;の確認&lt;/h2&gt;
&lt;p&gt;GitHubのヘルプには、Troubleshootingの手順で確認してもビルドに失敗したら、&lt;a href=&quot;https://help.github.com/articles/pages-don-t-build-unable-to-run-jekyll&quot;&gt;Page doesn&amp;#8217;t build&lt;/a&gt; guideを確認するようにと記載されていた。&lt;/p&gt;

&lt;p&gt;このPage does&amp;#8217;nt build guideの内容は以下&lt;/p&gt;

&lt;h3 id=&quot;unsafe-plugins&quot;&gt;Unsafe plugins&lt;/h3&gt;
&lt;p&gt;危ないプラグインは使うなよ、ということらしいけど、debug.rbしか入っていないから、これが原因ではなさそう。&lt;/p&gt;

&lt;h3 id=&quot;syntax-errors&quot;&gt;Syntax errors&lt;/h3&gt;
&lt;p&gt;sourceファイルのタイポかその辺のエラーじゃないか、ってことらしい。jekyllのsafeオプションを付けてビルドしてみる。以下のコマンドを実行&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jekyll build --safe
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これも問題なし。&lt;/p&gt;

&lt;h3 id=&quot;source-setting&quot;&gt;Source setting&lt;/h3&gt;
&lt;p&gt;GitHubのビルドサーバーでは、sourceセッティングをオーバーライドするらしく、sourceの設定を弄っていると正しくビルドされないらしい。&lt;/p&gt;

&lt;p&gt;sourceセッティングは変更していないので、これも原因ではなさそう。&lt;/p&gt;

&lt;h3 id=&quot;submodules-in-pages&quot;&gt;Submodules in Pages&lt;/h3&gt;
&lt;p&gt;リポジトリでサブモジュールを使っている場合、ビルド時に自動でそのサブモジュールをpullするらしい。
この時、サブモジュールのアクセス先がpublicではなくprivateだとアクセスできずに失敗するらしい。&lt;/p&gt;

&lt;p&gt;サブモジュールは使っていないので、これも原因ではなさそう。&lt;/p&gt;

&lt;h3 id=&quot;viewing-build-error-messages&quot;&gt;Viewing build error messages&lt;/h3&gt;
&lt;p&gt;ビルドのエラーログを確認しろ、とのこと。&lt;/p&gt;

&lt;p&gt;ローカル環境でビルドする以外の方法として、&lt;a href=&quot;http://travisci.org/&quot;&gt;Travis CI&lt;/a&gt;を使ってビルドエラーメッセージを確認することができるらしい。&lt;/p&gt;

&lt;p&gt;手順は以下&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Gemfileを準備
リポジトリのルート直下に、ファイル名&amp;#8221;Gemfile&amp;#8221;で以下の内容を記述する。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;https://rubygems.org&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;github-pages&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;.travis.ymlの準備
テストサービスの設定に、ファイル名&amp;#8221;.travis.yml&amp;#8221;で以下の内容を記述する。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;ss&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ruby&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;bundle exec jekyll build&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;この状態でGitHubへpushするとTravic CIでビルドジョブが実行される、らしい。&lt;/p&gt;

&lt;h4 id=&quot;travis-ci&quot;&gt;Travis CIのビルドメッセージを確認&lt;/h4&gt;
&lt;p&gt;Travis CIの画面から、以下のビルドメッセージを確認すると&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;jekyll build
Configuration file: /home/travis/build/modalsoul/modalsoul.github.com/_config.yml
   Deprecation: Auto-regeneration can no longer be &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;from your configuration file&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;. Use the --watch/-w &lt;span class=&quot;nb&quot;&gt;command&lt;/span&gt;-line option instead.
    Source: /home/travis/build/modalsoul/modalsoul.github.com
    Destination: /home/travis/build/modalsoul/modalsoul.github.com/_site
    Generating...   Liquid Exception: invalid byte sequence in UTF-8 in post.html
error: invalid byte sequence in UTF-8. Use --trace to view backtrace
The &lt;span class=&quot;nb&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;bundle exec jekyll build&amp;quot;&lt;/span&gt; exited with 1.
Done. Your build exited with 1.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;どうやらpost.htmlのパースでエラーになっているらしい。&lt;/p&gt;

&lt;h2 id=&quot;liquid-exception&quot;&gt;Liquid Exceptionの確認&lt;/h2&gt;

&lt;h3 id=&quot;markdown&quot;&gt;markdownパーサー&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;Liquid Exception: invalid byte sequence in UTF-8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で、ググってみると&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://igarashikuniaki.net/diary/20130519.html&quot;&gt;Github Pages で page build failed エラー｜いがいが日記&lt;/a&gt;
&lt;a href=&quot;http://tokkonopapa.github.io/blog/2013/08/04/liquid-exception-error/&quot;&gt;Liquid Exception: Invalid Byte Sequence in UTF-8 in atom.xml｜T.I.D.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;markdownパーサーによってはビルドエラーになる場合があるらしい。
markdownパーサーを、&amp;#8221;redcarpet&amp;#8221;、&amp;#8221;kramdown&amp;#8221;、&amp;#8221;rdiscount&amp;#8221;と変えて試してみた結果、どのmarkdownパーサーでも同じくビルド失敗。&lt;/p&gt;

&lt;p&gt;markdownパーサー依存の問題ではなさそう。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;詳細なエラー発生箇所の確認&lt;/h3&gt;
&lt;p&gt;エラー発生箇所をもっと詳細に特定するために、post.htmlの中身を削ってビルド・エラーメッセージの確認を行う。
どうやら_includes/helpers/reference_thumbnail.htmlを使っている箇所が原因のよう。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;解決&lt;/h2&gt;
&lt;p&gt;上記のファイルをエディタで開いてみると、文字コードがSHIFT_JISとなっていた。&lt;/p&gt;

&lt;p&gt;これをUTF-8に変換してビルドしてみると、成功。&lt;/p&gt;

&lt;p&gt;調べてみれば、なんてことない初歩的な問題でした。。&lt;/p&gt;

</description>
                <link>http://modalsoul.github.io/environment/2013/08/17/Github-pages-build-failure</link>
                <guid>http://modalsoul.github.io/environment/2013/08/17/Github-pages-build-failure</guid>
                <pubDate>2013-08-17T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>node.js+JSDoc3によるインラインAPIドキュメントの生成</title>
                <description>&lt;p&gt;&lt;a href=&quot;http://www.flickr.com/photos/pixagraphic/3414730395/&quot; title=&quot;Old Documents by pixagraphic, on Flickr&quot;&gt;
&lt;img src=&quot;http://farm4.staticflickr.com/3586/3414730395_7dedac534b_n.jpg&quot; width=&quot;320&quot; height=&quot;213&quot; alt=&quot;Old Documents&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;謝辞&lt;/h2&gt;
&lt;p&gt;以下の記事を参考にさせていただきました。感謝です。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://sites.google.com/site/jsdoc3manualjp/&quot;&gt;JsDoc3-manual-jp&lt;/a&gt; &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://efcl.info/2011/0226/res2291/&quot;&gt;JavaScript対応APIドキュメント生成ツールのまとめ｜ Web scratch&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;javascript&quot;&gt;JavaScriptのドキュメンテーション&lt;/h2&gt;

&lt;p&gt;今回は「JavaScriptでコメントを書くときどうすればいいんだ？」という疑問から出発しました。
Javaだと、JavaDocの形式で書いておけば、Eclipse等のIDEを使うと対象のメソッドをわざわざ見に行かなくともコメント、引数、戻り値が見れて便利です。&lt;/p&gt;

&lt;p&gt;またJavaScriptの場合、静的型付け言語のように型システムによる補助が受けられないので、個人的にものぐさからJavaScriptでいい感じにコメント・ドキュメンテーションが残せるものを調べました。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;jsdoc3&quot;&gt;JSDoc3を使う&lt;/h2&gt;

&lt;p&gt;ドキュメント生成ルーツは色々あるようですが、今回はJSDoc3を使いました。
&lt;a href=&quot;https://github.com/jsdoc3/jsdoc&quot;&gt;
&lt;img title=&quot;jsdoc3/jsdoc ・ GitHub&quot; src=&quot;http://capture.heartrails.com/120x90/cool/1351633993677?https://github.com/jsdoc3/jsdoc&quot; alt=&quot;https://github.com/jsdoc3/jsdoc&quot; width=&quot;120&quot; height=&quot;90&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;現状だとJSDocの後継&amp;#8221;JsDoc Toolkit&amp;#8221;がメジャーなようですが、さらに後継のJSDoc3を使いました。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;jsdoc3-1&quot;&gt;JSDoc3のインストール&lt;/h2&gt;
&lt;p&gt;JSDoc3をインストールします。
npmが既にインストールされている前提で&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;npm install -g git://github.com/jsdoc3/jsdoc.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;npmはとても便利ですね&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-1&quot;&gt;アノテーションの記述&lt;/h2&gt;

&lt;p&gt;ドキュメントに落としたいオブジェクトの直前にJSDocアノテーションを追加します。
Javaと同じく&amp;#8221;/＊＊&amp;#8230; ＊/ &amp;#8220;で囲まれた部分がアノテーションとなります。&lt;/p&gt;

&lt;p&gt;タグは、&amp;#8221;＠&amp;#8230; &amp;#8220;で記述します。&lt;/p&gt;

&lt;p&gt;実際にnode.js＋expressのコードにアノテーションを追加してみました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/modalsoul/expressSample/blob/master/app.js&quot;&gt;
&lt;img title=&quot;expressSample/app.js at master ・ modalsoul/expressSample ・ GitHub&quot; src=&quot;http://capture.heartrails.com/200x150/cool/1351634631326?https://github.com/modalsoul/expressSample/blob/master/app.js&quot; alt=&quot;https://github.com/modalsoul/expressSample/blob/master/app.js&quot; width=&quot;200&quot; height=&quot;150&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-2&quot;&gt;タグの種類&lt;/h2&gt;
&lt;p&gt;上記のサンプルでは@param, @return, @moduleの3種類しか使っていませんが、JSDocには他にもタグが用意されているようです。&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;主要属性&lt;/h3&gt;

&lt;p&gt;@param  @return  @extends &lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;アクセス識別子&lt;/h3&gt;

&lt;p&gt;@private  @protected  @public  @access &lt;/p&gt;

&lt;h3 id=&quot;section-5&quot;&gt;オブジェクト属性&lt;/h3&gt;

&lt;p&gt;@class  @constructor  @function  @constant  @member  @enum  &amp;#8230;&lt;/p&gt;

&lt;h3 id=&quot;section-6&quot;&gt;オブジェクト参照属性&lt;/h3&gt;

&lt;p&gt;@static  @inner &lt;/p&gt;

&lt;h3 id=&quot;section-7&quot;&gt;説明&lt;/h3&gt;

&lt;p&gt;@desc  @example  @fileoverview  @classdesc &amp;#8230;&lt;/p&gt;

&lt;h3 id=&quot;section-8&quot;&gt;サポート情報&lt;/h3&gt;

&lt;p&gt;@version  @since  @deprecated  @see  @author &lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-9&quot;&gt;ドキュメントの生成&lt;/h2&gt;
&lt;p&gt;JSDocを実行して、ドキュメントを生成します。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;jsdoc app.js
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;http://modalsoul.github.com/assets/sample/jsdoc-out/56ea328d1a.html&quot;&gt;生成されたドキュメントはこちら&lt;/a&gt;&lt;/p&gt;

</description>
                <link>http://modalsoul.github.io/report/2012/10/30/how-to-use-jsdoc</link>
                <guid>http://modalsoul.github.io/report/2012/10/30/how-to-use-jsdoc</guid>
                <pubDate>2012-10-30T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>node.js+express+log4jsでのアクセスログローテーション</title>
                <description>&lt;p&gt;&lt;a href=&quot;http://www.flickr.com/photos/kuromatsunai/3024100752/&quot; title=&quot;足跡 - Footprint - by kuromatsunai.info, on Flickr&quot;&gt;
&lt;img src=&quot;http://farm4.staticflickr.com/3272/3024100752_36c698bab8_n.jpg&quot; width=&quot;320&quot; height=&quot;240&quot; alt=&quot;足跡 - Footprint -&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;謝辞&lt;/h2&gt;
&lt;p&gt;以下の記事を参考にさせていただきました。感謝です。&lt;/p&gt;

&lt;p&gt;*&lt;a href=&quot;http://blog.shonanshachu.com/2012/10/nodejsexpressaccess-log-log-rotate.html&quot;&gt;【Node.js】expressでaccess log + log rotate ｜ 湘南社中テクニカルブログ&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;nodejsexpress&quot;&gt;node.jsとexpressでのアクセスログ&lt;/h2&gt;

&lt;p&gt;node.js+expressには、express標準のloggerだとログの出力先をファイルにすると、対象のファイルがずっとオープン状態になってしまう、という欠点があります。
(※:もしかしたら私が回避方法を知らないだけかもしれませんが。）&lt;/p&gt;

&lt;p&gt;そのため、いい感じのログをファイル出力し、日次でローテーションする、というような運用ができません。&lt;/p&gt;

&lt;p&gt;1ファイルに長々とアクセスログが出力されるようでは、運用もままならないので、log4jsを使ってexpressのアクセスログをいい感じにローテーションできるようにしたいと思います。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;log4js&quot;&gt;log4jsを使う&lt;/h2&gt;

&lt;p&gt;LoggingFrameworkのlog4jsについては、こちらで紹介しています&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://modalsoul.github.com/report/2012/10/14/node-js-log4js/&quot;&gt;node.js+log4jsで、ログローテーションする&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://modalsoul.github.com/report/2012/10/14/node-js-log4js/&quot;&gt;
&lt;img title=&quot;Now Capturing...&quot; src=&quot;http://capture.heartrails.com/120x90/cool?http://modalsoul.github.com/report/2012/10/14/node-js-log4js/&quot; alt=&quot;http://modalsoul.github.com/report/2012/10/14/node-js-log4js/&quot; width=&quot;120&quot; height=&quot;90&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;実際のコードはこんな感じ。※:要リファクタリング
&lt;script src=&quot;https://gist.github.com/3973839.js&quot;&gt;
&lt;/script&gt;
app.routerの前で、functionを入れログレベルをinfoで出力させています。&lt;/p&gt;

&lt;p&gt;実際にexpressをスタートさせ、ブラウザからアクセスすると以下のようなログが出力されます。&lt;/p&gt;

&lt;p&gt;access.log&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2012-10-29 23:06:18.732&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;INFO&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; dateFile - 127.0.0.1	Mon Oct 29 2012 23:06:18 GMT+0900 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;東京 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;標準時&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;	GET	/	200	-	Mozilla/5.0 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Windows NT 6.1; WOW64&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; AppleWebKit/537.4 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;KHTML, like Gecko&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; Chrome/22.0.1229.94 Safari/537.4
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2012-10-29 23:06:18.968&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;INFO&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; dateFile - 127.0.0.1	Mon Oct 29 2012 23:06:18 GMT+0900 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;東京 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;標準時&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;	GET	/stylesheets/style.css	200	http://localhost:3000/	Mozilla/5.0 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Windows NT 6.1; WOW64&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; AppleWebKit/537.4 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;KHTML, like Gecko&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; Chrome/22.0.1229.94 Safari/537.4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

</description>
                <link>http://modalsoul.github.io/report/2012/10/29/node-express-access-log-rotation</link>
                <guid>http://modalsoul.github.io/report/2012/10/29/node-express-access-log-rotation</guid>
                <pubDate>2012-10-29T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>node.jsにおける、npmとpackage.jsonという作法について</title>
                <description>&lt;h2 id=&quot;section&quot;&gt;謝辞&lt;/h2&gt;
&lt;p&gt;以下の記事を参考にさせていただきました。感謝です。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://kysnm.hatenablog.com/entry/20111225/1324828008&quot;&gt;npm についてまとめてみる - need something more&amp;#8230;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://d.hatena.ne.jp/sugyan/20110909/1315575343&quot;&gt;npm configで設定値を管理 - すぎゃーんメモ&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://d.hatena.ne.jp/Jxck/20120410/1334071898&quot;&gt;Node.js の起動オプション、環境変数、npm start の話 - Block Rockin’ Codes&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;npmpackagejson&quot;&gt;npmとpackage.jsonによるパッケージ管理&lt;/h2&gt;

&lt;p&gt;node.jsではパッケージ管理にnpmを用います。そしてRubyのGemfileのように、パッケージのバージョン管理をするには、package.jsonファイルを用います。&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/3914746.js&quot;&gt; 
&lt;/script&gt;

&lt;p&gt;こんな感じ。&lt;/p&gt;

&lt;p&gt;上記のようにバージョンを直接指定する以外にも、&amp;#8221;xx以上&amp;#8221;といった指定もできるようです。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;express&amp;quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;gt;=2.3.11&amp;quot;&lt;/span&gt;,
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;package.jsonの編集が終わったら、&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;npm install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;これで、一括でパッケージがインストールされます。&lt;/p&gt;

&lt;p&gt;パッケージは、./node_modules配下にインストールされるので、git等でバージョン管理を行う場合、.gitignoreにnode_modules/を追加すると良いようです。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;npm-startpackagejson&quot;&gt;npm startによる起動とpackage.jsonでの設定&lt;/h2&gt;

&lt;p&gt;package.jsonには、パッケージの依存関係以外にも色々記述できます。
例えばscriptsに、prestart,start,poststartを記述しておくと、npm startで実行されるようです。&lt;/p&gt;

&lt;p&gt;以下のような、package.jsonを記述した場合、&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;scripts&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;start&amp;quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&amp;quot;NODE_ENV=production NODE_PATH=lib node app&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;npm installを実行することで、実行環境を切り替え、モジュールをPATHに追加し、起動します。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-1&quot;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;プロジェクトを作成する人は、package.jsonをキチンと書く。&lt;/p&gt;

&lt;p&gt;cloneして使う人は、npm installして、npm startする。&lt;/p&gt;

</description>
                <link>http://modalsoul.github.io/report/2012/10/18/about-npm-start-and-package-json</link>
                <guid>http://modalsoul.github.io/report/2012/10/18/about-npm-start-and-package-json</guid>
                <pubDate>2012-10-18T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>node.js+log4jsで、ログローテーションする</title>
                <description>&lt;h2 id=&quot;section&quot;&gt;インストール&lt;/h2&gt;

&lt;p&gt;まずは、環境の準備です。&lt;/p&gt;

&lt;p&gt;npmでlog4jsをインストールします。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm install log4js
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-1&quot;&gt;ログ出力のために必要な手順&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;1. log4jsを読み込む&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;var &lt;span class=&quot;nv&quot;&gt;log4js&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; require&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;log4js&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;2. loggerを取得する&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;var &lt;span class=&quot;nv&quot;&gt;logger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; log4js.getLogger&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;3. ログレベルを指定して、ログ出力する&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;logger.info&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;This is test.&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;4．実行結果&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;node logging-sample.js
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2012-10-14 14:04:49.197&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;INFO&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;default&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; - This is test.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;出力形式を指定せずに実行すると、デフォルトで標準出力にログ出力されます。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-2&quot;&gt;ログをファイルに出力する手順&lt;/h2&gt;

&lt;p&gt;ログの出力先を標準出力からファイルに変更します。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;1. appenders.jsonを生成&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;appenders: &lt;span class=&quot;o&quot;&gt;[{&lt;/span&gt;
	&lt;span class=&quot;s2&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&amp;quot;file&amp;quot;&lt;/span&gt;,
	&lt;span class=&quot;s2&quot;&gt;&amp;quot;filename&amp;quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&amp;quot;logging.log&amp;quot;&lt;/span&gt;,
&lt;span class=&quot;o&quot;&gt;}]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;2. log4jsに設定を反映&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;log4js.configure&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt;
	appenders: &lt;span class=&quot;o&quot;&gt;[{&lt;/span&gt;
	&lt;span class=&quot;s2&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&amp;quot;file&amp;quot;&lt;/span&gt;,
	&lt;span class=&quot;s2&quot;&gt;&amp;quot;filename&amp;quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&amp;quot;logging.log&amp;quot;&lt;/span&gt;,
	&lt;span class=&quot;o&quot;&gt;}]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;3. loggerを取得する&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;var &lt;span class=&quot;nv&quot;&gt;logger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; log4js.getLogger&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;file&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;getLoggerの引数に、上記で設定したtypeを指定します。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;4．実行結果&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;実行すると、プロダクトと同じ階層に&amp;#8221;logger.log&amp;#8221;ファイルが生成され、以下のように出力されます。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2012-10-14 18:50:33.876&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;INFO&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; file - This is test.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;section-3&quot;&gt;ログファイルの出力先を変更する&lt;/h3&gt;
&lt;p&gt;appendersのfilenameに、ファイルパスを含めて記載すると、出力先を任意に変更できます。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;log4js.configure&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt;
	appenders: &lt;span class=&quot;o&quot;&gt;[{&lt;/span&gt;
	&lt;span class=&quot;s2&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&amp;quot;file&amp;quot;&lt;/span&gt;,
	&lt;span class=&quot;s2&quot;&gt;&amp;quot;filename&amp;quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&amp;quot;logs/logging.log&amp;quot;&lt;/span&gt;,
	&lt;span class=&quot;o&quot;&gt;}]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;上記の設定で実行すると、プロダクトと同階層にある&amp;#8221;logs&amp;#8221;ディレクトリ配下に、&amp;#8221;logger.log&amp;#8221;ファイルが生成され、ログが出力されます。&lt;/p&gt;

&lt;p&gt;&lt;i&gt;&lt;b&gt;ただし&lt;/b&gt;、パスにしていしたディレクトリは自動で生成はされないので、あらかじめディレクトリを生成しておく必要があります。&lt;/i&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-4&quot;&gt;ログファイルのローテーションを設定する手順&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/nomiddlename/log4js-node/wiki/Date%20rolling%20file%20appender&quot;&gt;&lt;img title=&quot;Date rolling file appender ・ nomiddlename/log4js-node Wiki ・ GitHub&quot; src=&quot;http://capture.heartrails.com/200x150/cool/1350212685200?https://github.com/nomiddlename/log4js-node/wiki/Date%20rolling%20file%20appender&quot; alt=&quot;https://github.com/nomiddlename/log4js-node/wiki/Date%20rolling%20file%20appender&quot; width=&quot;200&quot; height=&quot;150&quot; /&gt;
&lt;/a&gt;
ログファイルを日次でローテーションするよう設定します。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;1. appenders.jsonを生成&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;appenders: &lt;span class=&quot;o&quot;&gt;[{&lt;/span&gt;
	&lt;span class=&quot;s2&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&amp;quot;dateFile&amp;quot;&lt;/span&gt;,
	&lt;span class=&quot;s2&quot;&gt;&amp;quot;filename&amp;quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&amp;quot;logging.log&amp;quot;&lt;/span&gt;,
	&lt;span class=&quot;s2&quot;&gt;&amp;quot;pattern&amp;quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&amp;quot;-yyyy-MM-dd&amp;quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;2. log4jsに設定を反映する&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;log4js.configure({
	appenders: [{
	&amp;#8220;type&amp;#8221;: &amp;#8220;dateFile&amp;#8221;,
	&amp;#8220;filename&amp;#8221;: &amp;#8220;logging.log&amp;#8221;,
	&amp;#8220;pattern&amp;#8221;: &amp;#8220;-yyyy-MM-dd&amp;#8221;
	}]
});&lt;/p&gt;

&lt;p&gt;ここで設定している&amp;#8221;pattern&amp;#8221;は、ローテーションで生成されるログファイル名のpostfixです。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;3. loggerを取得する&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;var &lt;span class=&quot;nv&quot;&gt;logger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; log4js.getLogger&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;dateFile&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;getLoggerの引数に、上記で設定したtypeを指定します。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;4. ローテーションの動作&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;上記設定の場合、初回起動時は&amp;#8221;filename&amp;#8221;の設定値の&amp;#8221;logging.log&amp;#8221;という名前のログファイルが生成されます。&lt;/p&gt;

&lt;p&gt;そして午前0時に、現在の&amp;#8221;logging.log&amp;#8221;が、&amp;#8221;logging.log&lt;i&gt;-yyyy-MM-dd&lt;/i&gt;&amp;#8220;にリネームされ新しい&amp;#8221;logging.log&amp;#8221;が生成されます。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;pattern&quot;&gt;patternの設定&lt;/h3&gt;

&lt;p&gt;patternの設定は、ローテーションされたファイルのpostfixになります。&lt;/p&gt;

&lt;p&gt;patternの設定は、以下の書式が適用されます。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;yyyy : 西暦を4桁表示します。2桁表示するには&amp;#8221;yy&amp;#8221;を指定します。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;MM : 月&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;dd : 日&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;hh : 時間(24時間表示)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;mm : 分&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ss : 秒&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;sss : ミリ秒&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;O : タイムゾーン（大文字のOです）&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これでnode.js+log4jsで、ログローテーションできるようになりました。&lt;/p&gt;

&lt;p&gt;最後に、日次でローテーションするサンプル全コードを載せます。&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/3888287.js&quot;&gt; 
&lt;/script&gt;

&lt;p&gt;この他にもlog4jsには色々な設定ができるようなので、機会を見て調べてみたいと思います。&lt;/p&gt;
</description>
                <link>http://modalsoul.github.io/report/2012/10/14/node-js-log4js</link>
                <guid>http://modalsoul.github.io/report/2012/10/14/node-js-log4js</guid>
                <pubDate>2012-10-14T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>node.jsをはじめました</title>
                <description>&lt;h2 id=&quot;section&quot;&gt;謝辞&lt;/h2&gt;
&lt;p&gt;今回、node.jsをはじめるに辺りこちらのサイトを参考にさせていただきました。感謝です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://capture.heartrails.com/200x150/cool?http://dl.dropbox.com/u/219436/node.js/handson/build/html/index.html&quot; alt=&quot;node.js ハンズオン資料&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-1&quot;&gt;インストール&lt;/h2&gt;

&lt;p&gt;まずは、環境の準備です。&lt;/p&gt;

&lt;p&gt;上記ハンズオン資料にもUnixシステムへのインストール手順が記載されていますが、手持ちの環境がWindowsなので若干異なりました。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;1. インストーラのダウンロード&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;下記サイトから最新の安定版をダウンロード。2012/10/10時点の最新の安定版は、v0.8.11&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://capture.heartrails.com/200x150/cool?http://nodejs.jp/nodejs.org_ja/docs/v0.8/&quot; alt=&quot;v0.8のインストーラダウンロード&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;2. インストーラの起動&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;画面に従いインストールを完了します。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;3. インストールの確認&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;コマンドラインからインストールしたnode.jsのバージョンを確認します。v0.8.11の表示が確認できます。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;node -v
v0.8.11
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;4. npmのインストール&lt;/em&gt;
npmは、nodeのライブラリパッケージ専用のパッケージ管理ツールです。
インストーラからインストールすると、併せてnpmもインストールされます。&lt;/p&gt;

&lt;h2 id=&quot;hello-world&quot;&gt;Hello World&lt;/h2&gt;
&lt;p&gt;helloworld.jsを作成します。
&lt;script src=&quot;https://gist.github.com/3868393.js&quot;&gt; 
&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;実行すると、こんな感じ。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;node helloworld.js
Hello node.js
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;io&quot;&gt;非同期IOメソッドを使う&lt;/h2&gt;
&lt;p&gt;ハンズオンの内容を写経してみます。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;1ファイルのダウンロード&lt;/h3&gt;

&lt;script src=&quot;https://gist.github.com/3868441.js&quot;&gt; 
&lt;/script&gt;

&lt;p&gt;これを実行すると、こんな感じ。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;node download1.js http://www.google.co.jp/
http.createClient is deprecated. Use &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;http.request&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; instead.
200
date:Wed, 10 Oct 2012 21:17:40 GMT
expires:-1
cache-control:private, max-age&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0
content-type:text/html; &lt;span class=&quot;nv&quot;&gt;charset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Shift_JIS
&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;-cookie:PREF&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;e0429b2fdb66b6f5:FF&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0:TM&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1349903860:LM&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1349903860:S&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;RztyFRMdq8JPKHw1; &lt;span class=&quot;nv&quot;&gt;expires&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Fri, 10-Oct-2014 21:17:40 GMT; &lt;span class=&quot;nv&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/; &lt;span class=&quot;nv&quot;&gt;domain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;.google.co.jp,NID&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;bF0HOrYnQ_hHT1a9O-_qkflB9ZOIv34SmPnV4YeXbEbhqCQGR0wjpKvjFPtnQ0psZzJQPW3qZvP7uaHjxg_ajr0--fMSSVCFvOzHFe_O6Eqc2wCs-VZqV-7L3-1PnQ9V; &lt;span class=&quot;nv&quot;&gt;expires&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Thu, 11-Apr-2013 21:17:40 GMT; &lt;span class=&quot;nv&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/; &lt;span class=&quot;nv&quot;&gt;domain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;.google.co.jp; HttpOnly
p3p:CP&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;This is not a P3P policy! See http://www.google.com/support/accounts/bin/answer.py?hl=en&amp;amp;answer=151657 for more info.&amp;quot;&lt;/span&gt;
server:gws
x-xss-protection:1; &lt;span class=&quot;nv&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;block
x-frame-options:SAMEORIGIN
transfer-encoding:chunked

・・・
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;実行結果の1行目に何やらメッセージが出力されていますが、リファレンスで確認するとhttp.createClientの使用は非推奨とのことでした。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://capture.heartrails.com/200x150/cool?http://nodejs.jp/nodejs.org_ja/docs/v0.8/api/http.html#http_http_createclient_port_host&quot; alt=&quot;http.createClientは非推奨らしい&quot; /&gt;&lt;/p&gt;

&lt;p&gt;http.request()で書き直したものがこちら。&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/3868625.js&quot;&gt; 
&lt;/script&gt;

&lt;p&gt;同じように動きます。&lt;/p&gt;
</description>
                <link>http://modalsoul.github.io/report/2012/10/10/entrance-into-node-js</link>
                <guid>http://modalsoul.github.io/report/2012/10/10/entrance-into-node-js</guid>
                <pubDate>2012-10-10T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>Android端末をUSBデバッグ接続してもMacのDDMSで認識されない問題でハマった件について</title>
                <description>&lt;h2 id=&quot;section&quot;&gt;現象について&lt;/h2&gt;
&lt;p&gt;Android端末をUSBケーブルでつないでデバッグ接続しても、EclipseのDDMSで認識されませんでした。&lt;/p&gt;

&lt;p&gt;PCは、Core2世代のMac book air&lt;/p&gt;

&lt;p&gt;Android端末は、docomo版Sony EricssonのXperia arc&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-1&quot;&gt;原因&lt;/h2&gt;
&lt;p&gt;端的に言うと、MBAにインストールされていたEasyTetherのドライバと競合していた為でした。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://play.google.com/store/apps/details?id=com.mstream.easytether_polyclef&amp;amp;hl=ja&quot;&gt;
&lt;img title=&quot;Now Capturing...&quot; src=&quot;http://capture.heartrails.com/300x200/cool?https://play.google.com/store/apps/details?id=com.mstream.easytether_polyclef&amp;amp;hl=ja&quot; alt=&quot;https://play.google.com/store/apps/details?id=com.mstream.easytether_polyclef&amp;amp;hl=ja&quot; width=&quot;300&quot; height=&quot;200&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-2&quot;&gt;対処法&lt;/h2&gt;
&lt;p&gt;EasyTetherのドライバを削除することで、DDMSでAndroid端末が認識されない問題は解消できます。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;「/System/Library/Extentions」をFinderで開き、「EasyTetherUSBEthernet.kext」を削除する&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;競合そのものを解消する方法ではないので、EasyTetherが使えなくなりますが、Android2.3以降？の端末では、OSの機能としてテザリングがサポートされているようなので影響は少ないかな、と。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://gadget-shot.com/news/5757&quot;&gt;こちら&lt;/a&gt;の記事を参考しました。&lt;/p&gt;

</description>
                <link>http://modalsoul.github.io/report/2012/09/21/android-usb_driver-connection-problem</link>
                <guid>http://modalsoul.github.io/report/2012/09/21/android-usb_driver-connection-problem</guid>
                <pubDate>2012-09-21T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>XP祭り2012～ソーシャルチェンジ～にスタッフ参加してきました　#xpjug</title>
                <description>&lt;h2 id=&quot;xp&quot;&gt;XP祭りとは？&lt;/h2&gt;
&lt;p&gt;アジャイル界隈では言わずもがなのイベントですが、改めて&lt;/p&gt;

&lt;p&gt;以下、XPJUGの公式ページの転載です。&lt;/p&gt;

&lt;p&gt;&lt;b&gt;&lt;i&gt;&amp;#8220;日本XPユーザグループ(XPJUG)が主催しているイベントです。
2002年より毎年秋に開催しています。&lt;/i&gt;&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;当初は、XPJUGコミュニティのスタッフが企画・運営を行ってきましたが、2010年より運営自体をオープンにし、実行委員形式をとっています。 実行委員は、毎年公募しています。&amp;#8221;
&amp;lt;/i&amp;gt;&amp;lt;/b&amp;gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;私は今までXP祭りに参加したことが無かったのですが、実行委員の公募に乗っかり、初参加でスタッフ参加という、突飛な状況になったのでした。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section&quot;&gt;スタッフ参加して&lt;/h2&gt;
&lt;p&gt;私は、&lt;a href=&quot;https://github.com/agile-samurai-ja/support/wiki/Readingagilesamuraiinyokohama&quot;&gt;アジャイルサムライ読書会横浜道場&lt;/a&gt;の運営スタッフもさせていただいているのですが、このように大規模（参加者数が数百名にも達する）イベントの運営には携わったことはありませんでした。&lt;/p&gt;

&lt;p&gt;公募に応募した当初は、実行委員としてコミットできるかどうか？不安に思っていましたが、過去１０回のXP祭りを切り盛りしてきた歴戦のコアスタッフの皆さんに手助けいただき、実行委員としての勤めを果たすことができました。&lt;/p&gt;

&lt;p&gt;XP祭り当日にも、「スタッフ参加したい！」という声が聞かれたので、スタッフになることのメリット・デメリットについて書いてみようと思います。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-1&quot;&gt;ここがツライよ、実行委員&lt;/h2&gt;
&lt;p&gt;やるからには苦難があるものですが、実行委員になってツラかったことをご紹介します。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;当日セッションに参加できない&lt;/h3&gt;

&lt;p&gt;当たり前と言えば当たり前ですが、当日は運営の仕事があります。
役割によりけりですが、興味のあるセッションを必ず見られるかというと難しそうです。&lt;/p&gt;

&lt;p&gt;今回のXP祭りの場合、私は午前中に受付、午後がD会場付きを担当しました。
受付は午前中ずっと続く訳ではありませんが、オープニングトークとアジャイルコーチラウンドテーブルの途中までを見ることができませんでした。&lt;/p&gt;

&lt;p&gt;午後は、D会場付きなので「スクラムの基本」と「ODC入門」を見学することができ、個人的には願ったり叶ったりの内容でした。
スタッフの中には、写真撮影を担当し、プレス特権でセッションを縦横無尽に見学する強者もいました。&lt;/p&gt;

&lt;p&gt;なので、セッションを見学することはある程度できますが、ワークショップに参加したい場合は少々難儀です。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-3&quot;&gt;協賛各社様から提供された書籍・グッズがもらえない&lt;/h3&gt;

&lt;p&gt;スタッフ最大の役損と言えますね。今年のXP祭りでは、協賛各社様から数十(単純な数なら１００近く？)にも及ぶ書籍・グッズが提供されました。&lt;a href=&quot;http://xpjug.com/xp2012-sponsor/&quot;&gt;※協賛各社からのご支援&lt;/a&gt;
&lt;img src=&quot;http://farm9.staticflickr.com/8031/7995736441_fd620ed66b.jpg&quot; alt=&quot;協賛各社様からのご支援&quot; /&gt;&lt;/p&gt;

&lt;p&gt;これも公正な運営の為には当たり前のことですが、目の前にこれだけの技術書が積まれると、エンジニアなら誰しも「よ、読みたいっ！」となるのが人情。スタッフは皆泣く泣く我慢しているのです。。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-4&quot;&gt;ここが得だよ、実行委員&lt;/h2&gt;
&lt;p&gt;人生ツライことばかりではありません、実行委員を勤めて「グフフフ・・得したなぁ～」ということを挙げてみます。&lt;/p&gt;

&lt;h3 id=&quot;section-5&quot;&gt;規模の大きいイベントができていく過程を体験できる&lt;/h3&gt;
&lt;p&gt;これだけの規模のイベントの運営はそうそうできるものではありません。
私は、&lt;a href=&quot;https://github.com/agile-samurai-ja/support/wiki/Readingagilesamuraiinyokohama&quot;&gt;アジャイルサムライ読書会横浜道場&lt;/a&gt;の運営スタッフもさせてもらっているのですが、これともまた違った運営の醍醐味があります。&lt;/p&gt;

&lt;p&gt;クロージングの際、メイン会場に集まった参加者とセッションで高まった熱気、この場の雰囲気は正に圧巻です
。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://kokucheese.com/event/index/52905/&quot;&gt;
&lt;img title=&quot;9月20日 アジャイルサムライ読書会 横浜道場「当てずっぽうの奥義」&quot; src=&quot;http://capture.heartrails.com/300x200/cool?http://kokucheese.com/event/index/52905/&quot; alt=&quot;http://kokucheese.com/event/index/52905/&quot; width=&quot;300&quot; height=&quot;200&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;※ちなみに、９月２０日は&lt;a href=&quot;http://kokucheese.com/event/index/52905/&quot;&gt;アジャイルサムライ読書会 横浜道場 「当てずっぽうの奥義」&lt;/a&gt;が開催されます。どうぞご参加ください#ステマ&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-6&quot;&gt;講師と話ができる&lt;/h3&gt;

&lt;p&gt;セッションの内容によっては、事前に講師と打ち合わせをし、どういった趣旨・内容でセッションを行うのか話をします。
なにせ運営スタッフですので、当日の講師控え室にだって堂々と入ることができます。&lt;/p&gt;

&lt;p&gt;そんな合間合間の時間に、普段なかなかお目にかかる機会の無い講師の方にも直接質問をしたり話を伺うことができます。
Twitterにメンションを投げるよりも確実に聞きたいことが聞けます。&lt;/p&gt;

&lt;p&gt;&lt;a target=&quot;_blank&quot; title=&quot;豪華アジャイルコーチ陣&quot; href=&quot;http://twitter.yfrog.com/kl9tncenj&quot;&gt;&lt;img src=&quot;http://desmond.yfrog.com/Himg741/scaled.php?tn=0&amp;amp;server=741&amp;amp;filename=9tncen.jpg&amp;amp;xsize=640&amp;amp;ysize=640&quot; border=&quot;0&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-7&quot;&gt;登壇して欲しい人やセッション内容を推薦できる&lt;/h3&gt;
&lt;p&gt;XP祭りの内容そのものを自分の興味・指向性に合わせることができる、まさに天地創造の如き大技です！&lt;/p&gt;

&lt;p&gt;「自分のセッションをやりたい！」という場合も、自分が実行委員になって推薦する、これが一番の近道ですね。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-8&quot;&gt;今後について&lt;/h2&gt;
&lt;p&gt;XP祭り2012もつつがなく終了した訳ですが、実行委員の仕事が終わった訳ではありません。
XPを謳う以上、ふりかえりは当然。&lt;/p&gt;

&lt;p&gt;ということで、もうしばらく後にXP祭り2012のふりかえりが行われると思います。
そして、今年のXP祭りでの気づきを生かし、来年さらにすばらしいXP祭りになるのではと思います。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;ja&quot;&gt;
&lt;p&gt;つーか、スタッフを募集しております &lt;a href=&quot;https://twitter.com/search/%23xpjug&quot;&gt;#xpjug
&lt;/a&gt;
&lt;/p&gt;
&amp;mdash; Yasunobu Kawaguchiさん (@kawaguti) 
&lt;a href=&quot;https://twitter.com/kawaguti/status/246989439409197056&quot; data-datetime=&quot;2012-09-15T15:10:45+00:00&quot;&gt;9月 15, 2012
&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;
&lt;/script&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;ja&quot;&gt;
&lt;p&gt;XP祭りのスタッフや、TOCの活動に興味を持たれた方、お声かけくださいまし。 
&lt;a href=&quot;https://twitter.com/search/%23xpjug&quot;&gt;#xpjug
&lt;/a&gt;
&lt;/p&gt;
&amp;mdash; nohdomiさん (@nohdomi) 
&lt;a href=&quot;https://twitter.com/nohdomi/status/247064138495447040&quot; data-datetime=&quot;2012-09-15T20:07:35+00:00&quot;&gt;9月 15, 2012
&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;
&lt;/script&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-9&quot;&gt;最後に&lt;/h2&gt;
&lt;p&gt;実行委員として、会場に居合わせた一個人として、非常に多くの経験や気付きをいただきました。
XP祭りに参加くださった方々、実行委員の皆さん、会場を提供くださった早稲田大学さん、協賛各社様、本当にありがとうございました。&lt;/p&gt;
</description>
                <link>http://modalsoul.github.io/report/2012/09/17/xp-festival</link>
                <guid>http://modalsoul.github.io/report/2012/09/17/xp-festival</guid>
                <pubDate>2012-09-17T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>TouchUtilsを使ったAndroidテストでjava.lang.SecurityException:PermissionDenialが起きたときの回避方法</title>
                <description>&lt;p&gt;以前の記事では、InstrumantetionTestCaseとTouchUtilsを使ってのUIテストについて書きました。&lt;/p&gt;

&lt;p&gt;最近、この方法でテストを実行してjava.lang.SecurityException: Permission Denialが発生して、テストに失敗する事象に悩まされたので、
回避方法を記録しておきます。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;原因&lt;/h2&gt;

&lt;p&gt;この問題が発生する正確な理由はわかっていません。&lt;/p&gt;

&lt;p&gt;特定の端末(今回の場合、私が持っていたXperia arc android2.3.4)でのみ事象の発生が確認できました。&lt;/p&gt;

&lt;p&gt;Xperia NX, MEDIASでは同じテストケースを実行してもこの現象は確認できませんでした。&lt;/p&gt;

&lt;p&gt;これらの状況と、logcatで確認できたエラーログから察するに、
TouchUtilsは端末によっては利用できないよう制限されているようです。&lt;/p&gt;

&lt;p&gt;そのため、テストケース中のボタンなどのViewのクリック動作がシミュレートできずにテストが失敗したようです。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
## TouchUtilsを使わずにテストする方法&lt;/p&gt;

&lt;p&gt;以前紹介した方法では、ユーザのViewのクリック動作を以下のような方法でシミュレートしました。&lt;/p&gt;

&lt;h3 id=&quot;activity&quot;&gt;Activityの取得&lt;/h3&gt;
&lt;script src=&quot;https://gist.github.com/2758303.js?file=getCurrentActivity.java&quot;&gt;
&lt;/script&gt;

&lt;h3 id=&quot;view&quot;&gt;Viewを取得して、初期状態を確認。&lt;/h3&gt;
&lt;script src=&quot;https://gist.github.com/2758332.js?file=getAndCheckView.java&quot;&gt;
&lt;/script&gt;

&lt;h3 id=&quot;section-1&quot;&gt;ボタンのクリックをシミュレート。&lt;/h3&gt;
&lt;script src=&quot;https://gist.github.com/2758332.js?file=getAndCheckView.java&quot;&gt;
&lt;/script&gt;

&lt;h3 id=&quot;performclick&quot;&gt;performClick()を使った回避方法&lt;/h3&gt;
&lt;p&gt;上記のクリックのシミュレートに使用したTouchUtilsの代わりに、&lt;a href=&quot;http://developer.android.com/reference/android/view/View.html#performClick()&quot;&gt;performClick()&lt;/a&gt;を使います。&lt;/p&gt;

&lt;p&gt;※この場合、clickPerformは明示的にUIスレッドで実行する必要があります。&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/3531257.js?file=performClick-sample.java&quot;&gt;
&lt;/script&gt;

</description>
                <link>http://modalsoul.github.io/test/programing/2012/08/30/android-ui-test-touchutils-performclick</link>
                <guid>http://modalsoul.github.io/test/programing/2012/08/30/android-ui-test-touchutils-performclick</guid>
                <pubDate>2012-08-30T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>【意訳】Heroku上でPlayFramework + Scalaアプリケーションを実行する</title>
                <description>&lt;p&gt;誤訳・誤植等ありましたら、&lt;a href=&quot;https://twitter.com/modal_soul&quot;&gt;@modal_soulまで&lt;/a&gt;リプライいただけるとありがたいです。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&quot;http://scala.playframework.org/&quot;&gt;ScalaでPlay Frameworkアプリを構築&lt;/a&gt;するのが最近流行っているようです。理由としては、これまでのJVMベースのWebアプリよりも簡単に構築、デプロイできることです。ScalaでPlayアプリの構築とHerokuへのデプロイをやってみましょう。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;Step1) &lt;a href=&quot;http://www.playframework.org/download&quot;&gt;Play Framework&lt;/a&gt;をインストールします（バージョン1.2.3以上をインストールしてください)。&lt;/em&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;Step2) Play Scalaモジュールをインストールします。&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;play install scala
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;Step3) ScalaサポートしたPlayアプリを作成します。&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;play new playwithscala --with scala
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;Step4) アプリケーションをスタートします。&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;playwithscala
play run
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;Step5) ブラウザでアプリケーションを開きます。&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;http://localhost:9000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;とても簡単ですね。Heroku上にデプロイする前に、カスタムmodel, view, controllerを追加してもう少し味付けしてみましょう。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;Step1) app/models/Widget.scalaを新規作成して、以下を記述します。&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;package models
 
&lt;span class=&quot;k&quot;&gt;case &lt;/span&gt;class Widget&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;id: Int, name: String&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;Step2) app/views/Widget/list.scala.htmlファイルを新規作成して、以下を記述します。&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt; ＠&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;widgets: Vector&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;models.Widget&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;
 
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
    &amp;lt;body&amp;gt;
        @widgets.map &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;widget&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;gt; 
            Widget @widget.id &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; @widget.name&amp;lt;/br&amp;gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;Step3) app/controllers/WidgetController.scalaを新規作成して、以下を記述します。&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;package controllers
 
import play._
import play.mvc._
 
object WidgetController extends Controller &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
 
    import views.Widget._
    import models.Widget
 
    def &lt;span class=&quot;nv&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        val &lt;span class=&quot;nv&quot;&gt;widget1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Widget&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1, &lt;span class=&quot;s2&quot;&gt;&amp;quot;The first Widget&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        val &lt;span class=&quot;nv&quot;&gt;widget2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Widget&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2, &lt;span class=&quot;s2&quot;&gt;&amp;quot;A really special Widget&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        val &lt;span class=&quot;nv&quot;&gt;widget3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Widget&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;3, &lt;span class=&quot;s2&quot;&gt;&amp;quot;Just another Widget&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        html.list&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Vector&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;widget1, widget2, widget3&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Step4) 以下のURLを表示して、動きを確認しましょう。&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;http://localhost:9000/WidgetController/list
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;動きましたね。それにサーバーのリロードも不要でした。URLを少しきれいにしましょう。conf/routeファイルを修正して、”Application.index”を”WidgetController.list”へ変更します。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;GET     /                                       WidgetController.list
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;簡単にできましたが、ついでに友達にも見せたいですね。Herokuへデプロイしましょう。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;Step1) Linux, MacもしくはWindowsに、Herokuコマンドクライアントをインストールします。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Step2) コマンドラインからHerokuへログインします。&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;heroku auth:login
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Step3) Herokuは、アプリケーションのデプロイにgitを使うので、.gitignoreファイルを作成して、以下を記述します。&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;/modules
/tmp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Step4) gitリポジトリを作成して、ファイルを追加し、コミットします。&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;git init
git add .
git commit -m init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Step5) Herokuにアプリケーションを新規作成します。&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;heroku create -s cedar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;これで、Heroku上に新しいアプリケーションを規定し、アプリケーションへのランダムな名前/のURLを割り当てます。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Step6) アプリケーションをデプロイします。&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;git push heroku master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;アプリケーションがアセンブルされ、Heroku上にデプロイされます。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Step7) ブラウザでアプリケーションを開きます。&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;heroku open
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;ジャジャーン！これでPlay + Scala アプリがクラウド上で実行されました。&lt;/p&gt;

&lt;p&gt;JavaOneで、これをBill Venners(ScalaTestの作者)に見せたら、scalatest.orgのWebサイト（Play + Scalaのアプリ)をHerokuへ移行してくれました。クール！&lt;/p&gt;

&lt;p&gt;何か質問あれば、教えてください。&lt;/p&gt;

</description>
                <link>http://modalsoul.github.io/programing/2012/08/12/Running-PlayFramework-Scala-Apps-on-Heroku</link>
                <guid>http://modalsoul.github.io/programing/2012/08/12/Running-PlayFramework-Scala-Apps-on-Heroku</guid>
                <pubDate>2012-08-12T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>【意訳】Scala on LiftでのFacebookサインイン</title>
                <description>&lt;p&gt;この記事は、&lt;a href=&quot;http://blog.knoldus.com/2012/07/29/providing-a-sign-in-with-facebook-functionality-using-scala/&quot;&gt;ayushmishra2005氏の記事&lt;/a&gt;の意訳です。参考にさせていただいたついでに訳してみました。参考程度にどうぞ。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://capture.heartrails.com/300x200/cool?http://blog.knoldus.com/2012/07/29/providing-a-sign-in-with-facebook-functionality-using-scala/&quot; alt=&quot;Providing a “Sign-in with Facebook” functionality using Scala&quot; /&gt;&lt;/p&gt;

&lt;p&gt;誤訳・誤植等ありましたら、&lt;a href=&quot;https://twitter.com/modal_soul&quot;&gt;@modal_soulまで&lt;/a&gt;リプライいただけるとありがたいです。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;ここ最近に、Lift2.4で構築したソーシャルプロジェクトで、Facebookへのサインイン機能を統合しました。この記事はその時の手順のサマリです。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;1)Facebook APIを作る（※既に持っている場合不要です）&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;次のリンクを参考にアプリを作ってください。サイトURLを含む全ての詳細を記入してエンターします。サイトURLは以下のような感じになります。&lt;/p&gt;

&lt;p&gt;http://www.com/api/facebook/auth&lt;/p&gt;

&lt;p&gt;このサイトURL宛に、Facebookはレスポンスを送ります。このアプリケーションを保存すると、アプリキー/APIキー/秘密鍵が入手できます。&lt;/p&gt;

&lt;p&gt;これらのキーは後ほど使うので注意してください。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;2) Liftを使っている場合は、各キーをdefault.propsに追加設定します。&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;facebook.key&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;your_key&amp;gt;
facebook.secret&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;your &amp;lt;secret_key&amp;gt;
facebook.callbackurl&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/api/facebook/auth
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;3) Facebookログイン画像&lt;a href=&quot;http://sandthre34.wapka.mobi/download-43-23c50858c8a88d7a9397/fb.png?PHPSESSID=3b88fe8fb9bb628c5beb8870fd0e367c&quot;&gt;fb.png&lt;/a&gt;をダウンロードします&lt;/em&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;4) アプリキー/APIキー/秘密鍵とコールバックURLを設定するために、FacebookGraph.scalaを新規作成します。またFacebookからアクセストークンを要求するためにこのScalaファイルを使用します。&lt;/em&gt;&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/3310411.js?file=FacebookGraph.scala&quot;&gt;
&lt;/script&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;5) 次にログインページにFacebookログインリンクを表示するためにFacebook素にペットを作成します。&lt;/em&gt;&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/3310425.js?file=Facebook.scala&quot;&gt;
&lt;/script&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;6) login.htmlにFacebookログインリンクを追加します。&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;&amp;lt;div &lt;span class=&quot;nv&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;span4&amp;quot;&lt;/span&gt;&amp;gt;
      &amp;lt;span &lt;span class=&quot;nv&quot;&gt;lift&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Facebook.link&amp;quot;&lt;/span&gt;/&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;7) SiteMap.scalaにFacebook接続メニューを作ります。&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;val &lt;span class=&quot;nv&quot;&gt;facebookConnect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; MenuLoc&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    Menu.i&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;FacebookConnect&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; / &lt;span class=&quot;s2&quot;&gt;&amp;quot;facebook&amp;quot;&lt;/span&gt; / &lt;span class=&quot;s2&quot;&gt;&amp;quot;connect&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; EarlyResponse&lt;span class=&quot;o&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      FacebookGraph.csrf&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Helpers.nextFuncName&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      Full&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;RedirectResponse&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;FacebookGraph.authUrl, S.responseCookies: _*&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;}))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;8) 最後に、Facebookからレスポンスを受け取るためのFacebook.apiを作成します。&lt;/em&gt;&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/3310432.js?file=FacebookApiStateful.scala&quot;&gt;
&lt;/script&gt;

</description>
                <link>http://modalsoul.github.io/programing/2012/08/10/Sign-in-with-Facebook-Scala</link>
                <guid>http://modalsoul.github.io/programing/2012/08/10/Sign-in-with-Facebook-Scala</guid>
                <pubDate>2012-08-10T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>【意訳】Scala on Play2 with Squerylではじめるデータベース駆動アプリ　#scalajp　#play_ja</title>
                <description>&lt;p&gt;この記事は、HerokuのPrincipal Developer EvangelistのJames Ward氏とRyan Knight氏の記事&lt;a href=&quot;http://www.artima.com/articles/play2_scala_squeryl.html&quot;&gt;Getting Started with Play 2, Scala, and Squeryl&lt;/a&gt;の意訳です。参考程度にどうぞ。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://capture.heartrails.com/300x200/cool?http://www.artima.com/articles/play2_scala_squeryl.html&quot; alt=&quot;Getting Started with Play 2, Scala, and Squeryl&quot; /&gt;&lt;/p&gt;

&lt;p&gt;誤訳・誤植等ありましたら、&lt;a href=&quot;https://twitter.com/modal_soul&quot;&gt;@modal_soul&lt;/a&gt;までリプライいただけるとありがたいです。&lt;/p&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;section&quot;&gt;サマリー&lt;/h2&gt;
&lt;table border=&quot;1&quot;&gt;&lt;tr&gt;&lt;td&gt;
この記事では、Play2,Scala,Squeryl,JSON,CoffeScript,CoffeScript,jQueryとScalaTestを使ったWebアプリケーションの作り方を紹介します。また、同時にScalaTestを使ったテスト方法とHerokuを使ったクラウド環境へのアプリケーションデプロイについても学べます。
&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;Play2,Scala,Squeryl,JSON,CoffeScript,jQueryとScalaTestの組み合わせによって、モダンなWebアプリケーションの構築とテストを効率的に行うことができ,
シンプルなデータベース駆動Webアプリケーションの構築、テスト、クラウドへのデプロイを体験できます。&lt;/p&gt;

&lt;h2 id=&quot;play2&quot;&gt;Play2の紹介&lt;/h2&gt;
&lt;p&gt;Play2は数あるWebフレームワークの中でも、ステートレスアーキテクチャで設計された、ユニークなWebフレームワークです。
Play2は、メモリやCPUなどのリソースの消費を抑えた、とても軽量なフレームワークです。
ステートレスであるため、昨今クラウドアーキテクチャにとって重要な、水平のスケーリングを容易に行うことができます。
他のアーキテクチャの特徴としては、完全に非同期なHTTPプログラミングモデルを使った、Websocketやcometのようなlong lived-connectionを利用するために設計されていることです。&lt;/p&gt;

&lt;p&gt;また他の特徴としては、Herokuのようなクラウドアプリケーションプラットフォームへのデプロイに適するように、完璧に完結していることです。
Playアプリケーションのデプロイはシンプルで、コンテナベースのアプローチをしてきたJava開発者の多くが経験してきた環境齟齬を回避することができます。&lt;/p&gt;

&lt;p&gt;Ruby on Rails, GrailsやDjangoなどの新しいWebフレームワークは、動的型付によってとても優れた生産性を発揮します。Playも動的言語フレームワークが持っているのと同じように、素早い繰り返しと高速な開発を行うことができ、しかしながらJavaやScalaのような静的型付言語による恩恵も留めています。これによりコンパイラは生産性を妨害することなく開発者を支援することができます。&lt;/p&gt;

&lt;h2 id=&quot;squeryl&quot;&gt;Squerylの紹介&lt;/h2&gt;
&lt;p&gt;データベースとのインテグレーションに最適の技術は何か？これは今まで幾度と無く討論されてきました。幸いなことに、JavaやScalaのエコシステムでは、データの永続化の方法が複数用意され、選択することができます。
Play2のデフォルトのデータベースマッピングツールはAnormが使われています。(※AnormはORMではありません)
名前が指し示す通り、Anormはオブジェクトとリレーショナルモデルとの自動マッピングを行いません。
代わりに、開発者はネイティブなSQLを書き、手動でリレーショナルデータとオブジェクトのマッピングを行います。
この手法では、実行される生のクエリーをチューニングすることができるという利点があります。
Playの開発者は、SQLを使用することはリレーショナルデータベースとの対話とSQL層を抽象化することにおいての優れたDSLであり、パワフルで柔軟な方法だと主張してます。&lt;/p&gt;

&lt;p&gt;Squerylは、Scalaにおけるデータ永続化のためのAnormの代替手段です。Anormと比較して、SquerylはHibernateに似ており、オブジェクトリレーショナルマッピングを提供します。Squerylはデータベースとの対話において、型安全なDSLを提供します。
またSquerylは、明示的に取得されるデータオブジェクトの粒度を制御することができます。
Hibernateのような従来のORMと共通のN+1問題に対するエレガントなソリューションを提供します。&lt;/p&gt;

&lt;p&gt;SquerylはPlay2のデフォルトのデータ永続化ライブラリではありませんが、特別な追加設定やセットアップは必要としません。データベースエボリューションは手動で行う必要があり、データベース接続は初期起動時に生成する必要があります。トランザクションも同様に、コントローラーで呼ばれた際に、明示的に定義される必要があります。&lt;/p&gt;

&lt;h2 id=&quot;play2squeryl&quot;&gt;Play2でのSquerylのセットアップ&lt;/h2&gt;
&lt;p&gt;Play2プロジェクトがまだない場合、Play2をインストール後、新規プロジェクトを作成しましょう。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;play new mysquerylapp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;プロジェクトの言語はScalaを選択しましょう。&lt;/p&gt;

&lt;p&gt;SquerylライブラリをPlayプロジェクトに追加する必要があります。後ほどプロジェクトはHerokuにデプロイします。HerokuのデフォルトのデータベースはPostgreSQLで、PostgreJDBCドライバーも依存関係にあるためここで追加します。&lt;/p&gt;

&lt;p&gt;project/Build.scalaファイルを編集し、依存関係を更新しましょう。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;val &lt;span class=&quot;nv&quot;&gt;appDependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Seq&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;org.squeryl&amp;quot;&lt;/span&gt; %% &lt;span class=&quot;s2&quot;&gt;&amp;quot;squeryl&amp;quot;&lt;/span&gt; % &lt;span class=&quot;s2&quot;&gt;&amp;quot;0.9.5-2&amp;quot;&lt;/span&gt;,
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;postgresql&amp;quot;&lt;/span&gt; % &lt;span class=&quot;s2&quot;&gt;&amp;quot;postgresql&amp;quot;&lt;/span&gt; % &lt;span class=&quot;s2&quot;&gt;&amp;quot;9.1-901-1.jdbc4&amp;quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;IDEにEclipseやIntellijを使っている場合、Playはプロジェクトを自動作成してくれます。&lt;/p&gt;

&lt;p&gt;Intellijの場合&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;play idea
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Eclipseの場合&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;play eclipsify
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;ここでは注意ですが、プロジェクトファイルは依存関係を更新した後に作成しましょう。なぜならプロジェクトは必要なライブラリも含めて構成されるからです。もし後で依存関係を更新する場合は、プロジェクトを生成するコマンドを再度実行してください。&lt;/p&gt;

&lt;p&gt;これでプロジェクトを実行することができます。プロジェクトルートに移動し、以下のコマンドを実行しましょう。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;play ~run
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;サーバは以下のURLで起動しています。確かめてみましょう。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;http://localhost:9000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;ローカルでのテストではインメモリのh2データベースを使用します。Playでこのデータベースを使用するには、conf/application.confファイルを修正し、以下の行のコメントアウトの解除か、行の追加をします。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;db.default.driver&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;org.h2.Driver
db.default.url&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;jdbc:h2:mem:play&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;最後のセットアップ手順として、Squerylデータベースを接続します。データベースの接続情報を取得するために、Play標準の構成システムを使います。
Playアプリケーションのライフサイクルのスタートアップフェーズにフックするグローバルクラスを追加するだけで完了です。
app/Global.scalaファイルを新規に作成し、以下を記述します。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;import org.squeryl.adapters.&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;H2Adapter, PostgreSqlAdapter&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
import org.squeryl.internals.DatabaseAdapter
import org.squeryl.&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;Session, SessionFactory&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
import play.api.db.DB
import play.api.GlobalSettings

import play.api.Application

object Global extends GlobalSettings &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  override def onStart&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;app: Application&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    SessionFactory.concreteFactory &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; app.configuration.getString&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;db.default.driver&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; match &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;case &lt;/span&gt;Some&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;org.h2.Driver&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;gt; Some&lt;span class=&quot;o&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;gt; getSession&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;new H2Adapter, app&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;case &lt;/span&gt;Some&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;org.postgresql.Driver&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;gt; Some&lt;span class=&quot;o&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;gt; getSession&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;new PostgreSqlAdapter, app&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;case &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;gt; sys.error&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Database driver must be either org.h2.Driver or org.postgresql.Driver&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  def getSession&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;adapter:DatabaseAdapter, app: Application&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Session.create&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;DB.getConnection&lt;span class=&quot;o&quot;&gt;()(&lt;/span&gt;app&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, adapter&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;アプリケーションスタートアップのdb.default.driver設定パラメータは、データベース接続のセットアップのために使用するドライバを決定するために使われます。新しいコネクションが生成され、SquerylのSessionFactoryにストアされます。&lt;/p&gt;

&lt;p&gt;ブラウザで、http://localhost:9000をリロードすると、アプリケーションが動作し、PlayのSTDOUTログで以下のメッセージが表示されるはずです。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;info&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; play - database &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;default&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; connected at jdbc:h2:mem:play
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;entity&quot;&gt;Entityの作成&lt;/h2&gt;
&lt;p&gt;それでは、データベースでデータを保持するためのシンプルなEntityオブジェクトを作成しましょう。app/models/Bar.scalaファイルを新規に作成し、以下のを記述します。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;package models

import org.squeryl.&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;Schema, KeyedEntity&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;case &lt;/span&gt;class Bar&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;name: Option&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;String&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; extends KeyedEntity&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Long&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  val id: &lt;span class=&quot;nv&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

object AppDB extends Schema &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  val &lt;span class=&quot;nv&quot;&gt;barTable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; table［Bar］&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;これはBarオブジェクトのリストを保持するかなりシンプルなentityです。各々のBarはnameとプライマリキーとしてIDを持っています。Scalaのcase classは,不変で、基本的にクラスを文法上の便宜で満たすものです。また、クライアントから返却されたフォーム値のマッチングを行う際にとても便利なパターンマッチングとして使用することもできます。AppDBオブジェクトは、Squerylがデータベースへマッピングするスキーマのインスタンスです。今回の場合、データベースにbarというテーブルを１つ定義します。スキーマは単一のオブジェクトとして宣言されるため、シングルトンオブジェクトを生成します。&lt;/p&gt;

&lt;p&gt;Squerylを使うと、AppDB.createメソッドを呼ぶだけでプラグラムチックにデータベーススキーマを生成することができます。ですが、手動でSQLスクリプトを作成する方法をお勧めします（PlayではこのSQLスクリプトをevolutions scriptと呼びます)。Playは、これらのSQLスクリプトに対応するデータベーススキーマをチェックして、データベーススキーマの変更を追跡します。Playは、スキーマが古くなっていることを検出すると、このSQLスクリプトの適用を提案してきます。これはDEVモードのときにのみ行われ、PRODモードでは、アプリケーションの起動前にスクリプトを適用されます。これにより、データベーススキーマの変更やバージョンのロールバックを行う必要がある場合に、スキーマの変更をコントロールすることができます。&lt;/p&gt;

&lt;p&gt;conf/evolutions/default/1.sqlファイルを新規作成して、以下を記述します。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;&lt;span class=&quot;c&quot;&gt;# --- First database schema&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# --- !Ups&lt;/span&gt;

create sequence s_bar_id;

create table bar &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  id    bigint DEFAULT nextval&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;s_bar_id&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;,
  name  varchar&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;128&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;;


&lt;span class=&quot;c&quot;&gt;# --- !Downs&lt;/span&gt;

drop table bar;
drop sequence s_bar_id;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;このSQLファイルは”Ups”と”Downs”の2つのセクションから成っています。”Ups”セクションは、データベーススキーマに変更を反映させ、”Downs”セクションは、データベースへの変更を取り消す際の記述です。Playは、データベーススキーマへの変更をこれらのファイルの名前順に適用します。もし、デプロイ後1.sqlの適用後にスキーマへ変更を行う必要がある場合は、2.sqlファイルに変更内容を記述します。
http://localhost:9000をリロードすると、Playがデータベースへの変更を適用するか尋ねてくるはずです。1.sqlの”Ups”セクションをローカルのインメモリデータベースに適用するために、Apply this script now!ボタンをクリックします。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;モデルのテスト&lt;/h2&gt;

&lt;p&gt;Play2では、テスト駆動開発のスタイルに合った強力なテストサポートがなされています。ScalaでPlay2を使う場合、テストはデフォルトでspaes2が使われていますが、ScalaTestを使用します。Barモデルオブジェクトのシンプルなテストを作ります。プロジェクトにScalaTestの依存関係を追加し、testOptions設定を修正します。project/Build.scalaを以下を追記して更新します。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;val &lt;span class=&quot;nv&quot;&gt;appDependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Seq&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;org.scalatest&amp;quot;&lt;/span&gt; %% &lt;span class=&quot;s2&quot;&gt;&amp;quot;scalatest&amp;quot;&lt;/span&gt; % &lt;span class=&quot;s2&quot;&gt;&amp;quot;1.8&amp;quot;&lt;/span&gt; % &lt;span class=&quot;s2&quot;&gt;&amp;quot;test&amp;quot;&lt;/span&gt;,
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;org.squeryl&amp;quot;&lt;/span&gt; %% &lt;span class=&quot;s2&quot;&gt;&amp;quot;squeryl&amp;quot;&lt;/span&gt; % &lt;span class=&quot;s2&quot;&gt;&amp;quot;0.9.5-2&amp;quot;&lt;/span&gt;,
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;postgresql&amp;quot;&lt;/span&gt; % &lt;span class=&quot;s2&quot;&gt;&amp;quot;postgresql&amp;quot;&lt;/span&gt; % &lt;span class=&quot;s2&quot;&gt;&amp;quot;9.1-901-1.jdbc4&amp;quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

val &lt;span class=&quot;nv&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; PlayProject&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;appName, appVersion, appDependencies, &lt;span class=&quot;nv&quot;&gt;mainLang&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; SCALA&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.settings&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  testOptions in Test :&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Nil
  // Add your own project settings here
&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;test/BarSpec.scalaを新規作成し以下を記述します。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;import models.&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;AppDB, Bar&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

import org.scalatest.FlatSpec
import org.scalatest.matchers.ShouldMatchers

import org.squeryl.PrimitiveTypeMode.inTransaction

import play.api.test._
import play.api.test.Helpers._

class BarSpec extends FlatSpec with ShouldMatchers &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;s2&quot;&gt;&amp;quot;A Bar&amp;quot;&lt;/span&gt; should &lt;span class=&quot;s2&quot;&gt;&amp;quot;be creatable&amp;quot;&lt;/span&gt; in &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    running&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;FakeApplication&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;additionalConfiguration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; inMemoryDatabase&lt;span class=&quot;o&quot;&gt;()))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      inTransaction &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        val &lt;span class=&quot;nv&quot;&gt;bar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; AppDB.barTable insert Bar&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Some&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
        bar.id should not equal&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;このテストでは、実行するためにFakeApplicationとインメモリデータベースを使います。FakeApplicationを使用すると、Squerylデータベースコネクションは先に生成されたGlobalオブジェクトを使って構成されます。テスト本体は単純にBarのインスタンスを生成し、idが０ではないことをテストします。
これはSquerylトランザクションで行われます。
1系のPlayと異なり、テストはコマンドラインから実行されます。コマンドは以下&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;play &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;テストが終了したら、以下のメッセージがPlayのSTDOUTログに出力されていることを確認します。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;info&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Passed: : Total 1, Failed 0, Errors 0, Passed 1, Skipped 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;ソースの変更の度にテストを実行するには、以下のコマンドで実行します&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;play ~test
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;~runと~testコマンドはバックグラウンドで継続して実行することができます。これにより、ユニットテスト/機能テストやブラウザからの手動テストをすぐさま実行することができます。&lt;/p&gt;

&lt;h2 id=&quot;webbar&quot;&gt;WebフォームからBarを生成する&lt;/h2&gt;

&lt;p&gt;新しくBarオブジェクトを生成するための基本的なWeb UIを追加してみましょう。このセクションの手順を全て踏まないとコードのコンパイルができないので注意してください。&lt;/p&gt;

&lt;p&gt;最初に、app/controllers/Application.scalaファイルを下記の記述を追加して更新します。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;package controllers

import play.api.mvc._

import com.codahale.jerkson.Json
import play.api.data.Form
import play.api.data.Forms.&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;mapping, text, optional&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

import org.squeryl.PrimitiveTypeMode._
import models.&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;AppDB, Bar&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;


object Application extends Controller &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  val &lt;span class=&quot;nv&quot;&gt;barForm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Form&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    mapping&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; -&amp;gt; optional&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;text&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;Bar.apply&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;Bar.unapply&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

  def &lt;span class=&quot;nv&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Action &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    Ok&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;views.html.index&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;barForm&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  def &lt;span class=&quot;nv&quot;&gt;addBar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Action &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; implicit &lt;span class=&quot;nv&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;gt;
    barForm.bindFromRequest.value map &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;gt;
      inTransaction&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;AppDB.barTable insert bar&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      Redirect&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;routes.Application.index&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; getOrElse BadRequest
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;barFormは、リクエストパラメーターnameからcace class Barのプロパティnameへ（コンストラクタを通して）マッピングをします。indexメソッドは、index templateへbarFormのインスタンスを渡すように更新されました。次にtemplateを更新します。addBarメソッドは、リクエストパラメーターをオブジェクトbarにバインドし、トランザクション内でデータベースへインサートします。SquerylはPlay frameworkに統合されていないので、データベーストランザクションはSquerylのinTransactionを使って明示的に開始する必要があります。次にユーザはindexページにリダイレクトされます。リクエストパラメータがbarFormを使ってBarにマッピングされなかった場合、BadRequestエラーが返却されます。&lt;/p&gt;

&lt;p&gt;次にapp/views/index.scala.htmlテンプレートに以下を追記して更新します。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt; ＠&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;form: play.api.data.Form&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Bar&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;

 ＠main&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Welcome to Play 2.0&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    @helper.form&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; routes.Application.addBar&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        @helper.inputText&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;form&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
        &amp;lt;input &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;submit&amp;quot;&lt;/span&gt;/&amp;gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;この時点で、テンプレートはApplication Controllerのindexメソッドから渡されたForm[Bar]パラメータを取ります。テンプレート本体の新しいHTMLフォームはPlay2のform helperを使ってレンダリングされます。このフォームは、nameフィールドとsubmitボタンを持ちます。注意しなければいけないのは、フォームのアクションは、ルートからApplication controllerのaddBarメソッドへを指していることです。&lt;/p&gt;

&lt;p&gt;この時点でコンソールウィンドウをみると”value addBar is not a member of controllers.ReverseApplication”エラーがみられると思います。
これは、routeファイルがコンパイルされ、routeがチェックされたからです。まだrouteが作られていないので、conf/routesファイルを編集し、以下の行を追加します。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;POST    /bars                       controllers.Application.addBar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;これにより、/barsURLへのPOSTリクエストをaddBarメソッドへマッピングするHTTPルートを作成します。&lt;/p&gt;

&lt;p&gt;ブラウザでhttp://localhost:9000 を更新すると、新しいBarオブジェクトを追加するための基本的なフォームが表示されているはずです。成功した場合、新しいBarを追加した後に、ブラウザはindexページにリダイレクトして戻ります。&lt;/p&gt;

&lt;p&gt;これで一通りが動くようになったので、controllerのコードに戻り、これらの動作についてより理解しましょう。addBarメソッドについて理解することは、コンパイラが周囲のスコープから値を見つけるために、どのように暗黙的なキーワードを通知するかを理解するのに役立ちます。Scalaでは、implicitキーワードは、implicit関数のパラメータもしくは、inplicitオブジェクトへの変換としても使用することができます。二つは全く異なりますが、両方ともにScalaの定義を解決する方法に関連しています。この場合、implicitは一つもしくはそれ以上の関数を呼ぶ場合と全ての関数に同じあたいを渡す必要がある場合に使われます。この手順は、APIを構成する際に便利で、ユーザはいつも何のパラメータが使用されるかについて明示する必要がなくなりますが、変わりにデフォルト値に依存します。&lt;/p&gt;

&lt;p&gt;addBarの場合、barForm.bindFromRequestメソッドがplay.api.mvc.Requestパラメータをとり、明示的に渡す必要がないため、リクエストをimplicitと明示します。&lt;/p&gt;

&lt;p&gt;参考に、Form.bindToRequestメソッドのメソッド定義を記載します。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;def bindFromRequest&lt;span class=&quot;o&quot;&gt;()(&lt;/span&gt;implicit request: play.api.mvc.Request&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;_&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;: Form&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;T&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;...&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;bindFromRequestはフォームオブジェクトを返します。addBarメソッドでは、この場合Option[Bar]を返却するFormインスタンスのvalueメソッドを呼び出します。そして、呼び出しもとのマップがBarを取得し、フォームマッピングから生成できれば生成し、そうでなければgetOrElseステートメントはBadRequestを返却します。Barオブジェクトが生成することができた場合、それはトランザクション内でデータベースに保存されます。&lt;/p&gt;

&lt;p&gt;これで、Squerylでリクエストパラメータとオブジェクトをマップしオブジェクトを保存する方法について理解できたと思うので、新しいaddBar controllerメソッドのテストを書きましょう。&lt;/p&gt;

&lt;h2 id=&quot;bar&quot;&gt;Barの追加のテスト&lt;/h2&gt;

&lt;p&gt;下記の記述を新規作成したtest/ApplicationSpec.scalaファイルを記述し、addBar controllerメソッドの新しいテストを作ります。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;import controllers.routes
import models.&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;AppDB, Bar&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

import org.scalatest.FlatSpec
import org.scalatest.matchers.ShouldMatchers

import org.squeryl.PrimitiveTypeMode.inTransaction

import play.api.http.ContentTypes.JSON
import play.api.test._
import play.api.test.Helpers._

class ApplicationSpec extends FlatSpec with ShouldMatchers &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;s2&quot;&gt;&amp;quot;A request to the addBar action&amp;quot;&lt;/span&gt; should &lt;span class=&quot;s2&quot;&gt;&amp;quot;respond&amp;quot;&lt;/span&gt; in &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    running&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;FakeApplication&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;additionalConfiguration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; inMemoryDatabase&lt;span class=&quot;o&quot;&gt;()))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      val &lt;span class=&quot;nv&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; controllers.Application.addBar&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;FakeRequest&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;.withFormUrlEncodedBody&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;FooBar&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
      status&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;result&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; should equal &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;SEE_OTHER&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      redirectLocation&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;result&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; should equal &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Some&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;routes.Application.index.url&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;機能テストではインメモリーデータベースとFakeApplicationを使います。テストでは、Application controllerのaddBarメソッドへのリクエストとnameという名前でFooBarという値のフォームパラメータを生成します。このテストの成功は、シンプルにindexページへリダイレクトされることで、ステータスがSEE_OTHER(HTTP 303ステータスコード)であるかをチェックし、リダイレクトのロケーションはindexページのURLでチェックされます。play testでテストを実行するか、play ~testであればコードの変更のタイミングでテストが実行されています。&lt;/p&gt;

&lt;h2 id=&quot;jsonbar&quot;&gt;JSONとしてBarを取得する&lt;/h2&gt;

&lt;p&gt;JSONのシリアライズされたデータとして全てのBarオブジェクトをアプリケーションへ返却するRESTfulなサービスを追加しましょう。app/controllers/Application.scalaファイルに新しいメソッドを追加します。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;  def &lt;span class=&quot;nv&quot;&gt;getBars&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Action &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    val &lt;span class=&quot;nv&quot;&gt;json&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; inTransaction &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      val &lt;span class=&quot;nv&quot;&gt;bars&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; from&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;AppDB.barTable&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;barTable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;gt;
        &lt;span class=&quot;k&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;barTable&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      Json.generate&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;bars&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    Ok&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;json&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.as&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;JSON&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;getBarsメソッドは、Squerylを使用してデータベースからBarオブジェクトを取ってきて、BarオブジェクトのJSON形式のリストを生成し、JSONデータを返却します。&lt;/p&gt;

&lt;p&gt;conf/routesファイルに新しいルートを追加します。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;GET     /bars                       controllers.Application.getBars
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;これにより、/barsへのGETリクエストがgetBarsメソッドへマッピングされます。&lt;/p&gt;

&lt;p&gt;ブラウザでhttp://localhost:9000/barsを表示させ確認してみましょう。&lt;/p&gt;

&lt;p&gt;JSONとしてシリアライズされたBarオブジェクトのリストが見られるはずです。&lt;/p&gt;

&lt;p&gt;前述した通り、トランザクションはSquerylのinTransactionで明示的に開始される必要があり、データベースから値をselectする場合もです。そして、トランザクション内で、Barの全てののエンティティはデータベースから取得されます。&lt;/p&gt;

&lt;p&gt;クエリーの構文は、Squerylのタイプ・セーフなクエリー言語の力とDSLを作るためのScalaの力を示しています。from関数は最初のパラメータとしてテーブルへのタイプ・セーフな参照を受け取ります。これはキーワードからのSQLに似ています。２番目のパラメータは、パラメータとしてクエリーにテーブルを取得し、そのテーブル上に何をするかを指定します。この場合はselectです。formは、barsを不変な定数にセットされている反復処理可能なオブジェクトを返却します。その後、Json.generateメソッドは、データベースから取得されたbarsを反復処理し、それらを返却します。jsonの定数は、application/json(JSONの値)にセットされたコンテントタイプと共に、OK(HTTP 200ステータスコードの応答)で返却されます。&lt;/p&gt;

&lt;h2 id=&quot;json&quot;&gt;JSONサービスをテストする&lt;/h2&gt;

&lt;p&gt;JSONサービスをテストする新しいテストのためにtest/ApplicationSpec.scalaを更新します。以下を追記します。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;A request to the getBars Action&amp;quot;&lt;/span&gt; should &lt;span class=&quot;s2&quot;&gt;&amp;quot;respond with data&amp;quot;&lt;/span&gt; in &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    running&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;FakeApplication&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;additionalConfiguration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; inMemoryDatabase&lt;span class=&quot;o&quot;&gt;()))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      inTransaction&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;AppDB.barTable insert Bar&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Some&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt;

      val &lt;span class=&quot;nv&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; controllers.Application.getBars&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;FakeRequest&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
      status&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;result&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; should equal &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;OK&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      contentAsString&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;result&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; should include &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;再びこの機能テストでは、FakeApplicationとインメモリデータベースを使用します。そしてデータベースに新しいBarを生成し、Application controllerのgetBarsメソッドへのリクエストを作ります。テストしたレスポンスはOK(HTTP 200)で、生成されたBarの名前を含んでいるはずです。前と同じように、play testでこのテストを実行するか、play ~testで実行します。これで３つのテストに通っているはずです。&lt;/p&gt;

&lt;h2 id=&quot;coffescriptjquerybars&quot;&gt;CoffeScriptとjQueryでBarsを表示する&lt;/h2&gt;

&lt;p&gt;これで、Barオブジェクトのリストを取得するRESTfulなJSONサービスができたので、取得とindexページへの表示を行うようCoffeScriptとjQueryを使って書いてみましょう。Play2の新しい機能の一つに、CoffeeScriptからJavaScriptへコンパイルとJavaScriptの構文チェック、ミニファイ化、LESSのCSSへのコンパイルを行うassetコンパイラがあります。&lt;/p&gt;

&lt;p&gt;app/assets/javascripts/index.coffeeファイルを新規作成し、下記を記述します。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;-&amp;gt;
  &lt;span class=&quot;nv&quot;&gt;$.&lt;/span&gt;get &lt;span class=&quot;s2&quot;&gt;&amp;quot;/bars&amp;quot;&lt;/span&gt;, &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; -&amp;gt;
    &lt;span class=&quot;nv&quot;&gt;$.&lt;/span&gt;each data, &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;index, item&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; -&amp;gt;
      &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;#bars&amp;quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;.append &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;lt;li&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;.text item.name
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;このCoffeeScriptは、/barsへのgetリクエストを作るためにjQueryを使用し、各barに対して反復処理を行い、barsのidと共にbarをページのエレメントに追加します。では、このスクリプトをロードするためにapp/views/index.scala.htmlテンプレートを更新し、ページにbarsエレメントを入れてみましょう。以下の記述をテンプレートのmainセクションのトップに追加します。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt; &amp;lt;script &lt;span class=&quot;nv&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;@routes.Assets.at(&amp;quot;&lt;/span&gt;javascripts/index.min.js&lt;span class=&quot;s2&quot;&gt;&amp;quot;)&amp;quot;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;    
    &amp;lt;ul &lt;span class=&quot;nv&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;bars&amp;quot;&lt;/span&gt;&amp;gt;&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;スクリプトのsrcは、javascripts/index.min.jsファイルへのURLを取得するためにroutes.Assets.at関数を使うことに注意してください。まだこのファイルは存在していません。Playのassetコンパイラは、index.coffeeファイルをコンパイルしてミニファイ化されたこのファイルを生成する必要がることを検知します。再度http://localhost:9000 のWebページを読み込み、新しいBarを生成し、Webページに表示されることを確認しましょう。&lt;/p&gt;

&lt;h2 id=&quot;heroku&quot;&gt;Herokuへのデプロイ&lt;/h2&gt;

&lt;p&gt;Herokuはクラウド上でPlay2の実行環境を提供する複数言語対応したCloud Application Platformです。このアプリケーションをHerokuへデプロイするには以下の手順を実行します。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;1. 下記の内容を記述したProcfileをルートディレクトリは以下に作成します。&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;web: target/start -Dhttp.port&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PORT&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; -DapplyEvolutions.default&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt; -Ddb.default.driver&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;org.postgresql.Driver -Ddb.default.url&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;DATABASE_URL&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;JAVA_OPTS&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;これによりHerokuへPlayアプリケーションの実行方法を伝えます。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;2. Herokuは、Heroku上へのファイル転送にGitを用います。まだGitがインストールされていないのであれば、Gitをインストールしましょう。プロジェクトのルートディレクトリから、このプロジェクト用のGitリポジトリを生成し、ファイルを追加し、コミットします。&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;git init
git add .
git commit -m init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;3. HerokuのツールベルトはHerokuへのコマンドラインインターフェースです。Heroku ツールベルトをインストールしましょう。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;4. Herokuアカウントへサインアップします。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;5. コマンドラインからHerokuへログインします：&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;heroku login
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;GitのSSHキーをセットアップし、それをHerokuアカウントへ紐付けます。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;6. 新しいアプリケーションをHerokuにプロビジョニングします。&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;heroku create --stack cedar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;7. HerokuへアプリケーションをPushします。&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;git push heroku master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Herokuが、SBTでアプリケーションをビルドし、dyno上で実行します。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;8. ブラウザでクラウド上で実行されるアプリケーションを開きましょう。&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;heroku open
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;おめでとうございます！これであなたのアプリケーションはクラウド上で実行されています。&lt;/p&gt;

&lt;h2 id=&quot;share-your-opinion&quot;&gt;Share Your Opinion&lt;/h2&gt;

&lt;p&gt;Play2について思うところはありませんか？&lt;a href=&quot;http://www.artima.com/forums/flat.jsp?forum=226&amp;amp;thread=344288&quot;&gt;Getting Started with Play2, Scala, and Squeryl&lt;/a&gt;のフォーラムトピックで議論しましょう。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;リソース&lt;/h2&gt;

&lt;p&gt;このプロジェクトの全てのソースコードは、Github上から入手することができます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/jamesward/play2bars/blob/scala-squeryl&quot;&gt;https://github.com/jamesward/play2bars/blob/scala-squeryl&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ローカルでPlayが実行されている場合、Playのローカルドキュメントにアクセスできます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://localhost:9000/@documentation&quot;&gt;http://localhost:9000/@documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;下記のサイトでもPlayのドキュメントを閲覧できます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.playframework.org/documentation&quot;&gt;http://www.playframework.org/documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Herokuについては、Heroku Dev Centerを見てください。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://devcenter.heroku.com/&quot;&gt;http://devcenter.heroku.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;この記事が一助となればと思いますが、もし質問や問題があれば我々に知らせてください。&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;著者について&lt;/h2&gt;

&lt;p&gt;James Ward (&lt;a href=&quot;www.jamesward.com&quot;&gt;www.jamesward.com&lt;/a&gt;) is a Principal Developer Evangelist at Heroku. Today he focuses on teaching developers how to deploy Java, Play! and Scala apps to the cloud. James frequently presents at conferences around the world such as JavaOne, Devoxx, and many other Java get-togethers. Along with Bruce Eckel, James co-authored First Steps in Flex. He has also published numerous screencasts, blogs, and technical articles. Starting with Pascal and Assembly in the 80&amp;#8217;s, James found his passion for writing code. Beginning in the 90&amp;#8217;s he began doing web development with HTML, Perl/CGI, then Java. After building a Flex and Java based customer service portal in 2004 for Pillar Data Systems he became a Technical Evangelist for Flex at Adobe. You can find him tweeting as &lt;a href=&quot;http://twitter.com/_JamesWard&quot;&gt;@JamesWard&lt;/a&gt;, answering questions on &lt;a href=&quot;http://stackoverflow.com/users/77409/james-ward&quot;&gt;StackOverflow.com&lt;/a&gt;, and posting code at &lt;a href=&quot;http://github.com/jamesward&quot;&gt;github.com/jamesward&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Ryan Knight is a senior software architect and consultant with over fifteen years of experience in all aspects of cloud computing and software development. He first started Java Consulting for Sun Microsystems Java Center and now runs his own consulting company. Some of his recent projects include being a software Consultant for Deloitte at the State of Louisiana, expert services for Adobe at T-Mobile, creatng a web application at Team Marketing Report, development of a text and voice chat system for Sony Online Entertainment, contributing to the Development of a Gift Card Creation Tool, and being a software architect for Williams Pipeline.&lt;/p&gt;

</description>
                <link>http://modalsoul.github.io/programing/2012/07/31/Getting-Started-with-Play2-Scala-and-Squeryl</link>
                <guid>http://modalsoul.github.io/programing/2012/07/31/Getting-Started-with-Play2-Scala-and-Squeryl</guid>
                <pubDate>2012-07-31T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>【意訳】データベース駆動アプリのための、Play2最適化について　#play_ja</title>
                <description>&lt;p&gt;この記事は、HerokuのPrincipal Developer Evangelistの&lt;a href=&quot;http://www.jamesward.com/2012/06/25/optimizing-play-2-for-database-driven-apps&quot;&gt;James Ward氏の記事&lt;/a&gt;の意訳です。参考程度にどうぞ。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://capture.heartrails.com/300x200/cool?http://www.jamesward.com/2012/06/25/optimizing-play-2-for-database-driven-apps&quot; alt=&quot;Optimizing Play 2 for Database-Driven Apps&quot; /&gt;&lt;/p&gt;

&lt;p&gt;誤訳・誤植等ありましたら、&lt;a href=&quot;https://twitter.com/modal_soul&quot;&gt;@modal_soulまで&lt;/a&gt;リプライいただけるとありがたいです。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;先週Matt Raible氏と共に、UberConfで行われたPlay vs. Grailsスマックダウンでプレゼンテーションをしました。
このセッションの目標は、同じフレームワークを用いて同じアプリケーションを作り、Play2+JavaとGrailsを比較することです。
比較のために、いくつかのベンチマークを含む評価基準を使用しました。
結果については、こちら（&lt;a href=&quot;http://raibledesigns.com/rd/entry/play_vs_grails_smackdown_at&quot;&gt;Matt&amp;#8217;s session recap blog&lt;/a&gt;）に詳しく掲載されています。
評価結果のプレゼンの後、これらのタイプのアプリケーションでPlay2のAkkaスレッドシステムを最適化するのに重要なことを発見しました。
Play2は、ブロッキングのコールを含まないHTTPリクエスト(i.e. 非同期)のためにout-of-the-boxに最適化されています。
Javaのほとんどのデータベース駆動アプリでは同期コールはJDBC経由で使用されるため、Play2ではこれらのリクエストタイプのためにAkkaを調整するちょっとした設定が必要です。&lt;/p&gt;

&lt;p&gt;シンプルな例をあげてみます。時間的に現実的なデータベースブロックをシミュレートするために、このベンチマークをローカルではなくHeroku上で実行します。
&lt;a href=&quot;https://github.com/jamesward/play2bars&quot;&gt;&amp;#8220;play2bars&amp;#8221;example app&lt;/a&gt;から&amp;#8221;java-ebean&amp;#8221;ブランチとHerokuの共有のPostgreSQLデータベースを使います。&lt;/p&gt;

&lt;p&gt;Apache Benchを実行して、同時100クライアント接続で10000リクエストをアプリのJSONサービスへ投げるために、同じAWSリージョンにあるEC2サーバーからHerokuのmy appとして、以下のコマンドを実行しました。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;ab -n 10000 -c 100 http://falling-dusk-7291.herokuapp.com/bars
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;最初の最適化前の結果がこちらです&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;Concurrency Level:      100
Time taken &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;tests:   10.272 seconds
Complete requests:      10000
Failed requests:        0
Write errors:           0
Total transferred:      1560000 bytes
HTML transferred:       510000 bytes
Requests per second:    973.53 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#/sec] (mean)&lt;/span&gt;
Time per request:       102.719 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;ms&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;mean&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;毎秒973リクエストは悪くはありませんが、下記のようなエラーが確認できました。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;error&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; play - Cannot invoke the action, eventually got an error: Thrown&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;akka.pattern.AskTimeoutException: Timed out&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;これは、Akkaが長時間ブロックされたことを意味しており、同期のコード実行を改善するようにPlay中のAkkaの設定を変え、評価を再実行しました。その結果は以下のようになりました。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;Concurrency Level:      100
Time taken &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;tests:   7.274 seconds
Complete requests:      10000
Failed requests:        0
Write errors:           0
Total transferred:      1560000 bytes
HTML transferred:       510000 bytes
Requests per second:    1374.70 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#/sec] (mean)&lt;/span&gt;
Time per request:       72.743 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;ms&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;mean&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;今回は、毎秒1374リクエストになりました。シンプルな最適化の方法は、Akkaで処理を行うスレッドを増やすして、タイムアウト値を長く設定することです。それによりスレッドが同期DBによってブロックされた際、より多くのリクエストをハンドリングするためにさらにスレッドを呼び出します。実際に使ったPlayの設定は以下です。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;play &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
 
    akka &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
 
        actor &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
 
            deployment &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
 
                /actions &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;nv&quot;&gt;router&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; round-robin
                    nr-of-instances &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 100
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 
                /promises &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;nv&quot;&gt;router&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; round-robin
                    nr-of-instances &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 100
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 
            &lt;span class=&quot;nv&quot;&gt;retrieveBodyParserTimeout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 5 seconds
 
            actions-dispatcher &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                fork-join-executor &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    parallelism-factor &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 100
                    parallelism-max &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 100
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 
            promises-dispatcher &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                fork-join-executor &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    parallelism-factor &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 100
                    parallelism-max &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 100
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Akkaで使用されるスレッドの数は、CPUと&amp;#8221;parallelism-factor&amp;#8221;の設定値を掛け合わせた値で、&amp;#8221;parallelism-max&amp;#8221;が上限値です。
デフォルトの&amp;#8221;parallelism-factor&amp;#8221;は&amp;#8221;1&amp;#8221;に設定されていて、この場合スレッド数はCPU数と同じで、&amp;#8221;parallelism-max&amp;#8221;のデフォルトは&amp;#8221;24&amp;#8221;です。これらの設定について詳しくは、&lt;a href=&quot;http://www.playframework.org/documentation/2.0/AkkaCore&quot;&gt;Playのドキュメント&lt;/a&gt;で確認できます。&lt;/p&gt;

&lt;p&gt;すべての設定ファイルは&lt;a href=&quot;https://github.com/jamesward/play2bars/tree/java-ebean/conf&quot;&gt;こちらのplay2barsプロジェクトから&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;このベンチマークはあくまで参考であって、それぞれの環境で異なってくると思います。それぞれの環境に合わせたチューニングをしてください。質問があれば是非。&lt;/p&gt;

</description>
                <link>http://modalsoul.github.io/programing/2012/07/26/Optimizing-Play2-for-Database-Driven-Apps</link>
                <guid>http://modalsoul.github.io/programing/2012/07/26/Optimizing-Play2-for-Database-Driven-Apps</guid>
                <pubDate>2012-07-26T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>みなとRuby会議01に参加しました。#minatork01</title>
                <description>&lt;p&gt;当日のTwitterのまとめはこちら↓&lt;/p&gt;

&lt;p&gt;・&lt;a href=&quot;https://yukar.in/note/ckF3Wr&quot;&gt;みなとRuby会議01 前半まとめ #minatork01&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;・&lt;a href=&quot;https://yukar.in/note/ckF3We&quot;&gt;みなとRuby会議01 後半まとめ #minatork01&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;http://distilleryimage2.instagram.com/70137e18ac5611e19894123138140d8c_7.jpg&quot; height=&quot;60%&quot; width=&quot;60%&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;ruby&quot;&gt;初Rubyイベント参加&lt;/h2&gt;
&lt;p&gt;ずっとRubyは勉強したいと思っていたのですが、なかなか進まず放置状態でした。、(^^;)
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;そんな私は普段Rubyを書いているわけもなく、
たまたま勉強会でよくお会いする&lt;a href=&quot;https://twitter.com/#!/joker1007&quot;&gt;@joker1007&lt;/a&gt; さん経由でこのみなとRuby会議が開催されることを知り、一念発起し参加と相成りました。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;ruby-1&quot;&gt;Rubyのコミュニティ力&lt;/h2&gt;
&lt;p&gt;言語やプラットフォームなどなど、新しい技術を学ぶとき、
その技術そのものの利点と同じようにその技術の「コミュニティ」が選ぶ理由になると思うのですが、
今回はじめてRuby界隈のイベントに参加させていただき、、
他のイベント・勉強会と比べても、Rubyコミュニティのレベルが高いなぁと関心するところが、随所に見られました。&lt;/p&gt;

&lt;p&gt;なぜRubyはコミュ力が高いのか？は、わかりませんが、
スタートアップのプログラミング言語と言われるに納得できるAgilityの高さを感じました。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;english-numerals&quot;&gt;English Numeralsリベンジ&lt;/h2&gt;
&lt;p&gt;今回はじめてペアプロでのソーシャルコーディングをしました。&lt;/p&gt;

&lt;p&gt;普段仕事ではペアプロをするのですが、こういった機会にするペアプロも新鮮で大変面白かったです！&lt;/p&gt;

&lt;p&gt;ただ、、Ruby自体のインストールも当日の朝やってくるような準備の足りなさだったため、
ペアプロでは完全にナビ役になってしまいました。。&lt;/p&gt;

&lt;p&gt;リベンジのため、ソーシャルコーディングの課題をScalaで書いてみました。&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/2862228.js?file=numerals.scala&quot;&gt;
&lt;/script&gt;

&lt;p&gt;まだ冗長な部分もあって、いけてないですが、今のScala力ではこんなもんです。&lt;/p&gt;

&lt;p&gt;＃この記事を見たもっと強力なScala使いの方が、もっとスマートに書いてくれるでしょう、だぶん。。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;今回この様な有意義なイベントに参加させていただき、運営スタッフ、参加者の皆様、ありがとうございました。&lt;/p&gt;

&lt;p&gt;懇親会にも是非参加したかったのですが、諸事情により今回は断念となってしまいました。。orz&lt;/p&gt;

&lt;p&gt;今回のはじめの一歩に続く次のイベントも開催されること期待しています。そのときにはもう少しRuby力を上げて参加できるようがんばります！&lt;/p&gt;
</description>
                <link>http://modalsoul.github.io/report/programing/2012/06/02/minato-ruby-kaigi-01</link>
                <guid>http://modalsoul.github.io/report/programing/2012/06/02/minato-ruby-kaigi-01</guid>
                <pubDate>2012-06-02T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>横浜道場 特別編 「アジャイル開発 基本のキ」に参加しました。</title>
                <description>&lt;p&gt;今回のアジャイルサムライ横浜道場は、特別編 第２回目。アジャイルサムライの監訳者、@nawoto さんにお越し頂き、Agile Japan 2012で講演した「アジャイル開発　基本のキ」を講演して頂きました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://kokucheese.com/images/upload/33598_photo1.jpg?20120408131717&quot; alt=&quot;アジャイルサムライ読書会横浜道場&quot; /&gt;&lt;/p&gt;

&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;4fb9ea9a9d60b902f7004248&quot; data-ratio=&quot;1.299492385786802&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;
&lt;/script&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;この講演を通しての内容については、私以外の他参加者の方々が良い記事を書かれているので、そちらをご参考ください。&lt;/p&gt;

&lt;p&gt;・&lt;a href=&quot;http://d.hatena.ne.jp/absj31/20120525/1337976374&quot;&gt;http://d.hatena.ne.jp/absj31/20120525/1337976374&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;・&lt;a href=&quot;http://d.hatena.ne.jp/y_sumida/20120526/1338030740&quot;&gt;http://d.hatena.ne.jp/y_sumida/20120526/1338030740&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;・[http://grimrose.blogspot.jp/2012/05/agilesamurai&lt;em&gt;26.html](http://grimrose.blogspot.jp/2012/05/agilesamurai&lt;/em&gt;26.html)&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;この記事では、私がこの講演を通じて感じたこと、気づきをベースに書いています。&lt;/p&gt;

&lt;p&gt;ですので、必ずしも講師の@nawotoさんの意図したことを汲み取れていない可能性があります。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;何が違うのか？&lt;/h2&gt;
&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-slide=&quot;23&quot; data-id=&quot;4fb9ea9a9d60b902f7004248&quot; data-ratio=&quot;1.299492385786802&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;
&lt;/script&gt;

&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-slide=&quot;38&quot; data-id=&quot;4fb9ea9a9d60b902f7004248&quot; data-ratio=&quot;1.299492385786802&quot; src=&quot;http://speakerdeck.com/assets/embed.js&quot;&gt;
&lt;/script&gt;

&lt;p&gt;この章では、とにかく従来のやり方と同じであることの肯定を１つ１つ丁寧に積み上げているように感じました。&lt;/p&gt;

&lt;p&gt;アジャイル≒カウボーイ(無計画)のイメージや、変化に対する拒否反応に対して、&lt;/p&gt;

&lt;p&gt;これまでの計画駆動なやり方でいう上流工程を“準備”と言い換えて説明しているように感じました。&lt;/p&gt;

&lt;p&gt;こうすることで、「何が必要か」から「どう実現するか」、「いつまでに出来るか」、「確認する」のサイクルを回すイテレーティブな作業の合理性を納得できる形で示しいるんだなと思いました。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;どう進むのか？&lt;/h2&gt;
&lt;p&gt;この章では、アジャイル開発における3本の柱、「透明性」「検査」の具体的なプラクティスと「適応」の重要性を伝えるためのものと思いました。&lt;/p&gt;

&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-slide=&quot;122&quot; data-id=&quot;4fb9ea9a9d60b902f7004248&quot; data-ratio=&quot;1.299492385786802&quot; src=&quot;http://speakerdeck.com/assets/embed.js&quot;&gt;
&lt;/script&gt;

&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-slide=&quot;123&quot; data-id=&quot;4fb9ea9a9d60b902f7004248&quot; data-ratio=&quot;1.299492385786802&quot; src=&quot;http://speakerdeck.com/assets/embed.js&quot;&gt;
&lt;/script&gt;

&lt;h2 id=&quot;section-2&quot;&gt;明日から始める&lt;/h2&gt;

&lt;p&gt;この章で伝えようとしていたことは、「少しづつで構いません　良くする事を続けてください」に集約されているのだなと思いました。&lt;/p&gt;

&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-slide=&quot;148&quot; data-id=&quot;4fb9ea9a9d60b902f7004248&quot; data-ratio=&quot;1.299492385786802&quot; src=&quot;http://speakerdeck.com/assets/embed.js&quot;&gt;
&lt;/script&gt;

&lt;h2 id=&quot;section-3&quot;&gt;最後に&lt;/h2&gt;
&lt;p&gt;今回この講演を通じ、アジャイル開発を如何に伝えるか？のエッセンスを学ぶことができたように思います。
1つ1つのプラクティスがどうであるか、よりも、具体的なアクションを如何に継続できるか、そしてそれが如何に重要であるかを伝える・実感してもらことが、
アジャイル開発を知ってもらうキーポイントなのではないかと思いました。&lt;/p&gt;

</description>
                <link>http://modalsoul.github.io/report/2012/05/25/agile-kaihatsu-kihon-no-ki</link>
                <guid>http://modalsoul.github.io/report/2012/05/25/agile-kaihatsu-kihon-no-ki</guid>
                <pubDate>2012-05-25T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>スクラム道 StaffMeetup20120523に遊びに行ってきました。</title>
                <description>&lt;blockquote class=&quot;twitter-tweet&quot; data-in-reply-to=&quot;202028418051747841&quot; lang=&quot;ja&quot;&gt;
&lt;p&gt;@&lt;a href=&quot;https://twitter.com/nawoto&quot;&gt;nawoto&lt;/a&gt; StaffMeetup遊びに行ってみたいです！&lt;/p&gt;
&amp;mdash; imae masatoshiさん (@modal_soul) 
&lt;a href=&quot;https://twitter.com/modal_soul/status/202042716673159170&quot; data-datetime=&quot;2012-05-14T14:28:32+00:00&quot;&gt;5月 14, 2012&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;
&lt;/script&gt;

&lt;p&gt;こんな流れで、スクラム道のスタッフミーティングに遊びに行ってきました。&lt;/p&gt;

&lt;p&gt;スクラム道の活動がどのように運営されてきたのか、イベントに参加するだけではわからないことところを見学でき、愉しかったです。&lt;/p&gt;

&lt;p&gt;どうもありがとうございました&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&quot;http://partake.in/events/c4e5c8e0-e5d7-4d3c-a1e2-52ad57749078&quot;&gt;スクラム道 StaffMeetup20120523-［PARTAKE］&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;勉強会スタイルではないので、覚えている限り雑感をば。&lt;/p&gt;

&lt;p&gt;※多分にミーティング後のものも含まれています。&lt;/p&gt;

&lt;p&gt;・イベントにストーリーがある&lt;/p&gt;

&lt;p&gt;・ストーリーが無いものは売り切りになる、続かない&lt;/p&gt;

&lt;p&gt;・モチベーションマネジメントがすごい。コミュニティとスタッフがWinWinな関係。&lt;/p&gt;

&lt;p&gt;・大崎はロスっぽい&lt;/p&gt;

&lt;p&gt;・たすけてハラえもん&lt;/p&gt;

&lt;p&gt;・地獄のちゃんげ&lt;/p&gt;

&lt;p&gt;・母親のような心境&lt;/p&gt;

&lt;p&gt;・西のちゃんげはいらない&lt;/p&gt;

&lt;p&gt;・SlideShare有料プラン押しすぎ&lt;/p&gt;

&lt;p&gt;・Speaker Deck馬鹿でいいやつ&lt;/p&gt;

&lt;p&gt;・プロレスから学べ&lt;/p&gt;

&lt;p&gt;・信頼のayayaレスポンス、でも東京じゃん&lt;/p&gt;

&lt;p&gt;・Bで素振り&lt;/p&gt;

&lt;p&gt;・uedyo大阪夏の陣&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section&quot;&gt;地方コミュニティ募集&lt;/h2&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;ja&quot;&gt;&lt;p&gt;スクラム道と組んでくれる地方のコミュニティ求む 
&lt;a href=&quot;https://twitter.com/search/%2523scrumdo&quot;&gt;#scrumdo&lt;/a&gt;
&lt;/p&gt;&amp;mdash; Nishimura Naotoさん (@nawoto) 
&lt;a href=&quot;https://twitter.com/nawoto/status/205305686693904388&quot; data-datetime=&quot;2012-05-23T14:34:24+00:00&quot;&gt;5月 23, 2012&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;
&lt;/script&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;ja&quot;&gt;
&lt;p&gt;ちなみにネタじゃなくて本気で一緒にやってくれるとこを募集中です。メンションだけじゃ分かんないんで俺にメールしてくれ 
&lt;a href=&quot;https://twitter.com/search/%2523scrumdo&quot;&gt;#scrumdo
&lt;/a&gt;
&lt;/p&gt;&amp;mdash; Nishimura Naotoさん (@nawoto) 
&lt;a href=&quot;https://twitter.com/nawoto/status/205308208510803968&quot; data-datetime=&quot;2012-05-23T14:44:26+00:00&quot;&gt;5月 23, 2012&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;
&lt;/script&gt;

&lt;p&gt;スクラム道では、スクラム道と組んでくれる地方コミュニティを募集しているそうです。&lt;/p&gt;

&lt;p&gt;我こそは！という地方コミュニティは名乗りを挙げてみてはどうでしょうか？&lt;/p&gt;

&lt;p&gt;※個人的には、会津若松のコミュニティ（あるのか？）にでてきてもらいたいな、と&lt;/p&gt;
</description>
                <link>http://modalsoul.github.io/report/2012/05/23/scrumdo-staff-meet-up</link>
                <guid>http://modalsoul.github.io/report/2012/05/23/scrumdo-staff-meet-up</guid>
                <pubDate>2012-05-23T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>「全員スクラムマスター。」に参加しました。#devlove</title>
                <description>&lt;p&gt;キャッチーなイベントタイトルに釣られて参加してきました。
私はスクラムマスターではない(自称ですらない)ですが、まぁ細かい事を気にしてはいけません。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&quot;http://kokucheese.com/event/index/36283/&quot;&gt;
&lt;img title=&quot;5月21日 全員スクラムマスター。(東京都)&quot; src=&quot;http://capture.heartrails.com/360x250/cool/shorten?http://kokucheese.com/event/index/36283/&quot; alt=&quot;http://kokucheese.com/event/index/36283/&quot; width=&quot;360&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;今回、CSM研修同期のMTIのイケメンスクラムマスター岩崎さん（@niwa303）が、事例発表をされるということと、CSM,CSPO数ぶっちぎりだけど勉強会でなかなか遭遇しないMTI社の事例が聞けるということで、その辺りも期待していました。&lt;/p&gt;

&lt;p&gt;イベント本編は、事例発表＆ダイアログの形式でした。私以外の他参加者の方々が良い記事を書かれているので、ご紹介。&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;・[悩めるアジャイルに贈りたい『銀の弾などない』には続きがあるということ #devlove&lt;/td&gt;
      &lt;td&gt;世界 - daipresents!!](http://daipresents.com/2012/%E6%82%A9%E3%82%81%E3%82%8B%E3%82%A2%E3%82%B8%E3%83%A3%E3%82%A4%E3%83%AB%E3%81%AB%E8%B4%88%E3%82%8A%E3%81%9F%E3%81%84%E3%80%8E%E9%8A%80%E3%81%AE%E5%BC%BE%E3%81%AA%E3%81%A9%E3%81%AA%E3%81%84%E3%80%8F/)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;・&lt;a href=&quot;http://d.hatena.ne.jp/takigawa401/20120522/1337677324&quot;&gt;【ミッションたぶんPossible】 #devlove0521 全員スクラムマスター。 に参加してきました。&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;・&lt;a href=&quot;https://yukar.in/note/ckFncE&quot;&gt;全員スクラムマスター。 #devlove #devlove0521 - Yukarin&amp;#8217;Note&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section&quot;&gt;スクラムマスターとチームの距離感について&lt;/h2&gt;
&lt;p&gt;MTI 岩崎さんの事例発表を聞いて、&lt;b&gt;「チームとコミュニケーションをとるが、巻き込まれない」&lt;/b&gt;よう振舞っていると言われていたのがとても印象に残りました。&lt;/p&gt;

&lt;p&gt;MTIさんでは、1人のスクラムマスタが4チーム(多い方は8チーム)兼務するそうで、チームの細かい問題にスクラムマスタが介入していると、スクラムマスタの役割が回らなくなる。(朝会だけで軽く1時間かかる等)&lt;/p&gt;

&lt;p&gt;そのため「タスクをこなす」ではなく「改善を見出す」という考えのもとスクラムマスタがチームに働きかけているそうで、完全にチームの外側の立ち位置を取っているようでした。&lt;/p&gt;

&lt;p&gt;私の周りのスクラムマスターはどちらかというとチームよりで、内圧的にチームに作用するパターンが多く、
外圧的にチームに作用し、チームで完結する領域を最大化するというのがとても新鮮で、スクラムマスタというよりアジャイルコーチに近いのでは？という印象を受けました。&lt;/p&gt;

&lt;p&gt;スクラムマスタがチームに作用するために必要なコミュニケーションをとりつつ、巻き込まれない。適切な距離感を保ち続けるにはどうしているのでしょうか？&lt;/p&gt;

&lt;p&gt;MTIさんのようなスクラムマスタとチームの関係性は、チームを1つのチームとして完結させ、多くのチームをまわすにはとても効率の良いやり方なんだろうなと思いました。&lt;/p&gt;

&lt;p&gt;※ただ、チームが開発を楽しめているのかどうか？、個人的に気になる点ではありますね。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-1&quot;&gt;チームへの働きかけについて&lt;/h2&gt;
&lt;p&gt;ダイアログ中に共通して「スクラムを導入したいが、プラクティスがなかなかチームに浸透しない」といった問題を聞くことが多かったように感じました。&lt;/p&gt;

&lt;div style=&quot;width:425px&quot; id=&quot;__ss_13014872&quot;&gt; 
&lt;strong style=&quot;display:block;margin:12px 0 4px&quot;&gt;
&lt;a href=&quot;http://www.slideshare.net/TakaoOyobe/20120521-13014872&quot; title=&quot;私がスクラムをやめた理由 - 全員スクラムマスター。＠DevLove -&quot; target=&quot;_blank&quot;&gt;私がスクラムをやめた理由 - 全員スクラムマスター。＠DevLove -
&lt;/a&gt;
&lt;/strong&gt; 
&lt;iframe src=&quot;http://www.slideshare.net/slideshow/embed_code/13014872&quot; width=&quot;425&quot; height=&quot;355&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot;&gt;
&lt;/iframe&gt; 
&lt;div style=&quot;padding:5px 0 12px&quot;&gt;
 View more 
&lt;a href=&quot;http://www.slideshare.net/&quot; target=&quot;_blank&quot;&gt;presentations&lt;/a&gt;
 from 
&lt;a href=&quot;http://www.slideshare.net/TakaoOyobe&quot; target=&quot;_blank&quot;&gt;Takao Oyobe&lt;/a&gt; 
&lt;/div&gt; 
&lt;/div&gt;

&lt;p&gt;「スクラムを導入するためにスクラムのことを説明したが、スクラムに対する質問攻めに会い、質問者に納得の行く回答ができず理解を得られなくて失敗した」というお話もありました。&lt;/p&gt;

&lt;p&gt;個人的にはこういう場合、&lt;/p&gt;

&lt;p&gt;・プラクティスベースではなく、課題ベースで話す。&lt;/p&gt;

&lt;p&gt;・相手にとって「何が」モチベーションになるのかを見極める。&lt;/p&gt;

&lt;p&gt;の2点が重要なのかなと思っています。&lt;/p&gt;

&lt;p&gt;プラクティスを実践する人が納得してプラクティスを行う、&lt;/p&gt;

&lt;p&gt;これは王道、覇道、邪道関係なくチームに働きかける上で最も大事なことだなと思いました。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;最後に&lt;/h2&gt;

&lt;p&gt;今回この様な有意義なイベントに参加させていただき、DevLove運営スタッフ、発表者、会場提供くださったMTIの皆様、ありがとうございました。&lt;/p&gt;

&lt;p&gt;※次回は、是非事例発表する側になって、還元できればと思います。&lt;/p&gt;
</description>
                <link>http://modalsoul.github.io/report/2012/05/21/everybody-scrum-master</link>
                <guid>http://modalsoul.github.io/report/2012/05/21/everybody-scrum-master</guid>
                <pubDate>2012-05-21T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>AndroidアプリのUIテスト-InstrumentationTestCase編-</title>
                <description>&lt;p&gt;複数のActivityに跨る画面遷移のテストを調べて、サンプルを作ってみました。&lt;/p&gt;

&lt;p&gt;サンプルのAndroidプロジェクトとテストプロジェクトは以下に置きました。&lt;/p&gt;

&lt;p&gt;サンプルAndroidアプリ
&lt;a href=&quot;https://github.com/modalsoul/uiTestSample&quot;&gt;uiTestSample&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;サンプルテスト
&lt;a href=&quot;https://github.com/modalsoul/uiTestSample-test&quot;&gt;uiTestSample-test&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;参考にしたのは以下のページ
&lt;a href=&quot;http://stackoverflow.com/questions/1759626/how-do-you-test-an-android-application-across-multiple-activities&quot;&gt;How do you test an Android application across multiple Activities?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i&gt;※：参考ページでは、JUnit4を使っていますが、ここではJUnit3を使っているため一部違っています。&lt;/i&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section&quot;&gt;サンプルアプリの動作について&lt;/h2&gt;
&lt;p&gt;このサンプルでは、アプリの起動後の画面にボタンが表示され、そのボタンをクリックすると別画面に遷移します。&lt;/p&gt;

&lt;h3&gt;起動後の画面&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://www.flickr.com/photos/modalsoul/7233426834/&quot; title=&quot;uiTestSample-main by modal_soul, on Flickr&quot;&gt;
&lt;img src=&quot;http://farm6.staticflickr.com/5343/7233426834_d72dda0713.jpg&quot; width=&quot;500&quot; height=&quot;492&quot; alt=&quot;uiTestSample-main&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;ボタンクリックで遷移後の画面&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://www.flickr.com/photos/modalsoul/7233469296/&quot; title=&quot;uiTestSample-transited by modal_soul, on Flickr&quot;&gt;
&lt;img src=&quot;http://farm6.staticflickr.com/5196/7233469296_d04794833e.jpg&quot; width=&quot;500&quot; height=&quot;492&quot; alt=&quot;uiTestSample-transited&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-1&quot;&gt;テストの概要&lt;/h2&gt;
&lt;p&gt;このサンプルでは、アプリ起動後の画面のTextViewの内容を確認。ボタン1のクリックをエミュレートし、画面遷移後の画面のTextViewの内容を確認しています。&lt;/p&gt;

&lt;h3 id=&quot;instrumentationtestcase&quot;&gt;InstrumentationTestCase&lt;/h3&gt;
&lt;p&gt;InstrumentationTestCaseを継承したクラスを作成します。
getInstrumentation()を使うことで、現在有効になってるアクティビティを捕捉し、TouchUtilsでユーザ操作をエミュレートします。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;テストの流れ&lt;/h2&gt;

&lt;h3 id=&quot;section-3&quot;&gt;捕捉するインテント情報を設定&lt;/h3&gt;

&lt;script src=&quot;https://gist.github.com/2758292.js?file=getInstrumentation.java&quot;&gt;
&lt;/script&gt;

&lt;h3 id=&quot;instrumentationactivitymonitor&quot;&gt;存在するInstrumentation.ActivityMonitorがヒットするまで待ちます。タイムアウト時間を設定。&lt;/h3&gt;

&lt;script src=&quot;https://gist.github.com/2758303.js?file=getCurrentActivity.java&quot;&gt;
&lt;/script&gt;

&lt;h3 id=&quot;view&quot;&gt;Viewを取得して、初期状態を確認。&lt;/h3&gt;

&lt;script src=&quot;https://gist.github.com/2758332.js?file=getAndCheckView.java&quot;&gt;
&lt;/script&gt;

&lt;h3 id=&quot;section-4&quot;&gt;ボタンのクリックをエミュレート。&lt;/h3&gt;
&lt;script src=&quot;https://gist.github.com/2758337.js?file=emulateButtonClick.java&quot;&gt;
&lt;/script&gt;

&lt;h3 id=&quot;activity&quot;&gt;再度Activityを取得。&lt;/h3&gt;
&lt;script src=&quot;https://gist.github.com/2758348.js?file=getCurrentActivity2.java&quot;&gt;
&lt;/script&gt;

&lt;h3 id=&quot;section-5&quot;&gt;画面遷移後の表示を確認。&lt;/h3&gt;
&lt;script src=&quot;https://gist.github.com/2758351.js?file=getAndCheckView2.java&quot;&gt;
&lt;/script&gt;

&lt;h2 id=&quot;section-6&quot;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;TouchUtilsを使えば、このほかにもドラッグ、スクロール、長押し等色々エミュレートでき、UIスレッドを意識しないで書けるので、アプリのハッピーパスのテストくらいであれば簡単に書けそうです。&lt;/p&gt;

</description>
                <link>http://modalsoul.github.io/test/programing/2012/05/20/android-ui-test-InstrumentationTestCase</link>
                <guid>http://modalsoul.github.io/test/programing/2012/05/20/android-ui-test-InstrumentationTestCase</guid>
                <pubDate>2012-05-20T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>スクラム道 Full Boost 「青物横丁制圧作戦」#scrumdoに参加しました。</title>
                <description>&lt;h4&gt;この記事では、選手として参加させていただいて感じたことと、自分が壇上で発言した質問や意見の補足をメインに書いています。&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;http://www.taoofscrum.org/contents/post/240&quot;&gt;
&lt;img title=&quot;スクラム道 Full Boost 「青物横丁制圧作戦」 | スクラム道&quot; src=&quot;http://capture.heartrails.com/400x300/cool/shorten?http://www.taoofscrum.org/contents/post/240&quot; alt=&quot;http://www.taoofscrum.org/contents/post/240&quot; width=&quot;400&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;イベント自体については、他方々の記事にとてもわかりやすくまとめられていますので、そちらを参考にして頂ければと思います。&lt;/p&gt;

&lt;p&gt;・ &lt;a href=&quot;http://d.hatena.ne.jp/absj31/20120511/1336753150&quot;&gt;スクラム道フルブーストに参加してきた #scrumdo #nawoto_girls - Shinya’s Daily Report&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;・ [スクラム道フルブーストに参加しました。 #scrumdo - k&lt;em&gt;0kamotoの日記](http://d.hatena.ne.jp/k&lt;/em&gt;0kamoto/20120512/1336787718)&lt;/p&gt;

&lt;p&gt;・ &lt;a href=&quot;http://d.hatena.ne.jp/hageyahhoo/20120512/1336817188&quot;&gt;スクラム道フルブーストでひと試合してきました #scrumdo - 炸裂！情熱の右フック！！&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;スクラム道とは？&lt;/h2&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;スクラム道は、スクラムを中心にアジャイルを探究するための場です。
アジャイルは本を読んだだけでは大事な部分は伝わらず、そのため、せっかく現場でスクラムやアジャイルのプラクティスを導入しても上手く成果が出ないという悩みを良く聞きます。
スクラム道では、毎回、参加者と共に一つのテーマを深く掘り下げて探究し、現場の悩みを少しでも解消する事を目的にしています。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;i&gt;スクラム道HPより引用&lt;/i&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;スクラム道へは、2011/12/26に読み手@ryuzeeさんで行われたスクラム道場.08[「Doneの定義　虎の巻」](http://www.taoofscrum.org/contents/post/214)、2012/03/28に読み手@nawotoさんで行われた[「良く書けたインセプションデッキとは？」](http://www.taoofscrum.org/contents/post/220)の2度参加し、
今回のスクラム道 FullBoostが3度目の参加となりました。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-1&quot;&gt;今回のテーマ&lt;/h2&gt;
&lt;p&gt;今回はスクラム道10回記念ということで、過去に行われた5テーマから参加者の投票で再演を行う形式で、@imagireさんによる「プロダクトバックログ」の再演となりました。&lt;/p&gt;

&lt;p&gt;まとめ　その１
&lt;a href=&quot;https://yukar.in/note/ckFnru&quot;&gt;スクラム道 Full Boost 「青物横丁制圧作戦」 壮大な前座 #scrumdo - Yukarin&amp;#8217;Note&lt;/a&gt;&lt;/p&gt;

&lt;div style=&quot;width:425px&quot; id=&quot;__ss_9027962&quot;&gt; 
&lt;strong style=&quot;display:block;margin:12px 0 4px&quot;&gt;
&lt;a href=&quot;http://www.slideshare.net/imagire/07-9027962&quot; title=&quot;スクラム道場.07&quot; target=&quot;_blank&quot;&gt;スクラム道場.07&lt;/a&gt;
&lt;/strong&gt; 
&lt;iframe src=&quot;http://www.slideshare.net/slideshow/embed_code/9027962&quot; width=&quot;425&quot; height=&quot;355&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot;&gt;
&lt;/iframe&gt; 
&lt;div style=&quot;padding:5px 0 12px&quot;&gt; View more 
&lt;a href=&quot;http://www.slideshare.net/&quot; target=&quot;_blank&quot;&gt;presentations&lt;/a&gt;
 from 
&lt;a href=&quot;http://www.slideshare.net/imagire&quot; target=&quot;_blank&quot;&gt;Takashi Imagire&lt;/a&gt; 
&lt;/div&gt; 
&lt;/div&gt;

&lt;p&gt;読み手の@imagireさんによる発表の後、「議論に参加したい」「プロダクトバックログについて悩んでいる」人が選手として登壇。&lt;/p&gt;

&lt;p&gt;選手として登壇した人には、マイクロソフトさんからプランニングポーカーがもらえる！とのことだったので、物欲に駆られて登壇してきました。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;ステマ&lt;/h3&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;ja&quot;&gt;
&lt;p&gt;おぉ！マイクロソフトさんからプランニングポーカーの差し入れだ!! 
&lt;a href=&quot;https://twitter.com/search/%2523scrumdo&quot;&gt;#scrumdo&lt;/a&gt;
&lt;/p&gt;&amp;mdash; imae masatoshiさん (@modal_soul) 
&lt;a href=&quot;https://twitter.com/modal_soul/status/200892170767577088&quot; data-datetime=&quot;2012-05-11T10:16:40+00:00&quot;&gt;5月 11, 2012&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;
&lt;/script&gt;

&lt;p&gt;いただいたポーカーはこちら
外箱がVisualStudioになっているという、さすがマイクロソフトさん！
&lt;img src=&quot;/img/20120511/porker.jpg&quot; alt=&quot;プランニングポーカー&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;round1&quot;&gt;ディスカッションRound1&lt;/h2&gt;
&lt;p&gt;ディスカッションRound1まとめ
&lt;a href=&quot;https://yukar.in/note/ckFnrw&quot;&gt;スクラム道 Full Boost 「青物横丁制圧作戦」Round1 #scrumdo - Yukarin&amp;#8217;Note&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;プロダクトバックログに関して「ストーリーポイントを見積もる際の基準ストーリーが、後々&lt;b&gt;基準として不適格だった場合&lt;/b&gt;どうするか？」と質問させていただきました。&lt;/p&gt;

&lt;p&gt;あの場の発言だけでは説明しきれていいなかった部分も多々あるので、ここではこの質問の件を補足したいと思います。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-3&quot;&gt;前提として&lt;/h3&gt;
&lt;p&gt;1つのプロジェクトが開始されるにあたり、プロダクトバックログ(以下、PBL)が作成されます。&lt;/p&gt;

&lt;p&gt;このPBLの各項目にストーリーポイント(以下、SP)を見積もる際、基準となる項目(以下、基準ストーリー)を選び、その他のPBLの各項目について見積もると思います。
&lt;i&gt;私のチームの場合、ストーリーポイントが２と５に相当しそうな基準ストーリーを選び、見積もりを行っています&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;これ以降、新たにPBLに追加された項目についても同じ基準ストーリーを用いて見積もりを行えば、以前見積もった項目と大きさの比較が可能であると言えます。
&lt;i&gt;例）10kgは1kgの10倍の重さです。なぜなら同じ基準（＝単位、ここでいうkg）を用いているから&lt;/i&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-4&quot;&gt;もしも基準が変わると？&lt;/h3&gt;
&lt;p&gt;基準ストーリーを実際に消化したところ、当初見積もっていたポイントよりもとても大きかったorとても小さかった、とします。&lt;/p&gt;

&lt;p&gt;そうすると、その基準を用いた見積もりの結果の信頼性に疑問が出てきます。&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;b&gt;&lt;i&gt;例えば、SPが２と見積もっていた基準ストーリー「A」が実はSPが10に相当するボリュームで、SPが5と見積もっていた基準ストーリー「B」がSP2のボリュームだった場合&lt;/i&gt;&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ある項目「X」の見積もりを、SP2の基準ストーリー「A」以上SP5の基準ストーリー「B」未満だからSP3と見積もった&lt;/strong&gt;
&lt;strong&gt;ここに基準ストーリーのSPの変化を適用すると、ある項目Xの見積もりは、SP10以上SP2未満となってしまい、この項目Xの見積もりが破綻してしまいます。&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;このような場合、新たに基準を設けて再見積もりを行えば問題は解消されると思います。&lt;/p&gt;

&lt;p&gt;ただそうすると、各スプリントで計測したベロシティは、&lt;strong&gt;基準が異なるので単純な比較が行えなくなります。&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-5&quot;&gt;ベロシティって重要ですか？&lt;/h3&gt;
&lt;p&gt;ベロシティを使う目的は様々あると思いますが、ざっと挙げると以下のような感じでしょうか。&lt;/p&gt;

&lt;h4&gt;・スプリントで消化するSPの見積もり&lt;/h4&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;ja&quot;&gt;
&lt;p&gt;ベロシティはからないと、次のスプリントでどれぐらい積めるか基準値がわからなくなりません？ RT @
&lt;a href=&quot;https://twitter.com/kanu_&quot;&gt;kanu_&lt;/a&gt;
: 別にベロシティで測らなきゃいいんじゃないのかぁ。ってか誰が欲しがってるのかな?　
&lt;a href=&quot;https://twitter.com/search/%2523scrumdo&quot;&gt;#scrumdo&lt;/a&gt;
&lt;/p&gt;&amp;mdash; SEO Naotoshiさん (@sonots) 
&lt;a href=&quot;https://twitter.com/sonots/status/200897671223967745&quot; data-datetime=&quot;2012-05-11T10:38:31+00:00&quot;&gt;5月 11, 2012&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;
&lt;/script&gt;

&lt;h4&gt;・チームの成長度合い&lt;/h4&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;ja&quot;&gt;
&lt;p&gt;&quot;ポイントの基準が更新されると、ベロシティによるチームの成長の測定が難しくなる。&quot; 
&lt;a href=&quot;https://twitter.com/search/%2523scrumdo&quot;&gt;#scrumdo&lt;/a&gt;
&lt;/p&gt;
&amp;mdash; Tomohiro Hashidateさん (@joker1007) 
&lt;a href=&quot;https://twitter.com/joker1007/status/200896307970322432&quot; data-datetime=&quot;2012-05-11T10:33:06+00:00&quot;&gt;5月 11, 2012&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;
&lt;/script&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;ディスカッションでの質問やツイートの反応にもありましたが、決して&amp;lt;h3&amp;gt;ベロシティを人事評価等に使いたい訳ではありません。&amp;lt;/h3&amp;gt;この所は、特に強調しておきたいと思います。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;ja&quot;&gt;
&lt;p&gt;ベロシティは「人事評価に使うべきではない」というのは大前提ではあるが、「自分達がどれくらい成長したの？」というのを測るための指標として「数値がぶれる」のはマズイのでは？ 
&lt;a href=&quot;https://twitter.com/search/%2523scrumdo&quot;&gt;#scrumdo&lt;/a&gt;
&lt;/p&gt;
&amp;mdash; skowataさん (@skowata) 
&lt;a href=&quot;https://twitter.com/skowata/status/200898092667637760&quot; data-datetime=&quot;2012-05-11T10:40:12+00:00&quot;&gt;5月 11, 2012&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;
&lt;/script&gt;

&lt;h4&gt;ただ、現実問題としてアジャイルなプロセスを取り入れたことによる効果を、実際にプラクティスを実行する人以外に説明することを考えたときどうでしょう？&lt;/h4&gt;

&lt;p&gt;「アジャイルなプロセスを用いることで、どの程度生産性が向上した」、であるとか&amp;lt;h4&amp;gt;プラクティスの有用性を理解してもらえなければ、
今後アジャイルなプロセスを継続することが出来なくなってしまうかもしれません。&amp;lt;/h4&amp;gt;&lt;/p&gt;

&lt;p&gt;「価値判断で計測すればいい」という意見は正しいと思いますが、&lt;strong&gt;スプリント毎のROIを正しく計測するのは（そうできることが理想であり、その努力を惜しむべきではありませんが）難易度が高く早い段階での導入は難しいと思います。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;実際にプラクティスを実行する人以外も、アジャイルなプロセスについて本質的な理解をすれば、ベロシティによる説得を行わなくても有用性を理解してもらえるかもしれませんが、
これもかなりハードルが高いと思います。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-6&quot;&gt;この質問で知りたかったこと&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;PBL見積もりの基準が同じであれば、ベロシティの増減がチームの生産性を表す指標として機能するのではないか？&lt;/strong&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ベロシティの向上によってアジャイルなプロセスの有用性の説明の裏づけになるのではいか？&lt;/strong&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;基準が変化することで、ベロシティが（見かけ上）減少しているような場合、生産性の低下を指摘された時どのように説明することで、見かけ上の誤解を解くことができるか？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ということです。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;ja&quot;&gt;&lt;p&gt;今の話（ストーリーポイントと実際のタスクの相関）は「通貨（経済の話）」に似てる by @
&lt;a href=&quot;https://twitter.com/kawaguti&quot;&gt;kawaguti&lt;/a&gt; 
&lt;a href=&quot;https://twitter.com/search/%2523scrumdo&quot;&gt;#scrumdo&lt;/a&gt;&lt;/p&gt;&amp;mdash; skowataさん (@skowata) 
&lt;a href=&quot;https://twitter.com/skowata/status/200895587384692738&quot; data-datetime=&quot;2012-05-11T10:30:15+00:00&quot;&gt;5月 11, 2012&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;
&lt;/script&gt;

&lt;p&gt;この質問に対するコメントのなかで、@kawagutiさんの通貨のたとえが、とても腹落ちしました。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;round2&quot;&gt;ディスカッションRound2&lt;/h2&gt;
&lt;p&gt;ディスカッションRound2まとめ
&lt;a href=&quot;https://yukar.in/note/ckFnrB&quot;&gt;スクラム道 Full Boost 「青物横丁制圧作戦」Round2 #scrumdo - Yukarin&amp;#8217;Note&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;1Rだけのつもりだったのですが、もたもたして残留してしまい、居残り組みとして2Rも選手として参戦と相成りました。&lt;/p&gt;

&lt;p&gt;折角の機会なので、壇上から見た景色を写メってみました。
&lt;img src=&quot;/img/20120511/audience.jpg&quot; alt=&quot;壇上から見た景色&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;po&quot;&gt;POの価値判断にチームが納得できない場合&lt;/h3&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;ja&quot;&gt;
&lt;p&gt;POが初心者の場合、「これってホントに正しい優先順位なの？」という場合がある。その場合チームとしてどうするべき？ 
&lt;a href=&quot;https://twitter.com/search/%2523scrumdo&quot;&gt;#scrumdo&lt;/a&gt;
&lt;/p&gt;
&amp;mdash; skowataさん (@skowata) 
&lt;a href=&quot;https://twitter.com/skowata/status/200910101131964417&quot; data-datetime=&quot;2012-05-11T11:27:55+00:00&quot;&gt;5月 11, 2012&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;
&lt;/script&gt;

&lt;p&gt;POがPBLの各項目について優先順位付けした結果が必ずしもチームの意見と合致ばかりではないですね。&lt;/p&gt;

&lt;p&gt;この話に対して私は「ビジネスとしての優先順位付けはPOの責任であり、チームが剥奪すべきではない」「チームが納得できないのであれば、その根拠をPOに説明必要はあるが、チームが優先順位決定するべきではない」とコメントしました。
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;これをもう少し補足すると、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;PBLの優先順位付け(≒事業判断)は、スクラムではPOというロールの責任(＝権限)。&lt;/li&gt;
&lt;li&gt;POが決定した優先順位付けをチームが覆すことは、POから責任(＝権限)を剥奪することになる。&lt;/li&gt;
&lt;li&gt;POから責任(＝権限)を剥奪することは、スクラムでのロールが破綻しているのでは。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ということです。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;ja&quot;&gt;
&lt;p&gt;
&lt;a href=&quot;https://twitter.com/search/%2523scrumdo&quot;&gt;#scrumdo&lt;/a&gt;
 「POに責任がある」といって自分達の自主性を殺すのも危険なかおりじゃまいか&lt;/p&gt;&amp;mdash; atsumi shibataさん (@JibrielShibata) 
&lt;a href=&quot;https://twitter.com/JibrielShibata/status/200910702075064321&quot; data-datetime=&quot;2012-05-11T11:30:18+00:00&quot;&gt;5月 11, 2012&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;
&lt;/script&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;責任(＝権限)はPOにあるから、チームは一切口出ししないと言いたい訳ではなく、あくまで&lt;strong&gt;「判断、決定」するのはPO&lt;/strong&gt;であって、その判断のプロセスをチームが手伝うのアリはだという話でした。
ロールに拘らず、助け合うのがスクラムチームの有るべき姿だと思っています。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-7&quot;&gt;最後に&lt;/h2&gt;
&lt;p&gt;今回この様な有意義なイベントに参加させていただき、スクラム道スタッフの皆様、選手・参加者の皆様、バンダイナムコ様、マイクロソフト様、ありがとうございました。&lt;/p&gt;

&lt;p&gt;今回は、@imagireさんの再演となりましたが、&lt;strong&gt;他方々の再演も是非是非お願いしたいところです！&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/20120511/gundum.jpg&quot; alt=&quot;エントランスの白いアイツと記念写真&quot; /&gt;&lt;/p&gt;
</description>
                <link>http://modalsoul.github.io/report/2012/05/11/scrumdo-full-boost</link>
                <guid>http://modalsoul.github.io/report/2012/05/11/scrumdo-full-boost</guid>
                <pubDate>2012-05-11T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>Androidプログラミング入門してみた-アクティビティ編-</title>
                <description>&lt;p&gt;&lt;a href=&quot;/Programing/2012/04/02/start-android-application-architecture&quot;&gt;前回&lt;/a&gt;のつづきです。&lt;/p&gt;

&lt;p&gt;今回も主に書籍（ &lt;a href=&quot;http://www.amazon.co.jp/gp/product/4844331272/ref=as_li_ss_il?ie=UTF8&amp;amp;tag=modalsoul-22&amp;amp;linkCode=as2&amp;amp;camp=247&amp;amp;creative=7399&amp;amp;creativeASIN=4844331272&quot;&gt;本格アプリを作ろう！ Androidプログラミングレシピ&lt;/a&gt;）を参考にして進めます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/gp/product/4844331272/ref=as_li_ss_il?ie=UTF8&amp;amp;tag=modalsoul-22&amp;amp;linkCode=as2&amp;amp;camp=247&amp;amp;creative=7399&amp;amp;creativeASIN=4844331272&quot;&gt;
&lt;img border=&quot;0&quot; src=&quot;http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&amp;amp;Format=_SL160_&amp;amp;ASIN=4844331272&amp;amp;MarketPlace=JP&amp;amp;ID=AsinImage&amp;amp;WS=1&amp;amp;tag=modalsoul-22&amp;amp;ServiceVersion=20070822&quot; /&gt;
&lt;/a&gt;
&lt;img src=&quot;http://www.assoc-amazon.jp/e/ir?t=modalsoul-22&amp;amp;l=as2&amp;amp;o=9&amp;amp;a=4844331272&quot; width=&quot;1&quot; height=&quot;1&quot; border=&quot;0&quot; alt=&quot;&quot; style=&quot;border:none !important; margin:0px !important;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;アクティビティについて&lt;/h2&gt;
&lt;p&gt;アクティビティは、&lt;b&gt;android.appp.Activity&lt;/b&gt;クラスのサブクラスによって記述される。
&lt;b&gt;Activity&lt;/b&gt;のサブクラスでは、アクティビティが存続する間Androidが呼び出す、&lt;b&gt;ライフサイクルコールバックメソッド&lt;/b&gt;をオーバーライドします。&lt;/p&gt;

&lt;h4 id=&quot;section-1&quot;&gt;７つのライフサイクルコールバックメソッド&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;onCreate(Bundle)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最初にアクティビティが作成されたときに呼び出されるメソッド。このメソッドは、アクティビティのユーザインタフェースを作り、その他のグローバルな初期化（バックグラウンドスレッドの作成など）を必要に応じて実行する。&lt;b&gt;onCreate(Bundle)&lt;/b&gt;が呼び出された後に、&lt;b&gt;onStart()&lt;/b&gt;が呼び出される。このアクティビティの前の状態が保存されていたら、&lt;b&gt;onCreate()&lt;/b&gt;に&lt;b&gt;android.os.Bundle&lt;/b&gt;が渡される。（無ければnull参照が渡される）&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;onStart()&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;アクティビティをユーザに見せる直前に呼び出される。&lt;b&gt;onStart()&lt;/b&gt;を呼び出した後、アクティビティがフォアグラウンドに出たときに&lt;b&gt;onResume()&lt;/b&gt;を呼び出し、アクティビティが隠されるときに&lt;b&gt;onStop()&lt;/b&gt;を呼び出す。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;onRestart()&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;停止されていたアクティビティが再スタートされる直前に呼び出される。名前の通り。&lt;b&gt;onRestart()&lt;/b&gt;の後に&lt;b&gt;onStart()&lt;/b&gt;が呼び出される。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;onResume()&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;アクティビティがユーザと対話処理を始める直前に呼び出される。このアクティビティがフォーカスを得て、ユーザの入力を受けつける。&lt;b&gt;onResume()&lt;/b&gt;の呼び出し後に、そのアクティビティを中断する必要がある場合のみ&lt;b&gt;onPause()&lt;/b&gt;を呼び出す。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;onPause()&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;別のアクティビティを再開しようとするときに呼び出される。このメソッドがリターンするまで次のアクティビティが再開されないことに注意。&lt;b&gt;onPause()&lt;/b&gt;を呼び出した後、ユーザがそのアクティビティとの対話処理を再開したら&lt;b&gt;onResume()&lt;/b&gt;を呼び出し、アクティビティがユーザから見えなくなったら&lt;b&gt;onStop()&lt;/b&gt;を呼び出す。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;onStop()&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;アクティビティがユーザから見えなくなったときに呼び出される。アクティビティが破棄されたか、他のアクティビティが再開されて隠されたかのどちらかの理由で発生する。&lt;b&gt;onStop()&lt;/b&gt;を呼び出した後、再びユーザとの対話処理に戻る場合は&lt;b&gt;onRestart()&lt;/b&gt;を呼び出し、破棄される場合は&lt;b&gt;onDestroy()&lt;/b&gt;が呼び出される。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;onDestroy()&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;アクティビティが破棄される前に呼び出される。ただし、メモリ不足により強制終了される場合は例外で、&lt;b&gt;onDestroy()&lt;/b&gt;は呼び出されない。&lt;/p&gt;

&lt;p&gt;これらの７つのメソッドによって、アクティビティのライフサイクル全体が定義され、３つのネストしたループが記述される。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;３つのネストしたループ&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;ライフタイム全体&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最初にメソッド&lt;b&gt;onCreate(Bundle)&lt;/b&gt;が呼び出されたときから、&lt;b&gt;onDestroy()&lt;/b&gt;が呼び出されるまでの全ての期間。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;可視ライフタイム&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;メソッド&lt;b&gt;onStart()&lt;/b&gt;の呼び出しから、それに対応する&lt;b&gt;onStop()&lt;/b&gt;の呼び出しまでの期間。この間、ユーザはアクティビティを画面で見られるが、アクティビティがフォアグラウンドで対話処理をしているとは限らない。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;フォアグラウンドタイム&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;メソッド&lt;b&gt;onResume()&lt;/b&gt;の呼び出しから、それに対応する&lt;b&gt;onPause()&lt;/b&gt;の呼び出しまでの期間。この間、他の全てのアクティビティより手前にあり、ユーザとの対話処理を行っている。&lt;/p&gt;

&lt;p&gt;上記のライフサイクルを図にしたものがこれ&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://codezine.jp/static/images/article/4657/01.gif&quot; alt=&quot;アクティビティのライフサイクル&quot; /&gt;&lt;/p&gt;

&lt;p&gt;これを見てわかるように、&lt;b&gt;onDestroy()&lt;/b&gt;は呼び出されない場合があるので、データ保存の処理を書いてもあてにはならない。&lt;b&gt;onPause()&lt;/b&gt;の中でコミットするのが一般的。&lt;b&gt;onDestroy()&lt;/b&gt;の実装では、アクティビティに割り当てられていたリソースの解放をするのが一般的。&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;タスク、アクティビティスタック&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;タスク&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;相関するアクティビティのシーケンスのこと。アクティビティスタックを提供する。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;アクティビティスタック&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;相関するアクティビティのシーケンスを記録する。「ヒストリースタック」「バックスタック」とも呼ばれる。&lt;/p&gt;

&lt;p&gt;このスタックに最初にプッシュされるアクティビティは、タスクを開始したアクティビティであり、&lt;b&gt;ルートアクティビティ&lt;/b&gt;と呼ぶ。実行中のアクティビティは、スタックの一番上に位置する。&lt;/p&gt;

&lt;p&gt;実行中のアクティビティが別のアクティビティを起動すると、新しいアクティビティがスタックにプッシュされてフォーカスを得る。前のアクティビティがスタックに残り、停止状態になる。
ユーザが端末のバックボタンを押すと、現在のアクティビティがポップされて、その前のアクティビティが実行中になる。ポップされたアクティビティは破棄される。このときアクティビティが停止したときのユーザインターフェースの状態がレストアされる。&lt;/p&gt;

&lt;p&gt;スタック内のアクティビティの順序は変わることがなく、プッシュもしくはポップされるだけ。アクティビティがスタックにプッシュされるのは、現在のアクティビティによって起動された場合のみ。スタックからポップされるのはバックボタンが押され、アクティビティの使用が終わったとき。&lt;/p&gt;

</description>
                <link>http://modalsoul.github.io/programing/2012/04/04/start-android-application-activitie</link>
                <guid>http://modalsoul.github.io/programing/2012/04/04/start-android-application-activitie</guid>
                <pubDate>2012-04-04T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>Androidプログラミング入門してみた-アーキテクチャ編-</title>
                <description>&lt;p&gt;仕事でAndroidアプリの開発をすることになったので、改めてAndroidプログラミングについて勉強してみたいと思います。&lt;/p&gt;

&lt;p&gt;今回は主に書籍（ &lt;a href=&quot;http://www.amazon.co.jp/gp/product/4844331272/ref=as_li_ss_il?ie=UTF8&amp;amp;tag=modalsoul-22&amp;amp;linkCode=as2&amp;amp;camp=247&amp;amp;creative=7399&amp;amp;creativeASIN=4844331272&quot;&gt;本格アプリを作ろう！ Androidプログラミングレシピ&lt;/a&gt;）を参考にして進めました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/gp/product/4844331272/ref=as_li_ss_il?ie=UTF8&amp;amp;tag=modalsoul-22&amp;amp;linkCode=as2&amp;amp;camp=247&amp;amp;creative=7399&amp;amp;creativeASIN=4844331272&quot;&gt;
&lt;img border=&quot;0&quot; src=&quot;http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&amp;amp;Format=_SL160_&amp;amp;ASIN=4844331272&amp;amp;MarketPlace=JP&amp;amp;ID=AsinImage&amp;amp;WS=1&amp;amp;tag=modalsoul-22&amp;amp;ServiceVersion=20070822&quot; /&gt;
&lt;/a&gt;
&lt;img src=&quot;http://www.assoc-amazon.jp/e/ir?t=modalsoul-22&amp;amp;l=as2&amp;amp;o=9&amp;amp;a=4844331272&quot; width=&quot;1&quot; height=&quot;1&quot; border=&quot;0&quot; alt=&quot;&quot; style=&quot;border:none !important; margin:0px !important;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;アプリケーションアーキテクチャについて&lt;/h2&gt;
&lt;p&gt;Androidアプリのアーキテクチャは、「intent(以下、インテント)」を用いて相互にコミュニケーションを行うコンポーネントの集合がベースになっているそうです。
インテントとは、実行すべき処理や外部イベントが発生したことを他のコンポーネントに通知するために使われるメッセージです。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;コンポーネント&lt;/h3&gt;
&lt;p&gt;ついさっきあったように、コンポーネントはAndroidアプリを構成する要素です。
Androidアプリのエントリポイントは、C言語のmain()関数のように定まったものはなく、代わりにアプリが必要に応じてインスタンス化して実行できるコンポーネントを使用することになります。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;アクティビティ&lt;/h3&gt;
&lt;p&gt;コンポーネントの１種類。
ユーザがアプリと対話処理できるようにUIが提供するコンポーネント。自分の理解ではViewを持っているコンポーネント。&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;サービス&lt;/h3&gt;
&lt;p&gt;コンポーネントの１種類。
バックグラウンドで実行されて、アクティビティの様にViewは持たない。UIが表示されていないとき何がしかの処理を行うために用いる。そのためにスレッドを生成したり、別プロセスで実行されたりする。&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;ブロードキャストレシーバ&lt;/h3&gt;
&lt;p&gt;コンポーネントの１種類。
同報通信(broadcast)を受信して、それに対する処理を行う。名前の通り。Viewは持たないが、アクティビティの起動したり通知マネージャで画面へ情報を表示する。&lt;/p&gt;

&lt;h3 id=&quot;section-5&quot;&gt;コンテンツプロバイダ&lt;/h3&gt;
&lt;p&gt;コンポーネントの１種類。
アプリが管理するデータを、他のアプリからも使えるようにする。データはAndroidファイルシステムでもSQLiteでも、何でもOK。データプロバイダを使うことで、データのフォーマット変更による影響をコンポーネントが受けないように出来る。&lt;/p&gt;

&lt;h3 id=&quot;section-6&quot;&gt;インテント&lt;/h3&gt;
&lt;p&gt;コンポーネント間のメッセージ。
インテントは明示的、暗黙的の２種類に分類される。&lt;/p&gt;

&lt;h4 id=&quot;section-7&quot;&gt;明示的インテント&lt;/h4&gt;
&lt;p&gt;ターゲットとなるコンポーネント名を指定&lt;strong&gt;した&lt;/strong&gt;インテント。アプリの内部メッセージとして使われる。&lt;/p&gt;

&lt;h4 id=&quot;section-8&quot;&gt;暗黙的インテント&lt;/h4&gt;
&lt;p&gt;ターゲットとなるコンポーネント名を指定&lt;strong&gt;しない&lt;/strong&gt;インテント。他のアプリのコンポーネントを起動するために用いられることが多い。
暗黙的インテントの処理に最適なコンポーネントを探す処理の際、AndroidはIntentオブジェクトの内容とインテントフィルタを比較する。&lt;/p&gt;

&lt;h4 id=&quot;section-9&quot;&gt;インテントフィルタ&lt;/h4&gt;
&lt;p&gt;コンポーネントがどんなインテントを受け取ることができるか？を明示するためのマニフェスト情報。
インテントフィルタを持たないコンポーネントは、明示的インテントしか受け取らない。&lt;/p&gt;

&lt;h3 id=&quot;section-10&quot;&gt;マニフェスト&lt;/h3&gt;
&lt;p&gt;アプリの持つ情報やアプリケーション間の相互連携に必要な設定、コンポーネント、インテントフィルター情報を含む。
アプリをインストールするときに確認されるようなパーミッション付与についても情報を持っている。&lt;/p&gt;

&lt;p&gt;この辺がわかりやすいサイトがあったので参考にしました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.7roid.com/basics/kiso_02_11&quot;&gt;http://www.7roid.com/basics/kiso&lt;em&gt;02&lt;/em&gt;11&lt;/a&gt;&lt;/p&gt;

</description>
                <link>http://modalsoul.github.io/programing/2012/04/02/start-android-application-architecture</link>
                <guid>http://modalsoul.github.io/programing/2012/04/02/start-android-application-architecture</guid>
                <pubDate>2012-04-02T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>Agile Samurai Dojo Gathering(#agilesamurai)でろくろ回しました。</title>
                <description>&lt;p&gt;&lt;img src=&quot;http://capture.heartrails.com/400x200/cool/shorten?http://agile-samurai-ja.github.com/dojo-gathering/2012/index.html&quot; alt=&quot;Agile Samurai Dojo Gathering&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;agile-samurai-dojo-gathering&quot;&gt;「Agile Samurai Dojo Gathering」とは？&lt;/h2&gt;

&lt;p&gt;以下公式サイトより抜粋&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;アジャイルサムライ他流試合から半年、原著者を迎えて他流試合はAgile Samurai Dojo Gatheringと名前を改め、ふたたびの道場大集合となるイベントを開催します。
今、日本で一番熱心にアジャイルについて語っている人達の経験に触れ、それを自分の言葉で議論する事でアジャイルサムライへの新たな一歩を!!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Agile Samurai Dojo Gathering全体の内容については、他方々の良質なまとめ記事があるので
そちらにお任せしたいと思います。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;なぜ私はろくろを回したのか？&lt;/h2&gt;
&lt;p&gt;前回開催されたアジャイルサムライ他流試合では道場紹介ＬＴをさせていただき、今回は実践トラックのスピーカーをさせていただきました。&lt;/p&gt;

&lt;p&gt;前回の他流試合では、私はスクラム開発チームに入って3ヶ月少々の新米で、
他流試合で出会った多くの方々から学ぶことはあれど、還元することはできませんでした。&lt;/p&gt;

&lt;p&gt;他流試合以降、スクラムやアジャイルなプラクティスについての学びを継続し、自身の現場で実践してきました。&lt;/p&gt;

&lt;p&gt;そして、今回のAgile Samurai Dojo Gatheringが開催されることを知り、
多少なり自身の経験が還元できるのではないかと思い、実践トラックへの登壇をさせていただきました。&lt;/p&gt;

&lt;p&gt;以下に発表資料を掲載しています。&lt;/p&gt;

&lt;div style=&quot;width:425px&quot; id=&quot;__ss_12147199&quot;&gt; 
&lt;strong style=&quot;display:block;margin:12px 0 4px&quot;&gt;
&lt;a href=&quot;http://www.slideshare.net/modalsoul/agile-samuraidojogathering&quot; title=&quot;Agile samuraidojogathering&quot; target=&quot;_blank&quot;&gt;Agile samuraidojogathering&lt;/a&gt;
&lt;/strong&gt; 
&lt;iframe src=&quot;http://www.slideshare.net/slideshow/embed_code/12147199&quot; width=&quot;425&quot; height=&quot;355&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot;&gt;
&lt;/iframe&gt; 
&lt;div style=&quot;padding:5px 0 12px&quot;&gt; View more 
&lt;a href=&quot;http://www.slideshare.net/&quot; target=&quot;_blank&quot;&gt;presentations&lt;/a&gt;
 from 
&lt;a href=&quot;http://www.slideshare.net/modalsoul&quot; target=&quot;_blank&quot;&gt;Imae Masatoshi&lt;/a&gt; 
&lt;/div&gt; 
&lt;/div&gt;

&lt;p&gt;発表時のツイートまとめはこちら
&lt;a href=&quot;https://yukar.in/note/ckFofk&quot;&gt;Agile Samurai Dojo Gathering サムライ戦記 実践トラック(@modal_soul)  - Yukarin&amp;#8217;Note(ゆかりんのーと)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;今回お話させていただいた内容は、Developmentではなくどちらかと言うとDirectionの内容であり、スクラムといいつつあまりスクラムっぽくない話になってしまいました。
（開発関係の話を期待されていた方には本当に申し訳ないです。。）&lt;/p&gt;

&lt;p&gt;ただ、私がこの発表を通して言いたかったことは&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;”顧客に価値を届ける”ことを考えたとき、”役割”がかえって邪魔になることがある&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;ということです。&lt;/p&gt;

&lt;p&gt;人が行動を起こすとき&amp;#8221;専門家&amp;#8221;としての誇りを持つことは大変重要なことですが、”専門家”としての自覚があるがゆえに、行動を制限することもあります。&lt;/p&gt;

&lt;p&gt;例えば、「私は開発チームだから、○○はやらない」といった具合です。&lt;/p&gt;

&lt;p&gt;アジャイルな組織にとって&amp;#8221;自己組織化&amp;#8221;が必須であるのに対し、これでは真逆の結果になってしまします。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Wouldn&amp;#8217;t it be nice if the whole world got along Even on a small scale change is possible
（世界の流れを止めなくたって小さな変化は起こせるはず）&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;大切なのは、スキルセットではなくマインドセット。&lt;/p&gt;

&lt;p&gt;そんな意味をこめて、最後に&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Agile is attitude, not practice.
(アジャイルはプラクティスをつぎはぎすることじゃない、態度が重要なんだ)&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;とさせていただきました。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;さらに、&lt;/h2&gt;
&lt;p&gt;同じ実践トラックの次のスピーカーは、同じアジャイルサムライBIGLOBE道場の上田さんでした。&lt;/p&gt;

&lt;p&gt;上田さんの発表では、インセプションデッキに取り組んだ際の内容が紹介され、とても良い発表でした。併せてどうぞ&lt;/p&gt;

&lt;div style=&quot;width:425px&quot; id=&quot;__ss_12136492&quot;&gt; &lt;strong style=&quot;display:block;margin:12px 0 4px&quot;&gt;
&lt;a href=&quot;http://www.slideshare.net/uedayo/cantbeatinceptiondeck&quot; title=&quot;cantbeatinceptiondeck&quot; target=&quot;_blank&quot;&gt;cantbeatinceptiondeck&lt;/a&gt;
&lt;/strong&gt; 
&lt;iframe src=&quot;http://www.slideshare.net/slideshow/embed_code/12136492&quot; width=&quot;425&quot; height=&quot;355&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot;&gt;
&lt;/iframe&gt; 
&lt;div style=&quot;padding:5px 0 12px&quot;&gt; View more 
&lt;a href=&quot;http://www.slideshare.net/&quot; target=&quot;_blank&quot;&gt;presentations&lt;/a&gt; from 
&lt;a href=&quot;http://www.slideshare.net/uedayo&quot; target=&quot;_blank&quot;&gt;Yoshinori Ueda
&lt;/a&gt; 
&lt;/div&gt; 
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://yukar.in/note/ckFof8&quot;&gt;Agile Samurai Dojo Gathering インセプションデッキが倒せない - Yukarin&amp;#8217;Note(ゆかりんのーと)&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;最後に、&lt;/h2&gt;
&lt;p&gt;どなたか私がろくろを回している写真お持ちではないでしょうか？
お持ちの方は、是非 @modal_soul までメンションいただければと思います。&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;追記&lt;/h2&gt;
&lt;p&gt;＠joker1007 さんに”ろくろ”写真いただきました！感謝！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://a.yfrog.com/img859/9978/34kba.jpg&quot; alt=&quot;ろくろ&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/gp/product/4274068560/ref=as_li_ss_il?ie=UTF8&amp;amp;tag=modalsoul-22&amp;amp;linkCode=as2&amp;amp;camp=247&amp;amp;creative=7399&amp;amp;creativeASIN=4274068560&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&amp;amp;Format=_SL110_&amp;amp;ASIN=4274068560&amp;amp;MarketPlace=JP&amp;amp;ID=AsinImage&amp;amp;WS=1&amp;amp;tag=modalsoul-22&amp;amp;ServiceVersion=20070822&quot; /&gt;
&lt;/a&gt;
&lt;img src=&quot;http://www.assoc-amazon.jp/e/ir?t=modalsoul-22&amp;amp;l=as2&amp;amp;o=9&amp;amp;a=4274068560&quot; width=&quot;1&quot; height=&quot;1&quot; border=&quot;0&quot; alt=&quot;&quot; style=&quot;border:none !important; margin:0px !important;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/gp/product/B004IEAZ18/ref=as_li_ss_il?ie=UTF8&amp;amp;tag=modalsoul-22&amp;amp;linkCode=as2&amp;amp;camp=247&amp;amp;creative=7399&amp;amp;creativeASIN=B004IEAZ18&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&amp;amp;Format=_SL110_&amp;amp;ASIN=B004IEAZ18&amp;amp;MarketPlace=JP&amp;amp;ID=AsinImage&amp;amp;WS=1&amp;amp;tag=modalsoul-22&amp;amp;ServiceVersion=20070822&quot; /&gt;
&lt;/a&gt;
&lt;img src=&quot;http://www.assoc-amazon.jp/e/ir?t=modalsoul-22&amp;amp;l=as2&amp;amp;o=9&amp;amp;a=B004IEAZ18&quot; width=&quot;1&quot; height=&quot;1&quot; border=&quot;0&quot; alt=&quot;&quot; style=&quot;border:none !important; margin:0px !important;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/gp/product/B0058EWGK0/ref=as_li_ss_il?ie=UTF8&amp;amp;tag=modalsoul-22&amp;amp;linkCode=as2&amp;amp;camp=247&amp;amp;creative=7399&amp;amp;creativeASIN=B0058EWGK0&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&amp;amp;Format=_SL110_&amp;amp;ASIN=B0058EWGK0&amp;amp;MarketPlace=JP&amp;amp;ID=AsinImage&amp;amp;WS=1&amp;amp;tag=modalsoul-22&amp;amp;ServiceVersion=20070822&quot; /&gt;
&lt;/a&gt;
&lt;img src=&quot;http://www.assoc-amazon.jp/e/ir?t=modalsoul-22&amp;amp;l=as2&amp;amp;o=9&amp;amp;a=B0058EWGK0&quot; width=&quot;1&quot; height=&quot;1&quot; border=&quot;0&quot; alt=&quot;&quot; style=&quot;border:none !important; margin:0px !important;&quot; /&gt;&lt;/p&gt;
</description>
                <link>http://modalsoul.github.io/report/2012/03/24/Agile-Samurai-Dojo-Gathering</link>
                <guid>http://modalsoul.github.io/report/2012/03/24/Agile-Samurai-Dojo-Gathering</guid>
                <pubDate>2012-03-24T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>AgileUX NYC 2012 Redux in Tokyo(#AgileUXNYC_ja)に参加しました。</title>
                <description>&lt;div style=&quot;width:425px&quot; id=&quot;__ss_12005232&quot;&gt; 
&lt;strong style=&quot;display:block;margin:12px 0 4px&quot;&gt;
&lt;a href=&quot;http://www.slideshare.net/kazumichisakata/agile-ux-nyc-2012-redux-in-tokyo&quot; title=&quot;Agile UX NYC 2012 Redux in Tokyo (#AgileUXNYC_ja)&quot; target=&quot;_blank&quot;&gt;Agile UX NYC 2012 Redux in Tokyo (#AgileUXNYC_ja)
&lt;/a&gt;
&lt;/strong&gt; 
&lt;iframe src=&quot;http://www.slideshare.net/slideshow/embed_code/12005232&quot; width=&quot;425&quot; height=&quot;355&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot;&gt;
&lt;/iframe&gt; 
&lt;div style=&quot;padding:5px 0 12px&quot;&gt; View more 
&lt;a href=&quot;http://www.slideshare.net/&quot; target=&quot;_blank&quot;&gt;presentations&lt;/a&gt; from 
&lt;a href=&quot;http://www.slideshare.net/kazumichisakata&quot; target=&quot;_blank&quot;&gt;Kazumichi Sakata&lt;/a&gt; 
&lt;/div&gt; 
&lt;/div&gt;

&lt;h2 id=&quot;agileux-nyc-2012-redux-in-tokyo&quot;&gt;「AgileUX NYC 2012 Redux in Tokyo」とは？&lt;/h2&gt;
&lt;p&gt;2012/02/25に、アメリカのニューヨークで開催された「AgileUX NYC 2012」へ参加された＠kawaguti さん(アギレルゴ・コンサルティング株式会社　川口恭伸さん)と＠sprmari0 さん(楽天株式会社　坂田一倫さん)による報告会を兼ねたパネル・ディスカッションです。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;ja&quot;&gt;
&lt;p&gt;Want to Win with Agile? Pivot Your Culture First by Eric Burd( 
&lt;a href=&quot;https://twitter.com/search/%2523agileuxnyc&quot;&gt;#agileuxnyc&lt;/a&gt;
 live at &lt;a href=&quot;http://t.co/2FcXmNnQ&quot; title=&quot;http://ustre.am/I3ND/1&quot;&gt;ustre.am/I3ND/1&lt;/a&gt; ) &lt;/p&gt;
 &amp;mdash; Yasunobu Kawaguchiさん (＠kawaguti) 
 &lt;a href=&quot;https://twitter.com/kawaguti/status/173412876877447169&quot; data-datetime=&quot;2012-02-25T14:23:46+00:00&quot;&gt;2月 25, 2012&lt;/a&gt;
 &lt;/blockquote&gt;
&lt;script src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;
&lt;/script&gt;

&lt;p&gt;私はAgileUX NYC当日の＠kawaguti さんのツイートを見ていて、AgileUX NYCの内容に興味を持ち、ATNDでこのイベントを発見して、すぐに参加登録しました。&lt;/p&gt;

&lt;p&gt;AgileUX NYCについての＠kawaguti さんと＠sprmari0 さんのツイートに、一部意訳を交えたものを&lt;a href=&quot;https://yukar.in/note/ckFoVh&quot;&gt;こちら&lt;/a&gt;にまとめています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://yukar.in/note/ckFoVh&quot;&gt;AgileUX NYC 2012 #agileuxnyc ほぼ＠kawaguti さんつぶやきまとめ   Yukarin’Note&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;agileux-nyc-&quot;&gt;AgileUX NYC ハイライト&lt;/h2&gt;
&lt;p&gt;最初の30分は、実際にAgileUX NYC 2012へ参加された@kawaguti さんと@sprmari0 さんが、AgileUXの各セッションの紹介や感想について話されました。&lt;/p&gt;

&lt;h3 id=&quot;agileux-nyc-2012&quot;&gt;AgileUX NYC 2012について&lt;/h3&gt;
&lt;p&gt;AgileUX NYCは、今年からはじまったAgileUXにテーマを絞ったイベントだそうです。
参加された方も、アメリカ特にニューヨークを中心とした東海岸から来られた方が多かったそうです。@kawaguti さん曰く「デザインだけで食っていける」ほどニューヨークは、UXへの関心が高くお国柄?らしく、デザイナーの需要が高く、そういった背景からAgileUXが開催されたようです。&lt;/p&gt;

&lt;p&gt;AgileUXは、1セッション20分×3セッション、その間にコーヒーブレイクやランチを挟んで、朝8時から夕方5時までぶっ通しの、非常にタフなイベントだったそうです。&lt;/p&gt;

&lt;p&gt;登壇された方も興味深いポジションの方が多く、UX デザイナーがいれば、経営者やデベロッパー、そしてデザイナーからマーケティング PR の担当者の方々でした。Early Stage Specialistなんていう、スーパーマンのような方もいらっしゃったようです。&lt;/p&gt;

&lt;h3 id=&quot;want-to-win-with-agile-pivot-your-culture-firsthttpagileuxnyccompresentationwant-to-win-with-agile-pivot-your-culture-first&quot;&gt;&lt;a href=&quot;http://agileuxnyc.com/presentation/want-to-win-with-agile-pivot-your-culture-first/&quot;&gt;Want to Win with Agile? Pivot Your Culture First&lt;/a&gt;&lt;/h3&gt;

&lt;div style=&quot;width:425px&quot; id=&quot;__ss_11761297&quot;&gt; 
&lt;strong style=&quot;display:block;margin:12px 0 4px&quot;&gt;
&lt;a href=&quot;http://www.slideshare.net/eburd/want-to-win-with-agile&quot; title=&quot;Want to win with agile?&quot; target=&quot;_blank&quot;&gt;Want to win with agile?
&lt;/a&gt;
&lt;/strong&gt; 
&lt;iframe src=&quot;http://www.slideshare.net/slideshow/embed_code/11761297&quot; width=&quot;425&quot; height=&quot;355&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot;&gt;
&lt;/iframe&gt;
&lt;div style=&quot;padding:5px 0 12px&quot;&gt; View more 
&lt;a href=&quot;http://www.slideshare.net/thecroaker/death-by-powerpoint&quot; target=&quot;_blank&quot;&gt;PowerPoint
&lt;/a&gt; from 
&lt;a href=&quot;http://www.slideshare.net/eburd&quot; target=&quot;_blank&quot;&gt;eburd
&lt;/a&gt; 
&lt;/div&gt; 
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;http://www.theladders.com/&quot;&gt;The Ladders&lt;/a&gt;の Vice President of ProductのEric Burdさんのセッションでは、Agileで成功するためには、まず組織文化をピボットする必要性が紹介されていました。&lt;/p&gt;

&lt;p&gt;組織へAgileUX/LeanUXのコンセプトを導入するために、以下のポイントを挙げられたそうです。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Find a fire/Start a fire （発端を探す、火を灯す） &lt;/li&gt;
  &lt;li&gt;Listen to customers （ユーザの声を聴く） &lt;/li&gt;
  &lt;li&gt;Get sales in to the action （セールスを巻き込む） &lt;/li&gt;
  &lt;li&gt;Train the executive team （常務陣を教育する） &lt;/li&gt;
  &lt;li&gt;Words matter （言葉がすべて） &lt;/li&gt;
  &lt;li&gt;Small wins （小さな成功を）&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;そして、技術やプロダクトのチームだけでなく、営業などの関係する部署を集め共通の課題を提示することが必要である。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;ja&quot;&gt;&lt;p&gt;Want to Win with Agile セッションより： 意思決定者は忙しいためつかまえづらい。なので、ランチをセッティングして定期ミーティングを行い、啓蒙してプロジェクトに巻き込む。 &lt;a href=&quot;https://twitter.com/search/%2523AgileUXNYC_ja&quot;&gt;#AgileUXNYC_ja&lt;/a&gt;&lt;/p&gt;&amp;mdash; Yoshiki HAYAMA 羽山 祥樹さん (@storywriter) &lt;a href=&quot;https://twitter.com/storywriter/status/179873607957233664&quot; data-datetime=&quot;2012-03-14T10:16:24+00:00&quot;&gt;3月 14, 2012&lt;/a&gt;&lt;/blockquote&gt;
&lt;script src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;
&lt;/script&gt;

&lt;p&gt;&amp;#8220;Small Wins&amp;#8221;（小さな成功）に成りうるものを探して、成功させ、そこから得たものを組織に蓄積することが重要、とのことです。&lt;/p&gt;

&lt;p&gt;このセッションの内容に付随して、@kawaguti さんが紹介していたのですが、
海外ではBrown Bag Lunch Meetingという、ランチミーティングが盛んに行われているそうです。&lt;/p&gt;

&lt;p&gt;Developers Summit 2012のセッションでも紹介のあった&lt;a href=&quot;http://www.innovation-glocom.jp/innovation-behavioral-science/2011/04/future-center.html&quot;&gt;Future Center&lt;/a&gt;の様に、色々なバックグランドを持った人が集まり話し合う機会・場が求められている、ということでしょうか。&lt;/p&gt;

&lt;p&gt;Brown Bag Lunch Meetingについては、&lt;a href=&quot;http://www.rieti.go.jp/jp/events/bbl/index.html&quot;&gt;こちら&lt;/a&gt;に紹介がありましたので、参照ください。&lt;/p&gt;

&lt;h3 id=&quot;investing-in-design-horsepower-vs-rpmshttpagileuxnyccompresentationinvesting-in-design&quot;&gt;&lt;a href=&quot;http://agileuxnyc.com/presentation/investing-in-design/&quot;&gt;Investing in Design: Horsepower vs. RPMs&lt;/a&gt;&lt;/h3&gt;

&lt;div style=&quot;width:425px&quot; id=&quot;__ss_11770223&quot;&gt; 
&lt;strong style=&quot;display:block;margin:12px 0 4px&quot;&gt;
&lt;a href=&quot;http://www.slideshare.net/PhineasBarnes/agile-ux-nyc-4-keys-to-success-in-a-design-driven-company&quot; title=&quot;Agile UX NYC -- 4 keys to success in a design driven company&quot; target=&quot;_blank&quot;&gt;
Agile UX NYC -- 4 keys to success in a design driven company
&lt;/a&gt;
&lt;/strong&gt; 
&lt;iframe src=&quot;http://www.slideshare.net/slideshow/embed_code/11770223&quot; width=&quot;425&quot; height=&quot;355&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot;&gt;
&lt;/iframe&gt; 
&lt;div style=&quot;padding:5px 0 12px&quot;&gt; View more 
&lt;a href=&quot;http://www.slideshare.net/&quot; target=&quot;_blank&quot;&gt;presentations
&lt;/a&gt; from 
&lt;a href=&quot;http://www.slideshare.net/PhineasBarnes&quot; target=&quot;_blank&quot;&gt;Phineas Barnes
&lt;/a&gt; 
&lt;/div&gt; 
&lt;/div&gt;

&lt;p&gt;「スキルセットではなく、マインドセットの問題だ」という言及がありました。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;ja&quot;&gt;&lt;p&gt;Investing in Design セッションより：共通課題をダッシュボード化し、共有する。定期的に更新していく。 &lt;a href=&quot;https://twitter.com/search/%2523AgileUXNYC_ja&quot;&gt;#AgileUXNYC_ja&lt;/a&gt;&lt;/p&gt;&amp;mdash; Yoshiki HAYAMA 羽山 祥樹さん (@storywriter) &lt;a href=&quot;https://twitter.com/storywriter/status/179874034941566977&quot; data-datetime=&quot;2012-03-14T10:18:06+00:00&quot;&gt;3月 14, 2012&lt;/a&gt;&lt;/blockquote&gt;
&lt;script src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;
&lt;/script&gt;

&lt;h3 id=&quot;replacing-requirements-with-hypotheseshttpagileuxnyccompresentationreplacing-requirements-with-hypotheses&quot;&gt;&lt;a href=&quot;http://agileuxnyc.com/presentation/replacing-requirements-with-hypotheses/&quot;&gt;Replacing Requirements with Hypotheses&lt;/a&gt;&lt;/h3&gt;

&lt;div style=&quot;width:425px&quot; id=&quot;__ss_11747255&quot;&gt; 
&lt;strong style=&quot;display:block;margin:12px 0 4px&quot;&gt;
&lt;a href=&quot;http://www.slideshare.net/jseiden/2012-feb-25-agile-ux-nyc-seiden-requirements-to-hypotheses&quot; title=&quot;2012 feb 25 agile ux nyc, seiden, requirements to hypotheses&quot; target=&quot;_blank&quot;&gt;2012 feb 25 agile ux nyc, seiden, requirements to hypotheses
&lt;/a&gt;
&lt;/strong&gt; 
&lt;iframe src=&quot;http://www.slideshare.net/slideshow/embed_code/11747255&quot; width=&quot;425&quot; height=&quot;355&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot;&gt;
&lt;/iframe&gt; 
&lt;div style=&quot;padding:5px 0 12px&quot;&gt; View more 
&lt;a href=&quot;http://www.slideshare.net/&quot; target=&quot;_blank&quot;&gt;presentations
&lt;/a&gt; from 
&lt;a href=&quot;http://www.slideshare.net/jseiden&quot; target=&quot;_blank&quot;&gt;Joshua Seiden&lt;/a&gt; 
&lt;/div&gt; 
&lt;/div&gt;

&lt;p&gt;このセッションで強調されていたことは、「要件を仮説に置き換える」ことです。&lt;/p&gt;

&lt;p&gt;ビジネスサイドのニーズがそのまま開発サイドへ要件として伝わってしまうことで、本来の顧客のニーズを把握できなくなるという弊害がおこります。&lt;/p&gt;

&lt;p&gt;要件を仮説に置き換えることで、@kawaguti さんのツイートにもあったのですが、
&amp;lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;ja&quot;&amp;gt;&amp;lt;p&amp;gt;&amp;#8220;仮説はの利点はテスト可能であること&amp;#8221;&amp;lt;/p&amp;gt;&amp;mdash; Yasunobu Kawaguchiさん (@kawaguti) &lt;a href=&quot;https://twitter.com/kawaguti/status/173423171544952832&quot; data-datetime=&quot;2012-02-25T15:04:40+00:00&quot;&gt;2月 25, 2012&lt;/a&gt;&amp;lt;/blockquote&amp;gt;
&lt;script src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;
&lt;/script&gt;
という特性が発揮されます。仮説を検証するサイクルが生まれます。
&amp;lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;ja&quot;&amp;gt;&amp;lt;p&amp;gt;アジャイルを導入するためには、要件ではなく仮説。要件は断固としたものだが、仮説なら不確実性というエッセンスがある。 &lt;a href=&quot;https://twitter.com/search/%2523AgileUXNYC_ja&quot;&gt;#AgileUXNYC_ja&lt;/a&gt;&amp;lt;/p&amp;gt;&amp;mdash; mocha_cocoaさん (@mocha_cocoa) &lt;a href=&quot;https://twitter.com/mocha_cocoa/status/179875356344451072&quot; data-datetime=&quot;2012-03-14T10:23:21+00:00&quot;&gt;3月 14, 2012&lt;/a&gt;&amp;lt;/blockquote&amp;gt;
&lt;script src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;
&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;そしてこういったプロセスが言語化されることが最も評価できると@kawaguti さんも話されていました。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;ja&quot;&gt;&lt;p&gt;視覚化も大事だが、言語化も大きな課題。特に日本語はあやふやな表現を許しやすいが故に、英語環境より言語化の整備が要するとおもう。 &lt;a href=&quot;https://twitter.com/search/%2523agileuxnyc_ja&quot;&gt;#agileuxnyc_ja&lt;/a&gt;&lt;/p&gt;&amp;mdash; Yasuhisa Hasegawaさん (@yhassy) &lt;a href=&quot;https://twitter.com/yhassy/status/179875614336098304&quot; data-datetime=&quot;2012-03-14T10:24:23+00:00&quot;&gt;3月 14, 2012&lt;/a&gt;&lt;/blockquote&gt;
&lt;script src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;
&lt;/script&gt;

&lt;h3 id=&quot;quick-visual-collaborative-and-continuoushttpagileuxnyccompresentationlane&quot;&gt;&lt;a href=&quot;http://agileuxnyc.com/presentation/lane/&quot;&gt;Quick, Visual, Collaborative and Continuous&lt;/a&gt;&lt;/h3&gt;

&lt;div style=&quot;width:425px&quot; id=&quot;__ss_11707174&quot;&gt; 
&lt;strong style=&quot;display:block;margin:12px 0 4px&quot;&gt;
&lt;a href=&quot;http://www.slideshare.net/LaneHalley/quick-visual-collaborative-continuous&quot; title=&quot;Quick, Visual, Collaborative &amp;amp; Continuous&quot; target=&quot;_blank&quot;&gt;Quick, Visual, Collaborative &amp;amp; Continuous
&lt;/a&gt;
&lt;/strong&gt; 
&lt;iframe src=&quot;http://www.slideshare.net/slideshow/embed_code/11707174&quot; width=&quot;425&quot; height=&quot;355&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot;&gt;
&lt;/iframe&gt; 
&lt;div style=&quot;padding:5px 0 12px&quot;&gt; View more 
&lt;a href=&quot;http://www.slideshare.net/&quot; target=&quot;_blank&quot;&gt;presentations
&lt;/a&gt; from 
&lt;a href=&quot;http://www.slideshare.net/LaneHalley&quot; target=&quot;_blank&quot;&gt;Lane Halley
&lt;/a&gt; 
&lt;/div&gt; 
&lt;/div&gt;

&lt;p&gt;このセッションのスピーカーのLane Halleyさんはデザイナーなのですが、「開発サイドを理解するためにプログラミングを独学で学んだぜ！」と言って拍手喝采を浴びた、コミュ力の高い方なんだとか。&lt;/p&gt;

&lt;p&gt;ペアインタビューをして、複数の人（デザイナやUX担当だけでなく、エンジニアを含めて）がインタビューを聞き、それをノートに取るようなスタイルが紹介されていました。
そして、部署や役割に縛られず「速く、視覚的に、協調的に、継続的に」行うこのが重要、とのことでした。&lt;/p&gt;

&lt;p&gt;Product Ownerチーム(エンジニアも入るがあくまでアーキテクト程度のみ)が大まかな部分を作り、そこから複数のチームに別れ、POチームメンバーだったデザイナがそのまま複数チームに分かれて所属するスタイルが紹介されていました。&lt;/p&gt;

&lt;h3 id=&quot;learning-to-play-ux-rugbyhttpagileuxnyccompresentationlearning-to-play-ux-rugby-why-your-agile-ux-adoption-is-failing-and-what-to-do-about-it&quot;&gt;&lt;a href=&quot;http://agileuxnyc.com/presentation/learning-to-play-ux-rugby-why-your-agile-ux-adoption-is-failing-and-what-to-do-about-it/&quot;&gt;Learning to Play UX Rugby&lt;/a&gt;&lt;/h3&gt;

&lt;div style=&quot;width:425px&quot; id=&quot;__ss_11756904&quot;&gt; 
&lt;strong style=&quot;display:block;margin:12px 0 4px&quot;&gt;
&lt;a href=&quot;http://www.slideshare.net/andersr/learning-to-play-ux-rugby&quot; title=&quot;Learning to Play UX Rugby&quot; target=&quot;_blank&quot;&gt;Learning to Play UX Rugby
&lt;/a&gt;
&lt;/strong&gt; 
&lt;iframe src=&quot;http://www.slideshare.net/slideshow/embed_code/11756904&quot; width=&quot;425&quot; height=&quot;355&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot;&gt;
&lt;/iframe&gt; 
&lt;div style=&quot;padding:5px 0 12px&quot;&gt; View more 
&lt;a href=&quot;http://www.slideshare.net/&quot; target=&quot;_blank&quot;&gt;presentations
&lt;/a&gt; from 
&lt;a href=&quot;http://www.slideshare.net/andersr&quot; target=&quot;_blank&quot;&gt;Anders Ramsay
&lt;/a&gt; 
&lt;/div&gt; 
&lt;/div&gt;

&lt;p&gt;UXデザイナーはAgileな現場においてもウォーターフォールな働きをしており、それはリレーのように個別に走ってバトンを繋いでいく状態になっている。&lt;/p&gt;

&lt;p&gt;AgileUXとは協調中心設計(Collaboration Centerd Design)と紹介されており、ラグビーの様に各々のプレイヤーが走り、縦横無尽にパスが交わされるようになる。&lt;/p&gt;

&lt;h3 id=&quot;better-faster-uxier-atomic-designhttpagileuxnyccompresentationbetter-faster-uxier-atomic-design&quot;&gt;&lt;a href=&quot;http://agileuxnyc.com/presentation/better-faster-uxier-atomic-design/&quot;&gt;Better. Faster. UXier. AToMIC Design&lt;/a&gt;&lt;/h3&gt;

&lt;div style=&quot;width:425px&quot; id=&quot;__ss_11749624&quot;&gt; 
&lt;strong style=&quot;display:block;margin:12px 0 4px&quot;&gt;
&lt;a href=&quot;http://www.slideshare.net/jgergen/better-faster-uxier-atomic-design&quot; title=&quot;Better. Faster. UXier.   AToMIC Design&quot; target=&quot;_blank&quot;&gt;Better. Faster. UXier.   AToMIC Design&lt;/a&gt;&lt;/strong&gt; &lt;iframe src=&quot;http://www.slideshare.net/slideshow/embed_code/11749624&quot; width=&quot;425&quot; height=&quot;355&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot;&gt;
&lt;/iframe&gt; 
&lt;div style=&quot;padding:5px 0 12px&quot;&gt; View more 
&lt;a href=&quot;http://www.slideshare.net/&quot; target=&quot;_blank&quot;&gt;presentations
&lt;/a&gt; from 
&lt;a href=&quot;http://www.slideshare.net/jgergen&quot; target=&quot;_blank&quot;&gt;Jennifer Gergen
&lt;/a&gt; 
&lt;/div&gt; 
&lt;/div&gt;

&lt;p&gt;イテレーティブな開発では、機能の開発改善には強いが、デザイン変更に弱さが現れる場合が多い。変更に強いAToMIC Designが必要。
デザインの戦略をはじめに決めることで、共通化されたデザインをアセットとして管理する。&lt;/p&gt;

&lt;p&gt;デザイナがプログラミングスキルを（共通言語として）身に付けることで、開発サイドとの会話・意思疎通が迅速になるそうです。
&amp;lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;ja&quot;&amp;gt;&amp;lt;p&amp;gt;そうか。UX専門家が、プログラミングを理解するだけでも、大きな価値になるのか。 &lt;a href=&quot;https://twitter.com/search/%2523AgileUXNYC_ja&quot;&gt;#AgileUXNYC_ja&lt;/a&gt;&amp;lt;/p&amp;gt;&amp;mdash; Yoshiki HAYAMA 羽山 祥樹さん (@storywriter) &lt;a href=&quot;https://twitter.com/storywriter/status/179877666613239808&quot; data-datetime=&quot;2012-03-14T10:32:32+00:00&quot;&gt;3月 14, 2012&lt;/a&gt;&amp;lt;/blockquote&amp;gt;
&lt;script src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;
&lt;/script&gt;&lt;/p&gt;

&lt;h3 id=&quot;demystifying-design-fewer-secrets-greater-impacthttpagileuxnyccompresentationdemystifying-design-fewer-secrets-greater-impact&quot;&gt;&lt;a href=&quot;http://agileuxnyc.com/presentation/demystifying-design-fewer-secrets-greater-impact/&quot;&gt;Demystifying Design: Fewer Secrets, Greater Impact&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;UXデザインは未だブラックボックスな状態になっている。
デザイナ以外の人間にとって、UXデザインは過程が不明であり、このような状態では信頼を勝ち取ることはできない。
&amp;lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;ja&quot;&amp;gt;&amp;lt;p&amp;gt;UXがマジックのように見えるが故にスケープゴートみたいになってることもあるな。「UXスゲー」みたいな。謎表現だ。 &lt;a href=&quot;https://twitter.com/search/%2523agileuxnyc_ja&quot;&gt;#agileuxnyc_ja&lt;/a&gt;&amp;lt;/p&amp;gt;&amp;mdash; Yasuhisa Hasegawaさん (@yhassy) &lt;a href=&quot;https://twitter.com/yhassy/status/179877797098033153&quot; data-datetime=&quot;2012-03-14T10:33:03+00:00&quot;&gt;3月 14, 2012&lt;/a&gt;&amp;lt;/blockquote&amp;gt;
&lt;script src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;
&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;デザインは様々な要因(ビジネスとユーザのニーズ、ユーザビリティ、ブランド等)が絡み合っており簡単ではないが、
頻繁に成果物を見せ、学んだことをシェアする必要がある。&lt;/p&gt;

&lt;p&gt;そのために、UXデザイナは「医者が話すように、他人が理解できる言葉」で話す必要がある。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;まとめ&lt;/h3&gt;

&lt;p&gt;UXにはメンタルシフトが求められている。&lt;/p&gt;

&lt;p&gt;Requirements(要件)はHypothesis(仮説)へ、&lt;/p&gt;

&lt;p&gt;Design(デザイン)はExperiment(実験)へ、&lt;/p&gt;

&lt;p&gt;Outputs(成果物)はOutcomes(結果）となる。&lt;/p&gt;

&lt;p&gt;ここで言われているOutputsは作成されたプロダクトであり、
Outcomesはそのプロダクトをユーザが使うことでもたらされた（得られた）ものを指すそうです。&lt;/p&gt;

&lt;p&gt;“We are being invited,but we are not inviting them to ours.”&lt;/p&gt;

&lt;p&gt;開発チームはUXを一緒のチームへ招待しているが、UXは開発チームを招待していない、と締めくくられていました。
&amp;lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;ja&quot;&amp;gt;&amp;lt;p&amp;gt;デザイナーがプログラムを覚えろ…というより cross discipline (横断型) であれってことなんだろうね。 きっと。 &lt;a href=&quot;https://twitter.com/search/%2523AgileUXNYC_ja&quot;&gt;#AgileUXNYC_ja&lt;/a&gt;&amp;lt;/p&amp;gt;&amp;mdash; Yasuhisa Hasegawaさん (@yhassy) &lt;a href=&quot;https://twitter.com/yhassy/status/179879428627775490&quot; data-datetime=&quot;2012-03-14T10:39:32+00:00&quot;&gt;3月 14, 2012&lt;/a&gt;&amp;lt;/blockquote&amp;gt;
&lt;script src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;
&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;パネルディスカッション&lt;/h2&gt;
&lt;p&gt;後半30分は、LeanStartupJapanの和波俊久さん、利用品質ラボの樽本徹也さんをパネラーに向かえ、パネルディスカッションとなりました。&lt;/p&gt;

&lt;p&gt;ディスカッションの内容を大まかに紹介します。&lt;/p&gt;

&lt;p&gt;樽本徹也さん(以下、樽)：これまでは開発がウォーターフォールだったから、UX・UCDもウォーターフォールだった。だがこれからは、開発がAgileになる、だからUX・UCDもAgileになる。これはUX・UCDが自発的にAgile化したのではなく、開発サイドの変化に強いられた結果だ。今後日本でもAgileへシフトする、だからUXはAgileを学ぶべきた。&lt;/p&gt;

&lt;p&gt;和波俊久さん(以下、和)：AgileはProjectの中で完結するものであり、終わりがある。だがStartupは終わらない。終わらせ方を知りたい。
&amp;lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;ja&quot;&amp;gt;&amp;lt;p&amp;gt;「プロジェクトは終わる使命をもっているが、スタートアップは終わらないという使命をもっている。」 &lt;a href=&quot;https://twitter.com/search/%2523AgileUXNYC_ja&quot;&gt;#AgileUXNYC_ja&lt;/a&gt;&amp;lt;/p&amp;gt;&amp;mdash; Takehara.Masashi.3kさん (@take3000) &lt;a href=&quot;https://twitter.com/take3000/status/179879518054522880&quot; data-datetime=&quot;2012-03-14T10:39:53+00:00&quot;&gt;3月 14, 2012&lt;/a&gt;&amp;lt;/blockquote&amp;gt;
&lt;script src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;
&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;坂田一倫さん(以下、坂)：UXデザイナはエゴで仕事をしていないだろうか？DevelopmentがUXについて学んで来ており、DevelopmentとBusinnessのロールだけで開発が回るようになってきている。UXとして危機感を持っている。現状の職場ではUXはDevとBizと分断された状態になっている。&lt;/p&gt;

&lt;p&gt;樽：セクションごとに分けずにプロジェクト単位で、UXもDev,Bizと一緒になってやるべきた。&lt;/p&gt;

&lt;p&gt;坂：現状プロジェクト単位に分かれているが、入っていくステージが違う。同時ではない。&lt;/p&gt;

&lt;p&gt;樽：同時に入れていればLeanStartupになる。
&amp;lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;ja&quot;&amp;gt;&amp;lt;p&amp;gt;ビジネス、UX、開発、よーいドンでチームとしてユーザー調査から始められたらAgileUX。（樽本さん） &lt;a href=&quot;https://twitter.com/search/%2523AgileUXNYC_ja&quot;&gt;#AgileUXNYC_ja&lt;/a&gt;&amp;lt;/p&amp;gt;&amp;mdash; Saori Babaさん (@sanochka) &lt;a href=&quot;https://twitter.com/sanochka/status/179883071867322369&quot; data-datetime=&quot;2012-03-14T10:54:01+00:00&quot;&gt;3月 14, 2012&lt;/a&gt;&amp;lt;/blockquote&amp;gt;
&lt;script src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;
&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;和：株式会社である以上、決算が必要。決算をするにはどこかで定量的に見せなければいけない。そこがBlackBoxのままではいけない。報告のうまい仕組みが必要。&lt;/p&gt;

&lt;p&gt;川口恭伸さん（以下、川）：予算がひずみを生んでいる。予算は結果としてもちろん付いてくるものだが、&lt;a href=&quot;http://itpro.nikkeibp.co.jp/article/COLUMN/20060419/235702/&quot;&gt;Beyond Budgeting Model&lt;/a&gt;のようにマイクロな計測をして適宜見直しを行えば良い。経営はDashBoardで確認が取れれば問題ない。&lt;/p&gt;

&lt;p&gt;川：Leanにおいては、&lt;a href=&quot;http://www.1kochi.com/2007/01/_burn_rate.html&quot;&gt;バーンレ-ト&lt;/a&gt;があり、資金が生きているうちにイノベーションを起こせるかが鍵になっている。&lt;/p&gt;

&lt;h3 id=&quot;qa&quot;&gt;Q&amp;amp;A&lt;/h3&gt;

&lt;p&gt;Q:顧客開発のためのPDCAについて、何かインプットがあれば共有いただきたいです。特に顧客セグメントの仮説立案のTipsや、スケーラビリティを意識した検証方法などありましたら、お願いします。&lt;/p&gt;

&lt;p&gt;A:
和：課題をセグメントしていく&lt;/p&gt;

&lt;p&gt;川：
&amp;lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;ja&quot;&amp;gt;&amp;lt;p&amp;gt;37signalsからの著書から参照すると自らがペルソナになることが一番の検証方法となる。 &lt;a href=&quot;https://twitter.com/search/%2523AgileUXNYC_ja&quot;&gt;#AgileUXNYC_ja&lt;/a&gt; &lt;a href=&quot;http://t.co/0QbVLv0L&quot; title=&quot;http://qlive.co/events/FsSNS/posts/5120/comments/376&quot;&gt;qlive.co/events/FsSNS/p…&lt;/a&gt;&amp;lt;/p&amp;gt;&amp;mdash; QLiveさん (@QLive_jp) &lt;a href=&quot;https://twitter.com/QLive_jp/status/179882831206555648&quot; data-datetime=&quot;2012-03-14T10:53:03+00:00&quot;&gt;3月 14, 2012&lt;/a&gt;&amp;lt;/blockquote&amp;gt;
&lt;script src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;
&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;坂：Lean Work Shopに参加した際は、
　　　・自分が使うサービスを出す
　　　・ペルソナを4つ作る
　　　・セグメントの人に検証のためのインタビューをする
　　　・セグメントが存在するか検証する？
　　　
川：開発者でなければわからないこともある。だから壁があったら負け。&lt;/p&gt;

&lt;p&gt;樽：インタビューは誰にでもできる。全ての人が常に同席することは難しくとも、インタビューを録音・速記して、全員が見聞きできるようにする。そうすればアイデアは出てくる。
&amp;lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;ja&quot;&amp;gt;&amp;lt;p&amp;gt;チーム内で持っている情報に差がないほうがいい。ユーザーインタビューもチーム皆で参加。役割超えてアイデアぼこぼこ出てくる。（樽本さん） &lt;a href=&quot;https://twitter.com/search/%2523AgileUXNYC_ja&quot;&gt;#AgileUXNYC_ja&lt;/a&gt;&amp;lt;/p&amp;gt;&amp;mdash; Saori Babaさん (@sanochka) &lt;a href=&quot;https://twitter.com/sanochka/status/179883774903984128&quot; data-datetime=&quot;2012-03-14T10:56:48+00:00&quot;&gt;3月 14, 2012&lt;/a&gt;&amp;lt;/blockquote&amp;gt;
&lt;script src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;
&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;川：ウォーターフォールは科学的根拠を重視する。「統計的に5人以上ヒアリングする必要がある」だとか。Agileではアイデアが出るのなら（体験的に）少人数でも問題ないとわかっている。&lt;/p&gt;

&lt;p&gt;樽：データの精度よりもアイデア。アイデアを出し、動かして、検証する。なぜなら結果が全てだから。
&amp;lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;ja&quot;&amp;gt;&amp;lt;p&amp;gt;インタビューデータの精度より早くアイデアを形にすること。結果が全て。立派な調査やったって売れなきゃ意味ないでしょ。（樽本さん） &lt;a href=&quot;https://twitter.com/search/%2523AgileUXNYC_ja&quot;&gt;#AgileUXNYC_ja&lt;/a&gt;&amp;lt;/p&amp;gt;&amp;mdash; Saori Babaさん (@sanochka) &lt;a href=&quot;https://twitter.com/sanochka/status/179884358742708225&quot; data-datetime=&quot;2012-03-14T10:59:07+00:00&quot;&gt;3月 14, 2012&lt;/a&gt;&amp;lt;/blockquote&amp;gt;
&lt;script src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;
&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;川：正にOutputsではなく、Outcomesが重要。&lt;/p&gt;

&lt;p&gt;樽：どんなものでも売れなければ意味が無い。だから作りながら売るべき。従来型の作ってから営業が売りに行くでは遅い。売れなければ、途中でピボットすればいい。作りながら売っていればそれが出来る。&lt;/p&gt;

&lt;p&gt;和：最初から”学ぶ気持ち”でいることが重要。フィードバックを得ることを前提に動いているからこそうまくいく。&lt;/p&gt;

&lt;p&gt;樽：開発者は今後UXを学ぶ。UXだけでは立ち行かなくなる
&amp;lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;ja&quot;&amp;gt;&amp;lt;p&amp;gt;UX専門のデザイナーは必要ない？開発者がUXを身に付けだしている。&lt;a href=&quot;https://twitter.com/search/%2523AgileUXNYC_ja&quot;&gt;#AgileUXNYC_ja&lt;/a&gt;&amp;lt;/p&amp;gt;&amp;mdash; Kazunori Nishimuraさん (@nishimuu) &lt;a href=&quot;https://twitter.com/nishimuu/status/179884578880765953&quot; data-datetime=&quot;2012-03-14T11:00:00+00:00&quot;&gt;3月 14, 2012&lt;/a&gt;&amp;lt;/blockquote&amp;gt;
&lt;script src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;
&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;川：如何にチームに入っていくかが重要。&lt;/p&gt;

&lt;p&gt;坂：インタビューに併せて、その人がコアユーザかどうかも見極める必要がある。製品・サービスのコアが何かを見極めて、ピボットの幅を考える。
&amp;lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;ja&quot;&amp;gt;&amp;lt;p&amp;gt;インタビューする相手は合わせてコアユーザーであるのかを確かめる必要がる。&lt;a href=&quot;https://twitter.com/search/%2523AgileUXNYC_ja&quot;&gt;#AgileUXNYC_ja&lt;/a&gt;&amp;lt;/p&amp;gt;&amp;mdash; Kazunori Nishimuraさん (@nishimuu) &lt;a href=&quot;https://twitter.com/nishimuu/status/179884949149728768&quot; data-datetime=&quot;2012-03-14T11:01:28+00:00&quot;&gt;3月 14, 2012&lt;/a&gt;&amp;lt;/blockquote&amp;gt;
&lt;script src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;
&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;和：コアじゃないユーザのインタビューはかなしくなる。エバンジェリストユーザを見つけることが大事。&lt;/p&gt;

&lt;p&gt;和：インタビューでは、採用障壁を下げるインタビューをしなければならない。インタビューされる側は現状で考えている。採用障壁を下げることですんなり採用されるパターンは多い。
&amp;lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;ja&quot;&amp;gt;&amp;lt;p&amp;gt;和波さん「BtoBの場合、『あったら便利』というサービスでも、導入側が『これは自社の文化に馴染まない』と思ったら導入はされない。その敷居を下げる昨日をつければ簡単に度付きしてもらえたりする。スタートアップの人たちは、なかなかそれに気がつかない」 &lt;a href=&quot;https://twitter.com/search/%2523AgileUXNYC_ja&quot;&gt;#AgileUXNYC_ja&lt;/a&gt;&amp;lt;/p&amp;gt;&amp;mdash; Yoshiki HAYAMA 羽山 祥樹さん (@storywriter) &lt;a href=&quot;https://twitter.com/storywriter/status/179886222213263363&quot; data-datetime=&quot;2012-03-14T11:06:32+00:00&quot;&gt;3月 14, 2012&lt;/a&gt;&amp;lt;/blockquote&amp;gt;
&lt;script src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;
&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;川：「これを他人に勧めたいか？」という質問がいい。
&amp;lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;ja&quot;&amp;gt;&amp;lt;p&amp;gt;「あなたはこのカンファレンスを人に勧めたいですか？　という質問がある」 &lt;a href=&quot;https://twitter.com/search/%2523AgileUXNYC_ja&quot;&gt;#AgileUXNYC_ja&lt;/a&gt;&amp;lt;/p&amp;gt;&amp;mdash; Takehara.Masashi.3kさん (@take3000) &lt;a href=&quot;https://twitter.com/take3000/status/179885579293573120&quot; data-datetime=&quot;2012-03-14T11:03:58+00:00&quot;&gt;3月 14, 2012&lt;/a&gt;&amp;lt;/blockquote&amp;gt;
&lt;script src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;
&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;最後に&lt;/h2&gt;
&lt;p&gt;このイベントを通して、これまでビジネス側にとって開発側がブラックボックスだったように、今までブラックボックスだったUX・デザインが透明化・協調化されようとしている雰囲気が伝わってきました。
私は開発者なので、UX・デザインについての見識が浅いですが、Businness, Development, UXが溶けてバターになれるよう、UXを学ぼうと改めて思いました。&lt;/p&gt;
</description>
                <link>http://modalsoul.github.io/report/2012/03/14/AgileUx-NYC-2012-Redux-in-Tokyo</link>
                <guid>http://modalsoul.github.io/report/2012/03/14/AgileUx-NYC-2012-Redux-in-Tokyo</guid>
                <pubDate>2012-03-14T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>【意訳】Tutorial：Play Framework 2 with Scala, Anorm, JSON, CoffeeScript, jQuery＆Heroku［Herokuデプロイ編］</title>
                <description>&lt;p&gt;元記事は&lt;a href=&quot;http://www.jamesward.com/2012/02/21/play-framework-2-with-scala-anorm-json-coffeescript-jquery-heroku&quot;&gt;こちら&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;少々長い記事なので、Play2アプリのビルド編とHerokuへのデプロイ編に分けます。&lt;/p&gt;

&lt;p&gt;今回は、Herokuへのデプロイ編です。&lt;/p&gt;

&lt;p&gt;Play2アプリのビルド編は、&lt;a href=&quot;http://modalsoul.github.com/Programing/2012/02/29/play2-scala-anorm-json-coffeescript-jquery-heroku/&quot;&gt;こちら&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://capture.heartrails.com/200x150/cool?http://modalsoul.github.com/Programing/2012/02/29/play2-scala-anorm-json-coffeescript-jquery-heroku/&quot; alt=&quot;Play2アプリビルド編&quot; /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;Step 1) &lt;a href=&quot;http://heroku.com/signup&quot;&gt;Herokuのアカウントを取得&lt;/a&gt;して、&lt;a href=&quot;http://toolbelt.heroku.com/&quot;&gt;Heroku Toolbelt&lt;/a&gt;と&lt;a href=&quot;http://git-scm.org/&quot;&gt;git&lt;/a&gt;をインストールして、コマンドラインからHerokuへログインします&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;heroku login
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;もしこれがはじめてのHerokuへのログインだったら、git用のSSHキーの作成と、Herokuアカウントへの紐付けをする必要があります。&lt;/p&gt;

&lt;p&gt;Step 2) Heroku上の各アプリケーションは、テスト用にPostgres DBを持っています。
Heroku上でアプリケーションを実行してこのDBを使うには、別途設定が必要です。
これにはいくつか方法がありますが、最も簡単な方法はスタートアップコマンドラインからDBの設定をオーバーライドする方法です。
これはStep3で紹介します。
その前に、Psotgres JDBCドライバーをプロジェクトの依存関係として指定する必要があります。
&amp;#8220;project/Build.scala&amp;#8221;ファイルに、以下のような&amp;#8221;appDependencies&amp;#8221;を設定します。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;   val &lt;span class=&quot;nv&quot;&gt;appDependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Seq&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&amp;quot;postgresql&amp;quot;&lt;/span&gt; % &lt;span class=&quot;s2&quot;&gt;&amp;quot;postgresql&amp;quot;&lt;/span&gt; % &lt;span class=&quot;s2&quot;&gt;&amp;quot;9.1-901-1.jdbc4&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Step 3) Herokuにどのプロセスを実行するのかを教えるために、プロジェクトルートディレクトリ配下にファイル名&amp;#8221;Procfile&amp;#8221;を作成し（※大文字と小文字が区別されます）、以下のように記述します&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;web: target/start -Dhttp.port&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PORT&lt;/span&gt; -DapplyEvolutions.default&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt; -Ddb.default.driver&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;org.postgresql.Driver -Ddb.default.url&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$DATABASE_URL&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Play2では、プロジェクトのビルドにScala Build Tool(SBT)を使います。プロジェクトがHerokuへデプロイされると、プロジェクトをコンパイルするため&amp;#8221;sbt stage!コマンドが実行されます。
そして、プロセスがJavaのクラスパスの設定とPlayサーバーの起動をする&amp;#8221;taget/start&amp;#8221;スクリプトを生成します。
Herokuはアプリケーションに、Javaプロパティ&amp;#8221;http.port&amp;#8221;が適宜設定されるように、環境変数&amp;#8221;PORT&amp;#8221;を使用してリッスンすべきHTTPポートを通知します。
また、Heroku上のアプリケーションへDB（とその他のリソース）への接続文字列は、デフォルトでは環境変数介して渡されます。
環境変数のDATABASE_URLは、DBホスト、名前、ユーザ名、パスワードを含みます。
所謂&amp;#8221;db.default.url&amp;#8221;プロパティがその値で設定されます。
またドライバは、Postgres JDBCドライバクラスに設定されます。&lt;/p&gt;

&lt;p&gt;Step 4) Herokuはアプリケーションのアップロード方法としてgitを使っています。
SCMツールにgitを使っていようと無かろうとHerokuへアプリケーションをアップロードするにはgitを使います。
プロジェクトのルートディレクトリでgit repoを作り、ファイルを追加してコミットします。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;	git init
	git add Procfile app conf project public
	git commit -m init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;※ 選択しての&amp;#8221;git add&amp;#8221;の代わりに、&amp;#8221;.gitignore&amp;#8221;ファイルを更新することもできます。&lt;/p&gt;

&lt;p&gt;Step 5) Heroku CLIを使用して、Heroku上に新しいアプリケーションをプロビジョニングします。
あなたが作った各アプリケーションは1月辺り、750&lt;a href=&quot;http://devcenter.heroku.com/articles/dynos&quot;&gt;&amp;#8220;dyno&amp;#8221;&lt;/a&gt;時間無料です。
開発者として無料でHerokuを使用でき、スケールした分だけ支払うことになります。
コマンドライン上で、&amp;#8221;cedar&amp;#8221;スタックを使って新しいアプリケーションを作ります。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;heroku create -s cedar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;これでアプリケーションのHTTPとgitのエンドポイントを作ります。
アプリケーションで変更した名前を使うことも、自身のドメイン名を使うことも可能です。&lt;/p&gt;

&lt;p&gt;Step 6) アプリケーションはクラウドへデプロイする準備が整いました。コマンドラインからHerokuのマスターブランチへ&amp;#8221;git push&amp;#8221;します。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;git push heroku master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Herokuがファイル受け取ると、Play Frameworkのプレコンパイラが実行され、Herokuが&amp;#8221;slug file&amp;#8221;をアセンブルし、&amp;#8221;slug&amp;#8221;がdynoへデプロイされます。&lt;/p&gt;

&lt;p&gt;Step 7) これで&amp;#8221;heroku create&amp;#8221;に続いて出力のドメインに移動する、もしくは単純に実行することで、ブラウザでアプリケーションを表示できます。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;heroku open
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Scala, Anorm, JSON, CoffeeScript, jQueryを使ったPlay2アプリケーションをHeroku上にデプロイできたはずです。
これよりも詳細にHerokuの使い方を知りたいときは、&lt;a href=&quot;http://devcenter.heroku.com/&quot;&gt;Heroku Dev Center&lt;/a&gt;を確認してください。
もし質問があったら、私に知らせてください。&lt;/p&gt;

&lt;p&gt;このエントリーは、CoffeeScript, jQuery, Play Framework, Scalaを使ってポストされました。パーマリンクをブックマークしてください。コメントかトラックバックをよろしく。トラックバックURLは、&lt;a href=&quot;http://www.jamesward.com/2012/02/21/play-framework-2-with-scala-anorm-json-coffeescript-jquery-heroku/trackback/&quot;&gt;こちら&lt;/a&gt;&lt;/p&gt;

</description>
                <link>http://modalsoul.github.io/programing/2012/03/04/play2-scala-anorm-json-coffeescript-jquery-heroku</link>
                <guid>http://modalsoul.github.io/programing/2012/03/04/play2-scala-anorm-json-coffeescript-jquery-heroku</guid>
                <pubDate>2012-03-04T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>【意訳】Tutorial：Play Framework 2 with Scala, Anorm, JSON, CoffeeScript, jQuery&Heroku ［Play2アプリのビルド編］</title>
                <description>&lt;p&gt;元記事は&lt;a href=&quot;http://www.jamesward.com/2012/02/21/play-framework-2-with-scala-anorm-json-coffeescript-jquery-heroku&quot;&gt;こちら&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;少々長い記事なので、Play2アプリのビルド編とHerokuへのデプロイ編に分けます。&lt;/p&gt;

&lt;p&gt;今回は、Play2アプリのビルド編です。&lt;/p&gt;

&lt;p&gt;Herokuへのデプロイ編は、&lt;a href=&quot;http://modalsoul.github.com/Programing/2012/03/04/play2-scala-anorm-json-coffeescript-jquery-heroku/&quot;&gt;こちら&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://capture.heartrails.com/200x150/cool?http://modalsoul.github.com/Programing/2012/03/04/play2-scala-anorm-json-coffeescript-jquery-heroku/&quot; alt=&quot;Herokuへのデプロイ編&quot; /&gt;&lt;/p&gt;

&lt;p&gt;※ 2012/03/06:アドバイスいただいた箇所について修正しました。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Play Framework2 RC2がリリースされ、モダンなWebアプリケーションを構築する手法として成熟した生産的な方法になっています。&lt;/p&gt;

&lt;p&gt;Play2とScala,Anorm,JSON,CoffeeScript,jQueryを使って迅速なアプリケーション構築を体験してみましょう。&lt;/p&gt;

&lt;p&gt;一度ローカルでアプリケーションが動いてしまえば、あとはHerokuにデプロイするだけです。&lt;/p&gt;

&lt;p&gt;（注意：これは&lt;a href=&quot;http://www.jamesward.com/2011/12/11/tutorial-play-framework-jpa-json-jquery-heroku&quot;&gt;my Play1+Java turtorial&lt;/a&gt;の、Play2＋Scala版です。）Githubからソースを入手してください。&lt;/p&gt;

&lt;p&gt;Step 1) Play2 RC2版をダウンロード・インストールしてください。&lt;/p&gt;

&lt;p&gt;Step 2) 新しいアプリケーションを作ります：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;play new foobar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;プロンプトの言語選択画面がでたら、Scalaを選択してください。&lt;/p&gt;

&lt;p&gt;Step 3) 新しく作成した&amp;#8221;foobar&amp;#8221;ディレクトリ配下にIDEの設定ファイルを生成します。&lt;/p&gt;

&lt;p&gt;IntelliJでは、このように実行します。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;play new foobar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;注意：ここで生成されたIMLファイルは、プロジェクトとして直接インポート可能ではありません。代わりに、モジュールなしでプロジェクトを新たに生成して、このステップで生成したIMLファイルからそのプロジェクトへモジュールをインポートする必要があります。もしわからなければ、&lt;a href=&quot;http://www.jamesward.com/2011/07/28/setup-play-framework-with-scala-in-intellij&quot;&gt;Play1+Scala IntelliJ article&lt;/a&gt;が参考になります。&lt;/p&gt;

&lt;p&gt;Eclipseプロジェクト化するために、下記のコマンドを実行&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;play eclipsify
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Step 4) Playサーバの起動&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;play run
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;正常に起動していることをテストするために、ここにアクセス&lt;a href=&quot;http://localhost:9000&quot;&gt;http://localhost:9000&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Step 5) Play2 with ScalaではデフォルトでORマッパーを提供していません。代わりにデフォルトのRDBMS永続性プロバイダとなっているのがAnormです(Anormは Object Relational Mapperではありません)。このシンプルなアプリケーションでは、1つの永続的オブジェクト：Bar(ひとつのプライマリキーと名前を持っている)を持っています。Anormは、自動でのスキーマ作成を行わないので、SQLスキーマの作成/廃棄のためのスクリプトが必要です。新しいファイル&amp;#8221;conf/evolutions/default/1.sql&amp;#8221;を作成し、以下の内容を記述します。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;&lt;span class=&quot;c&quot;&gt;# --- First database schema&lt;/span&gt;
 
&lt;span class=&quot;c&quot;&gt;# --- !Ups&lt;/span&gt;
 
CREATE TABLE bar &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  id                        SERIAL PRIMARY KEY,
  name                      VARCHAR&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;255&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; NOT NULL
&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;;
 
&lt;span class=&quot;c&quot;&gt;# --- !Downs&lt;/span&gt;
 
DROP TABLE IF EXISTS bar;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Anormでは、Scalaの&amp;#8221;case class&amp;#8221;を永続的/CRUDインターフェースとして、値オブジェクトとシングルトンオブジェクトとして扱うことができます。&amp;#8221;app/models/Bar.scla&amp;#8221;というファイルにBar case classとオブジェクトを作成して、以下の内容を記述します。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;package models
 
import play.api.db._
import play.api.Play.current
 
import anorm._
import anorm.SqlParser._
 
&lt;span class=&quot;k&quot;&gt;case &lt;/span&gt;class Bar&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;id: Pk&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Long&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;, name: String&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
 
object Bar &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
 
  val &lt;span class=&quot;nv&quot;&gt;simple&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    get&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Pk&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Long&lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;（&lt;span class=&quot;s2&quot;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; ~
    get&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;String&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;（&lt;span class=&quot;s2&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; map &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;case &lt;/span&gt;id~name &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;gt; Bar&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;id, name&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 
  def findAll&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;: Seq&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Bar&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    DB.withConnection &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; implicit &lt;span class=&quot;nv&quot;&gt;connection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;gt;
      SQL&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;select * from bar&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.as&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Bar.simple *&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 
  def create&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;bar: Bar&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: &lt;span class=&quot;nv&quot;&gt;Unit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    DB.withConnection &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; implicit &lt;span class=&quot;nv&quot;&gt;connection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;gt;
      SQL&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;insert into bar(name) values ({name})&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.on&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt;name -&amp;gt; bar.name
      &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.executeUpdate&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;変数の&amp;#8221;simple&amp;#8221;は、データベースの行値をBar case classにマップする、基本的なパーサを提供します。&lt;/p&gt;

&lt;p&gt;静的関数、&amp;#8221;findAll&amp;#8221;と&amp;#8221;create&amp;#8221;は、一般的なデータアクセスを行います。&lt;/p&gt;

&lt;p&gt;注意点としては、&amp;#8221;findAll&amp;#8221;はBarへ各行を返すために、&amp;#8221;simple&amp;#8221; row parserを使っている点です。&lt;/p&gt;

&lt;p&gt;Step 6) インメモリーのh2データベースを使うために、&amp;#8221;conf/application.conf&amp;#8221;ファイルに以下の値を設定する。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;db.default.driver&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;org.h2.Driver
db.default.url&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;jdbc:h2:mem:play&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Step 7) &amp;#8220;app/controllers/Application.scala&amp;#8221;を下記のように更新し、BarをHTTP POSTへ変換してデータベースに反映するアプリケーションコントローラー関数を作成します。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;package controllers
 
import play.api.data.Form
import play.api.data.Forms.&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;single, nonEmptyText&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
import play.api.mvc.&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;Action, Controller&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
import anorm.NotAssigned
 
import models.Bar
 
 
object Application extends Controller &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
 
  val &lt;span class=&quot;nv&quot;&gt;barForm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Form&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    single&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; -&amp;gt; nonEmptyText&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
 
  def &lt;span class=&quot;nv&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Action &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    Ok&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;views.html.index&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;barForm&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 
  def addBar&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Action &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; implicit &lt;span class=&quot;nv&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;gt;
    barForm.bindFromRequest.fold&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;errors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;gt; BadRequest,
      &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;name&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;gt;
          Bar.create&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Bar&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;NotAssigned, name&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
          Redirect&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;routes.Application.index&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&amp;#8220;barForm&amp;#8221;マップは、フォームオブジェクトへパラメータを要求し、入力データのバリデーションを行います。
静的関数の&amp;#8221;addBar&amp;#8221;は、リクエストと&amp;#8221;barForm&amp;#8221;へのリクエストパラメータのマッピングを行います。
失敗した場合は、コントローラはBadRequestを返します。
成功した場合は、Barの名前は新しい&amp;#8221;Bar&amp;#8221;を構築するために使われます。そしてその&amp;#8221;Bar&amp;#8221;はデータベースに保存され、indexページへのリダイレクトが送られます。
index関数は、Step 9で更新されるテンプレートへ&amp;#8221;barForm&amp;#8221;を渡すように変更されました。&lt;/p&gt;

&lt;p&gt;Step 8) &amp;#8220;conf/routes&amp;#8221;ファイルに以下の行を追加して、&amp;#8221;/addBar&amp;#8221; URLへのPOSTリクエストを&amp;#8221;Application.addBar&amp;#8221;へマップする新しいルートを作成します。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;POST	/addBar		controllers.Application.addBar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Step 9) フォームパラメータを受け取るために、&amp;#8221;main&amp;#8221;テンプレートを拡張した&amp;#8221;app/views/index.scala.html&amp;#8221;テンプレートを更新し、Webページ上のフォームをレンダリングするためにPlay2 form helperを使います。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;　＠&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;form: play.api.data.Form&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;String&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;
 
　＠main&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Welcome to Play 2.0&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; ｛
 
    　＠helper.form&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; routes.Application.addBar&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; ｛
        　＠helper.inputText&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;form&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
        ＜input &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;submit&amp;quot;&lt;/span&gt;/＞
    ｝
 
｝
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;ブラウザで&lt;a href=&quot;http://localhost:9000&quot;&gt;http://localhost:9000&lt;/a&gt;を開き、データベース変更の適用と、フォームのテストをします。うまくできていれば、フォームを送信するとindexページへリダイレクトされるはずです。&lt;/p&gt;

&lt;p&gt;Step 10) JSONサービスを作成し、barの全てを取得するための関数を、&amp;#8221;app/controllers/Application.scala&amp;#8221;ファイルに追加します。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;  import com.codahale.jerkson.Json
 
  def listBars&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Action &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    val &lt;span class=&quot;nv&quot;&gt;bars&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Bar.findAll&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
 
    val &lt;span class=&quot;nv&quot;&gt;json&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Json.generate&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;bars&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
 
    Ok&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;json&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.as&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;application/json&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;新しく作成した関数は、シリアル化されたJSONとして、&amp;#8221;Bar.findAll()&amp;#8221;から&amp;#8221;Bar&amp;#8221;オブジェクトのリストを返します。&lt;/p&gt;

&lt;p&gt;&amp;#8220;/listBars&amp;#8221;へのリクエストのために、下記のように新しいGET request handlerを&amp;#8221;conf/routes&amp;#8221;に追加します。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;GET		/listBars		controllers.Application.listBars
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;ブラウザで&lt;a href=&quot;http://localhost:9000/listBars&quot;&gt;http://localhost:9000/listBars&lt;/a&gt;を開いてみてください。Step 9で作成したbarが表示されているはずです。&lt;/p&gt;

&lt;p&gt;Step 11) jQueryを使いJSONシリアル化されたbarの取得と、それぞれのページ追加のために、新しいCoffeeScriptファイル&amp;#8221;app/assets/javascripts/index.coffee&amp;#8221;を作成します。内容は以下&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;-&amp;gt;
  &lt;span class=&quot;nv&quot;&gt;$.&lt;/span&gt;get &lt;span class=&quot;s2&quot;&gt;&amp;quot;/listBars&amp;quot;&lt;/span&gt;, &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; -＞
    &lt;span class=&quot;nv&quot;&gt;$.&lt;/span&gt;each data, &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;index, item&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; -＞
      &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;#bars&amp;quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;.append &lt;span class=&quot;s2&quot;&gt;&amp;quot;＜li＞Bar &amp;quot;&lt;/span&gt; + item.name + &lt;span class=&quot;s2&quot;&gt;&amp;quot;＜/li＞&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;CoffeScriptは、&amp;#8221;/listBars&amp;#8221;へのGETリクエストの作成と返却値の反復、ページ(Step 12で追加します)の&amp;#8221;bars&amp;#8221;エレメントへの各アイテムの追加のために、jQueryを使います。&lt;/p&gt;

&lt;p&gt;Step 12) CoffeeScriptのソースから自動コンパイルされたindex.jsスクリプトを使うために、&amp;#8221;app/views/index.scala.html&amp;#8221;を以下の行を&amp;#8221;main&amp;#8221;ブロックへ追加し、更新します。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;　＜script &lt;span class=&quot;nv&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;＠routes.Assets.at(&amp;quot;&lt;/span&gt;javascripts/index.js&lt;span class=&quot;s2&quot;&gt;&amp;quot;)&amp;quot;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;＞＜/script＞
 
    　＜ul &lt;span class=&quot;nv&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;bars&amp;quot;&lt;/span&gt;＞＜/ul＞
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;ブラウザで、&lt;a href=&quot;http://localhost:9000/&quot;&gt;http://localhost:9000/&lt;/a&gt;を表示し、barがページ上部に表示され、新しいbarが期待通りに追加されていることを確認してください。&lt;/p&gt;

&lt;p&gt;これで、Scala, Anorm, JSON, CoffeeScript, jQueryを使ったPlay2アプリのビルド完了です。ここで紹介したすべてのソースコードはGitHub上にあります。あとはHerokuへデプロイするだけです。&lt;/p&gt;

</description>
                <link>http://modalsoul.github.io/programing/2012/02/29/play2-scala-anorm-json-coffeescript-jquery-heroku</link>
                <guid>http://modalsoul.github.io/programing/2012/02/29/play2-scala-anorm-json-coffeescript-jquery-heroku</guid>
                <pubDate>2012-02-29T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>横浜JSTDDハンズオンに参加しました。#JSTDD</title>
                <description>&lt;p&gt;&lt;img src=&quot;http://capture.heartrails.com/300x200/cool?http://atnd.org/events/25519&quot; alt=&quot;横浜JSTDDハンズオン：ATND&quot; /&gt;&lt;/p&gt;

&lt;p&gt;横浜JSTDDハンズオンに参加してきました。
概要は、JavaScriptのテスト駆動開発についてのあれこれについてで、&lt;/p&gt;

&lt;p&gt;会場の&lt;a href=&quot;http://tane-maki.net/&quot;&gt;「タネマキ」&lt;/a&gt;は、なんかワクワクするカッコいいところでした！
&lt;img src=&quot;https://yukar.in/p/pz/123506436&quot; alt=&quot;コワーキングスペースの「タネマキ」&quot; /&gt;&lt;/p&gt;

&lt;p&gt;当日のつぶやきまとめは&lt;a href=&quot;https://yukar.in/note/ckFoT5&quot;&gt;こちら&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://yukar.in/note/ckFoT5&quot;&gt;横浜JSTDDハンズオン #JSTDD つぶやきまとめ - Yukarin&amp;#8217;Note&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://0-9.tumblr.com/post/17020645713/jstestdriver-asynctestcase&quot;&gt;@kyo_ago さん発表資料&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://yukar.in/note/ckFp4b&quot;&gt;@kyo_ago さん補足資料&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://efcl.info/2012/0226/res3015/&quot;&gt;@azu_re さん発表資料&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;&quot;&gt;@os0x さん発表資料&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;kyoago&quot;&gt;@kyo_agoさん発表&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://twitpic.com/show/large/8osh18&quot; alt=&quot;ハンズオン風景&quot; /&gt;
###TDDって？
まずは簡単なアンケート&lt;/p&gt;

&lt;p&gt;今日のハンズオンが初TDDの人？
&amp;lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;ja&quot;&amp;gt;&amp;lt;p&amp;gt;初TDD率は、5/20人くらい？ &lt;a href=&quot;https://twitter.com/search/%2523JSTDD&quot;&gt;#JSTDD&lt;/a&gt;&amp;lt;/p&amp;gt;&amp;mdash; imae （Master BBQ）さん (@modal_soul) &lt;a href=&quot;https://twitter.com/modal_soul/status/173620307347783680&quot; data-datetime=&quot;2012-02-26T04:08:01+00:00&quot;&gt;2月 26, 2012&lt;/a&gt;&amp;lt;/blockquote&amp;gt;
&lt;script src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;
&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;JavaScriptのテストをしたことがある人？
※初TDDの人を含まず。
&amp;lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;ja&quot;&amp;gt;&amp;lt;p&amp;gt;JavaScriptのテスト　3/15人くらい？ &lt;a href=&quot;https://twitter.com/search/%2523JSTDD&quot;&gt;#JSTDD&lt;/a&gt;&amp;lt;/p&amp;gt;&amp;mdash; imae （Master BBQ）さん (@modal_soul) &lt;a href=&quot;https://twitter.com/modal_soul/status/173620451766050816&quot; data-datetime=&quot;2012-02-26T04:08:36+00:00&quot;&gt;2月 26, 2012&lt;/a&gt;&amp;lt;/blockquote&amp;gt;
&lt;script src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;
&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;JsTestDriverを使ったことがある人？
&amp;lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;ja&quot;&amp;gt;&amp;lt;p&amp;gt;JsTestDriverやったことある率は、3/20人くらい？ &lt;a href=&quot;https://twitter.com/search/%2523JSTDD&quot;&gt;#JSTDD&lt;/a&gt;&amp;lt;/p&amp;gt;&amp;mdash; imae （Master BBQ）さん (@modal_soul) &lt;a href=&quot;https://twitter.com/modal_soul/status/173620584972943360&quot; data-datetime=&quot;2012-02-26T04:09:07+00:00&quot;&gt;2月 26, 2012&lt;/a&gt;&amp;lt;/blockquote&amp;gt;
&lt;script src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;
&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;そもそもテストって？
&amp;lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;ja&quot;&amp;gt;&amp;lt;p&amp;gt;「プログラマがおこなうホワイトボックステスト」って、１．開発的アプローチ（TDD）、2.ドキュメント的アプローチ、3.品質担保的アプローチ &lt;a href=&quot;https://twitter.com/search/%2523JSTDD&quot;&gt;#JSTDD&lt;/a&gt;&amp;lt;/p&amp;gt;&amp;mdash; imae （Master BBQ）さん (@modal_soul) &lt;a href=&quot;https://twitter.com/modal_soul/status/173622536502906880&quot; data-datetime=&quot;2012-02-26T04:16:53+00:00&quot;&gt;2月 26, 2012&lt;/a&gt;&amp;lt;/blockquote&amp;gt;
&lt;script src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;
&lt;/script&gt;&lt;/p&gt;

&lt;h3 id=&quot;jstestdriver&quot;&gt;JsTestDriverについて&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://gyazo.com/afad732dae49b26e0e44f1897d67b010.png&quot; alt=&quot;JsTestDriverの説明&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://code.google.com/p/js-test-driver/&quot;&gt;JsTestDriver&lt;/a&gt;についての説明と、テストをハンズオン形式で実施。&lt;/p&gt;

&lt;p&gt;ハンズオンの手順、設定ファイル、プロダクトコード、テストコードは、&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://yukar.in/note/ckFp4b&quot;&gt;こちら&lt;/a&gt;に沿ってやりました。&lt;/p&gt;

&lt;p&gt;テストコードの書き方、流れ、設定のTips、loggingなどなど&lt;/p&gt;

&lt;p&gt;なかでもドキュメントやヘルプにもでてこない&lt;a href=&quot;http://code.google.com/p/js-test-driver/source/browse/trunk/JsTestDriver/src/com/google/jstestdriver/config/YamlParser.java#96&quot;&gt;オプション&lt;/a&gt;がでてきて新鮮でしたｗ&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;ja&quot;&gt;&lt;p&gt;これは「変なことをやりたかったらJSTestDriverのコードを読もうぜ」フラグ…… &lt;a href=&quot;https://twitter.com/search/%2523JSTDD&quot;&gt;#JSTDD&lt;/a&gt;&lt;/p&gt;&amp;mdash; さねゆきさん (@saneyuki_s) &lt;a href=&quot;https://twitter.com/saneyuki_s/status/173642014301224960&quot; data-datetime=&quot;2012-02-26T05:34:16+00:00&quot;&gt;2月 26, 2012&lt;/a&gt;&lt;/blockquote&gt;
&lt;script src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;
&lt;/script&gt;

&lt;p&gt;Google ProjectのWikiを読むよりも&lt;a href=&quot;http://code.google.com/p/js-test-driver/source/browse/trunk/JsTestDriver/src/com/google/jstestdriver/config/YamlParser.java#96&quot;&gt;コード&lt;/a&gt;を見たほうが色々わかるよ、って&lt;/p&gt;

&lt;h3 id=&quot;sinonjs&quot;&gt;Sinon.jsについて&lt;/h3&gt;
&lt;p&gt;JsTestDriverで非同期処理のテストを使用とすると、
（かなり）難しいことになるようなので、&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;ja&quot;&gt;&lt;p&gt;jsTestDriverで非同期テストの設定を書くのはあまりに面倒なので向いてない(かも) &lt;a href=&quot;https://twitter.com/search/%2523JSTDD&quot;&gt;#JSTDD&lt;/a&gt;&lt;/p&gt;&amp;mdash; gochoさん (@gocho) &lt;a href=&quot;https://twitter.com/gocho/status/173639264653942786&quot; data-datetime=&quot;2012-02-26T05:23:21+00:00&quot;&gt;2月 26, 2012&lt;/a&gt;&lt;/blockquote&gt;
&lt;script src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;
&lt;/script&gt;

&lt;p&gt;Sinon.jsでやったほうがいいところも（多々）あるそうです。&lt;/p&gt;

&lt;p&gt;この辺りは適材適所で使い分けるのがポイントのようです。
&amp;lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;ja&quot;&amp;gt;&lt;/p&gt;
&lt;p&gt;ajaxのテストは、jsTestDriverだけじゃなくて、Sinon.jsとか、jqMockとか、使うといいんじゃない? 適材適所大切。 
&lt;a href=&quot;https://twitter.com/search/%2523JSTDD&quot;&gt;#JSTDD
&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;&amp;mdash; gochoさん (@gocho) 
&lt;a href=&quot;https://twitter.com/gocho/status/173642294325555202&quot; data-datetime=&quot;2012-02-26T05:35:23+00:00&quot;&gt;2月 26, 2012
&lt;/a&gt;
&amp;lt;/blockquote&amp;gt;
&lt;script src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;
&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&quot;azure&quot;&gt;@azu_reさん発表&lt;/h2&gt;
&lt;p&gt;### WebStormについて ###
私は使ったこと無かったのですが、シェアウェアのIDEなんだそうです。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;ja&quot;&gt;
&lt;p&gt;
&lt;a href=&quot;https://twitter.com/search/%2523JSTDD&quot;&gt;#JSTDD&lt;/a&gt;
 発表中のスライド &quot;WebStorm指南書&quot; 
 &lt;a href=&quot;http://t.co/t72fnvYh&quot; title=&quot;http://bit.ly/wbPl1J&quot;&gt;bit.ly/wbPl1J
 &lt;/a&gt;
 &lt;/p&gt;
 &amp;mdash; azuさん (@azu_re) 
&lt;a href=&quot;https://twitter.com/azu_re/status/173658374586646528&quot; data-datetime=&quot;2012-02-26T06:39:17+00:00&quot;&gt;2月 26, 2012
&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;
&lt;/script&gt;

&lt;p&gt;有償なだけあり、豊富な機能が提供されていてとても便利そうな印象でした。＠azu_reさんの資料がとても良くまとめられていらっしゃるので、詳細は 
&lt;a href=&quot;http://azu.github.com/slide/webstorm/webstorm.html&quot;&gt;こちら&lt;/a&gt; 
を見てもらったほうがいいと思います。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://capture.heartrails.com/200x150/cool?http://azu.github.com/slide/webstorm/webstorm.html&quot; alt=&quot;WebStorm指南書&quot; /&gt; &lt;/p&gt;

&lt;h2 id=&quot;os0x&quot;&gt;＠os0xさん発表&lt;/h2&gt;
&lt;p&gt;### jasmine-headless-webkitについて ###&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://capture.heartrails.com/200x150/cool?http://johnbintz.github.com/jasmine-headless-webkit/&quot; alt=&quot;jasmine-headless-webkit -- The fastest way to run your Jasmine specs!&quot; /&gt;&lt;/p&gt;

&lt;p&gt;JasmineのspecをCUI環境でいい感じにテストできるツールなんだそうです&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/pivotal/jasmine/wiki/Asynchronous-specs&quot;&gt;参考&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;　#JSTDDのTL上に特に資料のURLがなかったので、この記事ではここまでしかかけてません、すみません&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;全体を通して、なかなかコアな話が聞けてとてもためになりました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/gp/product/4048707868/ref=as_li_ss_tl?ie=UTF8&amp;amp;tag=modalsoul-22&amp;amp;linkCode=as2&amp;amp;camp=247&amp;amp;creative=7399&amp;amp;creativeASIN=4048707868&quot;&gt;テスト駆動JavaScript&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;を去年読みはじめてから、もっと勉強しよう、と思いつつなかなか手がつけられずにいたので、とてもいい機会になりました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/gp/product/4048707868/ref=as_li_ss_il?ie=UTF8&amp;amp;tag=modalsoul-22&amp;amp;linkCode=as2&amp;amp;camp=247&amp;amp;creative=7399&amp;amp;creativeASIN=4048707868&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&amp;amp;Format=_SL110_&amp;amp;ASIN=4048707868&amp;amp;MarketPlace=JP&amp;amp;ID=AsinImage&amp;amp;WS=1&amp;amp;tag=modalsoul-22&amp;amp;ServiceVersion=20070822&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.assoc-amazon.jp/e/ir?t=modalsoul-22&amp;amp;l=as2&amp;amp;o=9&amp;amp;a=4048707868&quot; width=&quot;1&quot; height=&quot;1&quot; border=&quot;0&quot; alt=&quot;&quot; style=&quot;border:none !important; margin:0px !important;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;今回の内容を踏まえつつ、Jenkinsとからめてビルドパイプラインを構築するのが当面の目標ですね。&lt;/p&gt;

</description>
                <link>http://modalsoul.github.io/report/test/2012/02/26/jstd-handson</link>
                <guid>http://modalsoul.github.io/report/test/2012/02/26/jstd-handson</guid>
                <pubDate>2012-02-26T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>【意訳】Play Framework 2.0とJsTestDriverによるJavaScriptテスト。</title>
                <description>&lt;p&gt;&lt;img src=&quot;http://capture.heartrails.com/300x200/cool?http://www.eishay.com/2012/02/testing-javascript-with-play-framework.html&quot; alt=&quot;Testing javascript with Play Framework 2.0 and JsTestDriver&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.eishay.com/2012/02/testing-javascript-with-play-framework.html&quot;&gt;Testing javascript with Play Framework 2.0 and JsTestDriver&lt;/a&gt;を適当翻訳でご紹介します。&lt;/p&gt;

&lt;p&gt;元記事は&lt;a href=&quot;http://www.eishay.com/2012/02/testing-javascript-with-play-framework.html&quot;&gt;こちら&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;qwallet.comでは、バックエンドにScala on Play2.0を使った広大なjavascriptアプリケーションを構築しています。&lt;/p&gt;

&lt;p&gt;Scalaの開発にIntelliJ IDEAを使うようになってからは、JavaScriptでも同じように使っています。&lt;/p&gt;

&lt;p&gt;これにより、IntelliJとJsTestDriverの統合による恩恵を受けています。&lt;/p&gt;

&lt;p&gt;JavaScriptアプリでは、常に3つのブラウザを対象にテストをしています。
&lt;img src=&quot;http://3.bp.blogspot.com/-IYdsLWKTgmA/Tzy0yd1OVUI/AAAAAAAABK4/2u5mI8xOwu4/s1600/server.jpg&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;テストコンソールにはテスト結果と、ブラウザからフェッチされたコンソール出力を確認できます。
&lt;img src=&quot;http://4.bp.blogspot.com/-CDyQpVkCRhU/Tzy1FNhDTiI/AAAAAAAABLA/ZYSJTpS4iXw/s1600/test_rez.jpg&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;上の試験例では、FireFox, Chromeのテストは通っていますが、Safariでは失敗しています。
サンプルでは３つのテストケースがあり、拡張した1つは2つのテストメソッドを持っています。
もしエラーが発生した場合、スタックトレースがクリッカブルになり、IntelliJはエラーの行右側に飛びます。&lt;/p&gt;

&lt;p&gt;テストはとても速いですが、この小さなサブセットのためにChromeでは6msかかっていますが、まだ改善の余地があります。&lt;/p&gt;

&lt;p&gt;Play2.0の親切なところは、JavaScriptファイルの自動コンパイルです。
JsTestDriverのdevモードでは、ライブラリファイルとテストケースをブラウザに送り、アプリケーションファイルはPlay2.0アプリケーションによって送られます。
Playは、ファイルの変更を検知して自動でリコンパイルします。
テストを書くときに見逃しているかもしれないものをコンパイラがキャッチしてくれ、結果としてカバレッジが向上します。
&lt;script src=&quot;https://gist.github.com/1843026.js?file=gistfile1.txt&quot;&gt;
&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;CIモードでは、JavaScriptファイルは1度コンパイルされておりPlayを経由して送られる必要がない。
この方法はとても早く、Playがバックグラウンドで実行されている必要性を低減してくれます。&lt;/p&gt;

&lt;p&gt;qwallet.comの継続的デプロイの運用では、アプリケーションの全ての部分をテストします。
JsTestDriverはクロージャーコンパイラーとバンドルされ、fast devモードユニットテストとテスティングストラテジーのコンポーネントとして提供されています。&lt;/p&gt;

&lt;p&gt;ところで、もし興味があったら、jobs@qwalletにメールを送ってくれ。&lt;/p&gt;
</description>
                <link>http://modalsoul.github.io/test/2012/02/21/jstd-with-play2</link>
                <guid>http://modalsoul.github.io/test/2012/02/21/jstd-with-play2</guid>
                <pubDate>2012-02-21T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>Developers Summit 2012 2日目ツイートまとめ。#devsumi</title>
                <description>&lt;h2 id=&quot;developers-summit&quot;&gt;Developers Summitとは？&lt;/h2&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;Developers Summit でべろっぱーずさみっと （コンピュータ）

通称：デブサミ
「デベロッパーの復権」を目指して年1回開催される、ITエンジニアのお祭り
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;section&quot;&gt;開催概要&lt;/h3&gt;

&lt;p&gt;名称	Developers Summit 2012 （デブサミ2012）&lt;/p&gt;

&lt;p&gt;会期	2012年2月16日（木）・17日（金）&lt;/p&gt;

&lt;p&gt;会場	目黒雅叙園（東京・目黒）&lt;/p&gt;

&lt;p&gt;主催	株式会社 翔泳社 &lt;/p&gt;

&lt;p&gt;お勧めする方	技術者、ソフトウェア開発者、システム開発者、ネットワーク管理・運用者、IT教育担当者、&lt;/p&gt;

&lt;p&gt;ITマーケティング・セールス担当者、IT関連部署マネージャ、プロジェクト関連マネージャ &lt;/p&gt;

&lt;p&gt;参加費	無料 &lt;/p&gt;

&lt;p&gt;お問い合わせ	Developers Summit 運営事務局 (株式会社翔泳社内) &lt;/p&gt;

&lt;p&gt;E-mail： devinfo@shoeisha.co.jp &lt;/p&gt;

&lt;p&gt;1日目に続き2日目も参加しました。2日目も非常にアツいセッションでした。&lt;/p&gt;

&lt;p&gt;この詳細を語るには、今日も時間が足りないので
私が参加したセッションのツイートまとめのリンクを掲載しておきます。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;2月17日（金）&lt;/h2&gt;
&lt;p&gt;###［開発プロセス］10:00～10:50【17-A-1】Continuous DeliveryとJenkinsアブストラクト　川口 耕介 氏&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://yukar.in/note/ckFpbG&quot;&gt;Continuous DeliveryとJenkinsアブストラクト #devsumiA  - Yukarin&amp;#8217;Note&lt;/a&gt;
&lt;a href=&quot;https://yukar.in/note/ckFpbG&quot;&gt;https://yukar.in/note/ckFpbG&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;言わずと知れた継続的インテグレーションサーバ「Jenkins」のお父さん：川口さんの講演でした。
前日の「あの人の自分戦略を聞きたい！」セッション終了後、すごすごとステッカーください、と伺ったところ
「ステッカー切れてしまったので、明日また持ってきますね」とのことで
ステッカーもらうぞ！と意気込んでやってきたところ、会場入り口でアンケート用紙と一緒にJenkinsステッカーいただきました！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/jenkins-sticker.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;講演では、検証済みマージや、ビルドパイプライン、昇進モデル
自動化と自動化がつながり複雑な自動化が可能になる、「継続的デリバリ」についてのお話でした。&lt;/p&gt;

&lt;p&gt;検証済みマージについては、&lt;a href=&quot;http://www.amazon.co.jp/gp/product/4774149942/ref=as_li_ss_tl?ie=UTF8&amp;amp;tag=modalsoul-22&amp;amp;linkCode=as2&amp;amp;camp=247&amp;amp;creative=7399&amp;amp;creativeASIN=4774149942&quot;&gt;WEB+DB Press vol.67&lt;/a&gt;にて記事を書かれたそうなので、必読ですね！
&lt;a href=&quot;http://www.amazon.co.jp/gp/product/4774149942/ref=as_li_ss_il?ie=UTF8&amp;amp;tag=modalsoul-22&amp;amp;linkCode=as2&amp;amp;camp=247&amp;amp;creative=7399&amp;amp;creativeASIN=4774149942&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&amp;amp;Format=_SL110_&amp;amp;ASIN=4774149942&amp;amp;MarketPlace=JP&amp;amp;ID=AsinImage&amp;amp;WS=1&amp;amp;tag=modalsoul-22&amp;amp;ServiceVersion=20070822&quot; /&gt;&lt;/a&gt;&lt;img src=&quot;http://www.assoc-amazon.jp/e/ir?t=modalsoul-22&amp;amp;l=as2&amp;amp;o=9&amp;amp;a=4774149942&quot; width=&quot;1&quot; height=&quot;1&quot; border=&quot;0&quot; alt=&quot;&quot; style=&quot;border:none !important; margin:0px !important;&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;c-3--&quot;&gt;［開発プロセス］13:10～14:00【17-C-3】オフェンシブな開発～「納品しない受託開発」にみるソフトウェア受託開発の未来　倉貫 義人 氏&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://yukar.in/note/ckFpb7&quot;&gt;オフェンシブな開発 #devsumi #devsumiC つぶやきまとめ  - Yukarin&amp;#8217;Note&lt;/a&gt;
&lt;a href=&quot;https://yukar.in/note/ckFpb7&quot;&gt;https://yukar.in/note/ckFpb7&lt;/a&gt;&lt;/p&gt;

&lt;div style=&quot;width:425px&quot; id=&quot;__ss_11631411&quot;&gt; 
	&lt;strong style=&quot;display:block;margin:12px 0 4px&quot;&gt;
	&lt;a href=&quot;http://www.slideshare.net/kuranuki/devsumi2012-11631411&quot; title=&quot;Devsumi2012 倉貫講演資料&quot; target=&quot;_blank&quot;&gt;Devsumi2012 倉貫講演資料&lt;/a&gt;
	&lt;/strong&gt; 
	&lt;iframe src=&quot;http://www.slideshare.net/slideshow/embed_code/11631411&quot; width=&quot;425&quot; height=&quot;355&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot;&gt;
	&lt;/iframe&gt; 
	&lt;div style=&quot;padding:5px 0 12px&quot;&gt; View more &lt;a href=&quot;http://www.slideshare.net/&quot; target=&quot;_blank&quot;&gt;presentations&lt;/a&gt; from &lt;a href=&quot;http://www.slideshare.net/kuranuki&quot; target=&quot;_blank&quot;&gt;Yoshihito Kuranuki&lt;/a&gt; 
	&lt;/div&gt; 
&lt;/div&gt;

&lt;p&gt;このセッションの中で話された「家族がいても挑戦できる社会」。ガツンと響きました。&lt;/p&gt;

&lt;p&gt;技術が好きでエンジニアになった人が、
食っていく為、家族を食わせて行く為に、それまでのスキルを捨ててマネジメントをする
でも、それってその人の本意じゃないし、それまでのスキルが無駄になる
本人にとっても雇用する側にとってもおいしくない&lt;/p&gt;

&lt;p&gt;そんな現状を変えられそうなお話でした。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;ja&quot;&gt;&lt;p&gt;&quot;研修と納品が目的だと、価値を提供することを目指せなくなる。これが守りの姿勢。&quot; &lt;a href=&quot;https://twitter.com/search/%2523devsumiC&quot;&gt;#devsumiC&lt;/a&gt;&lt;/p&gt;&amp;mdash; Tomohiro Hashidateさん (@joker1007) &lt;a href=&quot;https://twitter.com/joker1007/status/170363635363880961&quot; data-datetime=&quot;2012-02-17T04:27:10+00:00&quot;&gt;2月 17, 2012&lt;/a&gt;&lt;/blockquote&gt;
&lt;script src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;
&lt;/script&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;ja&quot;&gt;&lt;p&gt;&quot;生産性を上げれば上げるほど、担当できる顧客が増える。SIerの逆向きのインセンティブとは違う。プログラマとして頑張っていけるモデルを作っている。&quot; &lt;a href=&quot;https://twitter.com/search/%2523devsumiC&quot;&gt;#devsumiC&lt;/a&gt;&lt;/p&gt;&amp;mdash; Tomohiro Hashidateさん (@joker1007) &lt;a href=&quot;https://twitter.com/joker1007/status/170368425288413185&quot; data-datetime=&quot;2012-02-17T04:46:12+00:00&quot;&gt;2月 17, 2012&lt;/a&gt;&lt;/blockquote&gt;
&lt;script src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;
&lt;/script&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;ja&quot;&gt;&lt;p&gt;倉貫「いつまでも、いつからでも夢に挑戦できる社会にしていきたい。独身だろうが家族いても。それを実現するのがSonicGardenが取り組んでいるスタートアッププラットフォーム。」 &lt;a href=&quot;https://twitter.com/search/%2523devsumi&quot;&gt;#devsumi&lt;/a&gt; &lt;a href=&quot;https://twitter.com/search/%2523devsumiC&quot;&gt;#devsumiC&lt;/a&gt;&lt;/p&gt;&amp;mdash; miyohideさん (@miyohide) &lt;a href=&quot;https://twitter.com/miyohide/status/170369173749366784&quot; data-datetime=&quot;2012-02-17T04:49:10+00:00&quot;&gt;2月 17, 2012&lt;/a&gt;&lt;/blockquote&gt;
&lt;script src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;
&lt;/script&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;ja&quot;&gt;&lt;p&gt;プログラマーはマニュアル化できないナレッジワーカー。ナレッジワーカーはノマドでタイムフリー、だからマネジメントするものではない &lt;a href=&quot;https://twitter.com/search/%2523devsumiC&quot;&gt;#devsumiC&lt;/a&gt;&lt;/p&gt;&amp;mdash; imae （Master BBQ）さん (@modal_soul) &lt;a href=&quot;https://twitter.com/modal_soul/status/170369690638622720&quot; data-datetime=&quot;2012-02-17T04:51:14+00:00&quot;&gt;2月 17, 2012&lt;/a&gt;&lt;/blockquote&gt;
&lt;script src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;
&lt;/script&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;ja&quot;&gt;&lt;p&gt;倉貫さんの目指している世界があまりにもカッコ良すぎる。自分のビジネスモデルを通して実現したい世界が凄く分かりやすくて、しかも魅力的だ。 &lt;a href=&quot;https://twitter.com/search/%2523devsumiC&quot;&gt;#devsumiC&lt;/a&gt;&lt;/p&gt;&amp;mdash; Tomohiro Hashidateさん (@joker1007) &lt;a href=&quot;https://twitter.com/joker1007/status/170369902337736706&quot; data-datetime=&quot;2012-02-17T04:52:04+00:00&quot;&gt;2月 17, 2012&lt;/a&gt;&lt;/blockquote&gt;
&lt;script src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;
&lt;/script&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;dena-special1420150517-a-4scrum--&quot;&gt;［DeNA Special］14:20～15:05【17-A-4】Scrumで組織改革　貝瀬 岳志 氏&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://yukar.in/note/ckFpcs&quot;&gt;Scrumで組織改革 #devsumiA つぶやきまとめ  - Yukarin&amp;#8217;Note&lt;/a&gt;
&lt;a href=&quot;https://yukar.in/note/ckFpcs&quot;&gt;https://yukar.in/note/ckFpcs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;スピーカーの貝瀬さんとは、去年受講した認定スクラムマスター研修の2日目にご一緒しました。
まさかこんな機会にお会いするとは、、驚きですｗ&lt;/p&gt;

&lt;p&gt;それと、会場の聴講者がとても多いことにも驚きました。
やはりスクラムが注目されている、ということなんでしょうか？&lt;/p&gt;

&lt;p&gt;このセッションで特に気になったつぶやきを抜粋&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;ja&quot;&gt;&lt;p&gt;そうだね、その辺の充実度がチームの成熟度と関係しているかもしれない。@&lt;a href=&quot;https://twitter.com/modal_soul&quot;&gt;modal_soul&lt;/a&gt;: イテレーティブに開発する上で、やはり立ち上げの早さは重要なんですね　@&lt;a href=&quot;https://twitter.com/tsuyok&quot;&gt;tsuyok&lt;/a&gt;: スプリント0のテンプレート。こういうテンプレートを作っていくのは重要だよなー。 &lt;a href=&quot;https://twitter.com/search/%2523devsumiA&quot;&gt;#devsumiA&lt;/a&gt;&lt;/p&gt;&amp;mdash; Tsuyoshi Yasunishiさん (@tsuyok) &lt;a href=&quot;https://twitter.com/tsuyok/status/170383772905250816&quot; data-datetime=&quot;2012-02-17T05:47:11+00:00&quot;&gt;2月 17, 2012&lt;/a&gt;&lt;/blockquote&gt;
&lt;script src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;
&lt;/script&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;th-special1525161517-b-5---&quot;&gt;［10th Special］15:25～16:15【17-B-5】アジャイルマニフェスト ディケイド　角谷 信太郎 氏&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://yukar.in/note/ckFpbf&quot;&gt;［その１］アジャイルマニフェスト ディケイド #devsumiB つぶやきまとめ  - Yukarin&amp;#8217;Note&lt;/a&gt;
&lt;a href=&quot;https://yukar.in/note/ckFpbf&quot;&gt;https://yukar.in/note/ckFpbf&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://yukar.in/note/ckFpb4&quot;&gt;［その２］アジャイルマニフェスト ディケイド #devsumiB つぶやきまとめ  - Yukarin&amp;#8217;Note&lt;/a&gt;
&lt;a href=&quot;https://yukar.in/note/ckFpb4&quot;&gt;https://yukar.in/note/ckFpb4&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://kakutani.com/20120217.html#p01&quot;&gt;『アジャイルマニフェスト ディケイド』(Developers Summit 2012, 17-B-5) - 角谷HTML化計画(2012-02-17)&lt;/a&gt;
&lt;script src=&quot;http://speakerdeck.com/embed/4f3e7c48a0d46a001f012d8b.js&quot;&gt;
&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;流石、信頼と実績の角谷さん。素晴らしいセッションでした！そしてもの凄い聴講者の数ｗｗ
角谷さん自身もおっしゃっていましたが、このセッションは劇場版、生でしか味わえないものが満載でした！&lt;/p&gt;

&lt;p&gt;講演資料をツイートと併せて追っていただくと、劇場に近づけるかもしれませんね
&amp;lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;ja&quot;&amp;gt;&amp;lt;p&amp;gt;&amp;#8220;角谷さんのセッションを最後まで聴いてデブサミが何なのか分かったような気がした。講演の中で角谷さんが言及したとおり、デブサミは&amp;#8221;映画館&amp;#8221;なのだ&amp;#8221; / “10回目のデブサミ - The Dragon Scroll” &lt;a href=&quot;http://t.co/RhwzqMeB&quot; title=&quot;http://htn.to/NvW2er&quot;&gt;htn.to/NvW2er&lt;/a&gt;&amp;lt;/p&amp;gt;&amp;mdash; Kakutani Shintaroさん (@kakutani) &lt;a href=&quot;https://twitter.com/kakutani/status/170889006152826881&quot; data-datetime=&quot;2012-02-18T15:14:48+00:00&quot;&gt;2月 18, 2012&lt;/a&gt;&amp;lt;/blockquote&amp;gt;
&lt;script src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;
&lt;/script&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;special1740191017-e-74tate-4tate------&quot;&gt;［Special］17:40～19:10【17-E-7】君の4tate（立てた帆）に、風を感じているか？ ～4tateで日本を変えるプロジェクト～　野村 恭彦 氏 / 市谷 聡啓 氏&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://yukar.in/note/ckFpaN&quot;&gt; 君の4tate（立てた帆）に、風を感じているか？ #devsumiE つぶやきまとめ  - Yukarin&amp;#8217;Note&lt;/a&gt;
&lt;a href=&quot;https://yukar.in/note/ckFpaN&quot;&gt;https://yukar.in/note/ckFpaN&lt;/a&gt;&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;ja&quot;&gt;&lt;p&gt;「よんたて」ではなく「ほたて」だった &lt;a href=&quot;https://twitter.com/search/%2523devsumiE&quot;&gt;#devsumiE&lt;/a&gt;&lt;/p&gt;&amp;mdash; uedayoさん (@uedayo) &lt;a href=&quot;https://twitter.com/uedayo/status/170428328854040576&quot; data-datetime=&quot;2012-02-17T08:44:14+00:00&quot;&gt;2月 17, 2012&lt;/a&gt;&lt;/blockquote&gt;
&lt;script src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;
&lt;/script&gt;

&lt;p&gt;このセッションですが、実際よくわからないまま参加しましたｗ
ただ、スピーカーの野村　恭彦さんが監訳された&lt;a href=&quot;http://www.amazon.co.jp/gp/product/4873115051/ref=as_li_ss_tl?ie=UTF8&amp;amp;tag=modalsoul-22&amp;amp;linkCode=as2&amp;amp;camp=247&amp;amp;creative=7399&amp;amp;creativeASIN=4873115051&quot;&gt;ゲームストーミング ―会議、チーム、プロジェクトを成功へと導く87のゲーム&lt;/a&gt; は、
仕事や勉強会のワークショップのネタにフル活用していて、この本つながりで参加しました。※この本、オススメです&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/gp/product/4873115051/ref=as_li_ss_il?ie=UTF8&amp;amp;tag=modalsoul-22&amp;amp;linkCode=as2&amp;amp;camp=247&amp;amp;creative=7399&amp;amp;creativeASIN=4873115051&quot;&gt;
&lt;img border=&quot;0&quot; src=&quot;http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&amp;amp;Format=_SL110_&amp;amp;ASIN=4873115051&amp;amp;MarketPlace=JP&amp;amp;ID=AsinImage&amp;amp;WS=1&amp;amp;tag=modalsoul-22&amp;amp;ServiceVersion=20070822&quot; /&gt;
&lt;/a&gt;
&lt;img src=&quot;http://www.assoc-amazon.jp/e/ir?t=modalsoul-22&amp;amp;l=as2&amp;amp;o=9&amp;amp;a=4873115051&quot; width=&quot;1&quot; height=&quot;1&quot; border=&quot;0&quot; alt=&quot;&quot; style=&quot;border:none !important; margin:0px !important;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;このセッションでは、これまでの聴講するだけのスタイルではなくて、受講者同士がディスカッションするスタイルでした。&lt;/p&gt;

&lt;p&gt;このセッション中で特に感銘した部分のツイートを抜粋して紹介すると、&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;ja&quot;&gt;&lt;p&gt;べき論で集まってもうまくいかない　思いをもった人を集める　 &lt;a href=&quot;https://twitter.com/search/%2523devsumiE&quot;&gt;#devsumiE&lt;/a&gt;&lt;/p&gt;&amp;mdash; Dai Fujiharaさん (@daipresents) &lt;a href=&quot;https://twitter.com/daipresents/status/170441710839676928&quot; data-datetime=&quot;2012-02-17T09:37:25+00:00&quot;&gt;2月 17, 2012&lt;/a&gt;&lt;/blockquote&gt;
&lt;script src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;
&lt;/script&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;ja&quot;&gt;&lt;p&gt;対話による多様性と同調、アジャイル・スクラムにも通じてますよね &lt;a href=&quot;https://twitter.com/search/%2523devsumiE&quot;&gt;#devsumiE&lt;/a&gt;&lt;/p&gt;&amp;mdash; imae （Master BBQ）さん (@modal_soul) &lt;a href=&quot;https://twitter.com/modal_soul/status/170442530129842176&quot; data-datetime=&quot;2012-02-17T09:40:40+00:00&quot;&gt;2月 17, 2012&lt;/a&gt;&lt;/blockquote&gt;
&lt;script src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;
&lt;/script&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;ja&quot;&gt;&lt;p&gt;ITで何が生まれるかをITを使わない人は知らない &lt;a href=&quot;https://twitter.com/search/%2523devsumiE&quot;&gt;#devsumiE&lt;/a&gt;&lt;/p&gt;&amp;mdash; uedayoさん (@uedayo) &lt;a href=&quot;https://twitter.com/uedayo/status/170441898404757504&quot; data-datetime=&quot;2012-02-17T09:38:09+00:00&quot;&gt;2月 17, 2012&lt;/a&gt;&lt;/blockquote&gt;
&lt;script src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;
&lt;/script&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;ja&quot;&gt;&lt;p&gt;この問題に対する解答を行えない、なぜなら発注がないから。発注する側は、これまでの延長でしか考えていなくて、解決できることを知らないから　&lt;a href=&quot;https://twitter.com/search/%2523devsumiE&quot;&gt;#devsumiE&lt;/a&gt;&lt;/p&gt;&amp;mdash; imae （Master BBQ）さん (@modal_soul) &lt;a href=&quot;https://twitter.com/modal_soul/status/170443275742871552&quot; data-datetime=&quot;2012-02-17T09:43:38+00:00&quot;&gt;2月 17, 2012&lt;/a&gt;&lt;/blockquote&gt;
&lt;script src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;
&lt;/script&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;ja&quot;&gt;&lt;p&gt;共感駆動開発いいね　 &lt;a href=&quot;https://twitter.com/search/%2523devsumiE&quot;&gt;#devsumiE&lt;/a&gt;&lt;/p&gt;&amp;mdash; Dai Fujiharaさん (@daipresents) &lt;a href=&quot;https://twitter.com/daipresents/status/170445204791369728&quot; data-datetime=&quot;2012-02-17T09:51:18+00:00&quot;&gt;2月 17, 2012&lt;/a&gt;&lt;/blockquote&gt;
&lt;script src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;
&lt;/script&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-2&quot;&gt;最後に、&lt;/h2&gt;
&lt;p&gt;どのセッションも、話された内容は違えど
自分の中のモチベーションを喚起する非常に濃い内容でした。&lt;/p&gt;

&lt;p&gt;あとは、ここで得た刺激をこの後どういう行動で体現するか？&lt;/p&gt;

&lt;p&gt;次回のデブサミに参加するときには、自分の成長を実感できるよう、
そして、デブサミで発表する側に立てるようになりたいと思います。&lt;/p&gt;
</description>
                <link>http://modalsoul.github.io/report/2012/02/17/developers-summit-2012</link>
                <guid>http://modalsoul.github.io/report/2012/02/17/developers-summit-2012</guid>
                <pubDate>2012-02-17T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>Developers Summit 2012 1日目ツイートまとめ。#devsumi</title>
                <description>&lt;h2 id=&quot;developers-summit&quot;&gt;Developers Summitとは？&lt;/h2&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;Developers Summit でべろっぱーずさみっと （コンピュータ）

通称：デブサミ
「デベロッパーの復権」を目指して年1回開催される、ITエンジニアのお祭り
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;section&quot;&gt;開催概要&lt;/h3&gt;

&lt;h4 id=&quot;developers-summit-2012-2012&quot;&gt;名称	Developers Summit 2012 （デブサミ2012）&lt;/h4&gt;

&lt;h4 id=&quot;section-1&quot;&gt;会期	2012年2月16日（木）・17日（金）&lt;/h4&gt;

&lt;h4 id=&quot;section-2&quot;&gt;会場	目黒雅叙園（東京・目黒）&lt;/h4&gt;

&lt;h4 id=&quot;section-3&quot;&gt;主催	株式会社 翔泳社&lt;/h4&gt;

&lt;h4 id=&quot;it&quot;&gt;お勧めする方	技術者、ソフトウェア開発者、システム開発者、ネットワーク管理・運用者、IT教育担当者、&lt;/h4&gt;

&lt;h4 id=&quot;itit&quot;&gt;ITマーケティング・セールス担当者、IT関連部署マネージャ、プロジェクト関連マネージャ&lt;/h4&gt;

&lt;h4 id=&quot;section-4&quot;&gt;参加費	無料&lt;/h4&gt;

&lt;h4 id=&quot;developers-summit--&quot;&gt;お問い合わせ	Developers Summit 運営事務局 (株式会社翔泳社内)&lt;/h4&gt;

&lt;h4 id=&quot;e-mail-devinfoshoeishacojp&quot;&gt;E-mail： devinfo@shoeisha.co.jp&lt;/h4&gt;

&lt;p&gt;その存在は知ってはいたものの、今回初めて参加しました、デブサミ！
1日目の参加を終えて、とても愉しめ、また良い刺激を受けることができました。&lt;/p&gt;

&lt;p&gt;この詳細を語るには、今日は時間が足りないので
私が参加したセッションのツイートまとめのリンクを掲載しておきます。&lt;/p&gt;

&lt;h2 id=&quot;section-5&quot;&gt;2月16日（木）&lt;/h2&gt;
&lt;p&gt;### ［Web Technology］ 10:00～10:50【16-C-1】HTML5の今と未来 ～HTML5との正しいつきあい方～ 羽田野 太巳 氏&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://yukar.in/note/ckFpcM&quot;&gt;HTML5の今と未来 #devsumi #devsumiC つぶやきまとめ  - Yukarin&amp;#8217;Note&lt;/a&gt;
&lt;a href=&quot;https://yukar.in/note/ckFpcM&quot;&gt;https://yukar.in/note/ckFpcM&lt;/a&gt;
&lt;a href=&quot;https://yukar.in/note/ckFpcM&quot;&gt;https://yukar.in/note/ckFpcM&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;b-2yahoo--------&quot;&gt;［開発プロセス］ 11:10～11:55【16-B-2】Yahoo!アジャイルクロニクル ～コーチとエンジニアの体験記～ 長岡 実 氏 / 高橋 一貴 氏&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://yukar.in/note/ckFpcp&quot;&gt;Yahoo!アジャイルクロニクル #devsumi #devsumiB つぶやきまとめ  - Yukarin&amp;#8217;Note&lt;/a&gt;
&lt;a href=&quot;https://yukar.in/note/ckFpcp&quot;&gt;https://yukar.in/note/ckFpcp&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;このセッションのスピーカーとして登壇された長岡さんとは、以前アジャイルサムライ　横浜道場でご一緒したことがあり、
講師紹介のアナウンスで「横浜道場生の～」と紹介があり、思わずﾆﾔﾘとしてしまいましたｗ&lt;/p&gt;

&lt;p&gt;そんなアジャイルサムライ　横浜道場ですが、第2回が2月23日に開催されます。
興味のあるかたは是非参加されることをオススメします！&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://kokucheese.com/event/index/27269/&quot;&gt;アジャイルサムライ読書会 横浜道場 第2回&lt;/a&gt;
&lt;a href=&quot;http://kokucheese.com/event/index/27269/&quot;&gt;http://kokucheese.com/event/index/27269/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;b-410---&quot;&gt;［開発プロセス］ 14:20～15:05【16-B-4】アジャイル開発の10年と今後を語ろう。 平鍋 健児 氏&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://yukar.in/note/ckFpcs&quot;&gt;アジャイル開発の10年と今後を語ろう。 #devsumi #devsumiB つぶやきまとめ  - Yukarin&amp;#8217;Note&lt;/a&gt;
&lt;a href=&quot;https://yukar.in/note/ckFpcs&quot;&gt;https://yukar.in/note/ckFpcs&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;b-5----&quot;&gt;［開発プロセス］ 15:25～16:15【16-B-5】アジャイルリーダーシップと組織改革 ～楽天のアジャイル開発というリアル～ 藤原 大 氏&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://yukar.in/note/ckFpcp&quot;&gt;アジャイルリーダーシップと組織改革 #devsumi #devsumiB つぶやきまとめ  - Yukarin&amp;#8217;Note&lt;/a&gt;
&lt;a href=&quot;https://yukar.in/note/ckFpcp&quot;&gt;https://yukar.in/note/ckFpcp&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;special-1740191016-a-7-------------------------bleis-tift-----&quot;&gt;［Special］ 17:40～19:10【16-A-7】あの人の自分戦略を聞きたい！ 和田 卓人 氏 / 小泉 守義 氏 / 市谷 聡啓 氏 / 倉貫 義人 氏 / 川口 耕介 氏 / 高橋 征義 氏 / bleis-tift 氏 / 高井 直人 氏&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://yukar.in/note/ckFpck&quot;&gt; ［その１］あの人の自分戦略を聞きたい！ #devsumi #devsumiA つぶやきまとめ&lt;/a&gt;
&lt;a href=&quot;https://yukar.in/note/ckFpck&quot;&gt;https://yukar.in/note/ckFpck&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://yukar.in/note/ckFpc8&quot;&gt; ［その２］あの人の自分戦略を聞きたい！ #devsumi #devsumiA つぶやきまとめ&lt;/a&gt;
&lt;a href=&quot;https://yukar.in/note/ckFpc8&quot;&gt;https://yukar.in/note/ckFpc8&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-6&quot;&gt;最後に、&lt;/h2&gt;
&lt;p&gt;会場の本ブースに、オライリーガシャポンがあったため
まんまとやってしまいましたｗ（1回\300也）&lt;/p&gt;

&lt;p&gt;どうしても”Scala”のバッジが欲しかったのですが2回やって2回とも撃沈。。。
結局、Scalaバッジを引き当てた後輩くんにトレードをお願いして、手に入れました！！&lt;/p&gt;

&lt;p&gt;ちなみに、↓です&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/badge.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Scala以外のバッジはトレード可能ですので、
もしお目当てのバッジを私がもっていたら、メンションいただければ明日トレード可能です&lt;/p&gt;

&lt;p&gt;在庫一覧
・デコンパイリングJava　【右上】&lt;/p&gt;

&lt;p&gt;・Natural Language Processing with Python　【左下】&lt;/p&gt;

&lt;p&gt;・Restful Java　【左上】&lt;/p&gt;

&lt;p&gt;・牛？　【中央下】&lt;/p&gt;

&lt;p&gt;・白熊？　【中央上】&lt;/p&gt;
</description>
                <link>http://modalsoul.github.io/report/2012/02/16/developers-summit-2012</link>
                <guid>http://modalsoul.github.io/report/2012/02/16/developers-summit-2012</guid>
                <pubDate>2012-02-16T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>VMWarePlayerでUbuntu環境を立ててみた。</title>
                <description>&lt;p&gt;&lt;img src=&quot;http://capture.heartrails.com/300x200/cool?http://www.vmware.com/jp/products/desktop_virtualization/player/overview&quot; alt=&quot;VMWarePlayer&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;vmwareplayer&quot;&gt;VMWarePlayerのインストール&lt;/h2&gt;
&lt;p&gt;###VMWarePlayerのダウンロード
何のことは無いです、↓からダウンロード
http://www.vmware.com/jp/products/desktop_virtualization/player/overview&lt;/p&gt;

&lt;p&gt;今回ダウンロードしたファイルは、VMware-player-4.0.2-591240.exe&lt;/p&gt;

&lt;h3 id=&quot;vmwareplayer-1&quot;&gt;VMWarePlayerのインストール&lt;/h3&gt;
&lt;p&gt;VMware-player-4.0.2-591240.exeを実行。&lt;/p&gt;

&lt;p&gt;流れに沿って素直にインストール&lt;/p&gt;

&lt;h2 id=&quot;ubuntu&quot;&gt;Ubuntuのインストール&lt;/h2&gt;
&lt;p&gt;###インストールメディアを挿入
細かいところは省きます。
手持ちのUbuntuのメディアは、Ubuntu11.04のCDがあったのでコレを使いました。
CDを挿入した状態で、VMWarePlayerを起動すると
CD上のUbuntuを選択できるので、インストール。&lt;/p&gt;

&lt;h3 id=&quot;ubuntu1110&quot;&gt;Ubuntu11.10へのアップグレード&lt;/h3&gt;
&lt;p&gt;Updateじゃなくて、Upgradeなんすね。&lt;/p&gt;

&lt;p&gt;恐ろしく時間掛かった。&lt;/p&gt;

&lt;h2 id=&quot;gnome-panel&quot;&gt;Gnome-panelのインストール&lt;/h2&gt;
&lt;p&gt;Ubuntu11.04ではGnome-classicを選択できたけど
Ubuntu11.10からは有無を言わさずUnityになるので、gnome-panelを使う。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo apt-get install gnome-panel
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;インストールが終わったら、一旦ログアウト。&lt;/p&gt;

&lt;p&gt;ログイン画面の歯車をクリックして、Gnome-classicを選択する。&lt;/p&gt;

&lt;p&gt;これでログインすると、Ubuntu11.10でもUbuntu11.04と同じデスクトップ環境になります。&lt;/p&gt;
</description>
                <link>http://modalsoul.github.io/environment/2012/02/13/setup-WMWare-ubuntu</link>
                <guid>http://modalsoul.github.io/environment/2012/02/13/setup-WMWare-ubuntu</guid>
                <pubDate>2012-02-13T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>Capistranoをやってみよう</title>
                <description>&lt;p&gt;&lt;a href=&quot;https://github.com/capistrano/capistrano&quot;&gt;&lt;img title=&quot;capistrano/capistrano - GitHub&quot; src=&quot;http://capture.heartrails.com/300x300/cool?https://github.com/capistrano/capistrano&quot; alt=&quot;https://github.com/capistrano/capistrano&quot; width=&quot;300&quot; height=&quot;300&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Capistranoをやってみました。
&lt;a href=&quot;http://builder.japan.zdnet.com/virtualization/sp_open-source-software-moonlinx-2009/20396188/&quot;&gt;こちら&lt;/a&gt;と&lt;a href=&quot;http://doruby.kbmj.com/trinityt_on_rails/20080325/__Capistrano___1&quot;&gt;こちら&lt;/a&gt;を参考にしました。&lt;/p&gt;

&lt;h2 id=&quot;capistrano&quot;&gt;Capistranoって？&lt;/h2&gt;
&lt;p&gt;Capistranoは複数サーバにアプリケーションを配備できるデプロイツールなのですが、厳密にいえば「複数のサーバ上で同時に並行してコマンドを実行できるツール」だそうです。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;インストール&lt;/h2&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;&amp;gt; gem install -y capistrano
INFO:  &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;gem install -y&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; is now default and will be removed
INFO:  use --ignore-dependencies to install only the gems you list
Fetching: highline-1.6.11.gem &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;100%&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Fetching: net-ssh-2.3.0.gem &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;100%&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Fetching: net-sftp-2.0.5.gem &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;100%&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Fetching: net-scp-1.0.4.gem &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;100%&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Fetching: net-ssh-gateway-1.1.0.gem &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;100%&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Fetching: capistrano-2.9.0.gem &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;100%&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Successfully installed highline-1.6.11
Successfully installed net-ssh-2.3.0
Successfully installed net-sftp-2.0.5
Successfully installed net-scp-1.0.4
Successfully installed net-ssh-gateway-1.1.0
Successfully installed capistrano-2.9.0
6 gems installed
Installing ri documentation &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;highline-1.6.11...
Installing ri documentation &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;net-ssh-2.3.0...
Installing ri documentation &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;net-sftp-2.0.5...
Installing ri documentation &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;net-scp-1.0.4...
Installing ri documentation &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;net-ssh-gateway-1.1.0...
Installing ri documentation &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;capistrano-2.9.0...
Installing RDoc documentation &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;highline-1.6.11...
Installing RDoc documentation &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;net-ssh-2.3.0...
Installing RDoc documentation &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;net-sftp-2.0.5...
Installing RDoc documentation &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;net-scp-1.0.4...
Installing RDoc documentation &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;net-ssh-gateway-1.1.0...
Installing RDoc documentation &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;capistrano-2.9.0...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;これでインストール完了。gemって便利だ&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;&amp;gt;cap -h
Usage: cap &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;options&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; action ...
    -d, --debug                      Prompts before each remote &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;execution.
    -e, --explain TASK               Displays &lt;span class=&quot;nb&quot;&gt;help&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;available&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;the task.
    -F, --default-config             Always use default config, even with -f.
    -f, --file FILE                  A recipe file to load. May be given more than once.
    -H, --long-help                  Explain these options and environment variables.
    -h, --help                       Display this &lt;span class=&quot;nb&quot;&gt;help &lt;/span&gt;message.
    -l &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;STDERR|STDOUT|file&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;          Choose logger method. STDERR used by default.
        --logger
    -n, --dry-run                    Prints out commands without running them.
    -p, --password                   Immediately prompt &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;the password.
    -q, --quiet                      Make the output as quiet as possible.
    -r, --preserve-roles             Preserve task roles
    -S, --set-before &lt;span class=&quot;nv&quot;&gt;NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;VALUE      Set a variable before the recipes are loaded.
    -s, --set &lt;span class=&quot;nv&quot;&gt;NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;VALUE             Set a variable after the recipes are loaded.
    -T, --tasks &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;PATTERN&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;            List all tasks &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;matching optional PATTERN&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; in the loaded recipe files.
    -t, --tool                       Abbreviates the output of -T &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;tool integration.
    -V, --version                    Display the Capistrano version, and exit.
    -v, --verbose                    Be more verbose. May be given more than once.
    -X, --skip-system-config         Don&lt;span class=&quot;s1&quot;&gt;&amp;#39;t load the system config file (capistrano.conf)&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;    -x, --skip-user-config           Don&amp;#39;&lt;/span&gt;t load the user config file &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;.caprc&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;インストールされてることを確認。&lt;/p&gt;

&lt;h2 id=&quot;capify&quot;&gt;capifyの実行&lt;/h2&gt;
&lt;p&gt;アプリケーションのカレントディレクトリに移動して、capifyコマンドを実行&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;&amp;gt; capify . &lt;span class=&quot;c&quot;&gt;#.を忘れないこと&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;add&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; writing &lt;span class=&quot;s1&quot;&gt;&amp;#39;./Capfile&amp;#39;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;add&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; making directory &lt;span class=&quot;s1&quot;&gt;&amp;#39;./config&amp;#39;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;add&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; writing &lt;span class=&quot;s1&quot;&gt;&amp;#39;./config/deploy.rb&amp;#39;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; capified!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;カレントディレクトリ直下に、Capfileファイルとconfigディレクトリ
config配下に、deploy.rbが作成される。&lt;/p&gt;

&lt;h2 id=&quot;deployrb&quot;&gt;deploy.rbの編集&lt;/h2&gt;
&lt;p&gt;/cofig/deploy.rbを編集してみる。
とりあえずHelloWorldするために、作成されたdeploy.rbの内容を以下のように修正。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; :application, &lt;span class=&quot;s2&quot;&gt;&amp;quot;hoge&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; :repository,  &lt;span class=&quot;s2&quot;&gt;&amp;quot;huga&amp;quot;&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; :scm, :subversion

role :test, &lt;span class=&quot;s2&quot;&gt;&amp;quot;127.0.0.1&amp;quot;&lt;/span&gt;                          &lt;span class=&quot;c&quot;&gt;# Your HTTP server, Apache/etc&lt;/span&gt;
role :app, &lt;span class=&quot;s2&quot;&gt;&amp;quot;127.0.0.1&amp;quot;&lt;/span&gt;                          &lt;span class=&quot;c&quot;&gt;# This may be the same as your `Web` server&lt;/span&gt;

namespace :deploy &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
task :hw, :roles &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;:test, :ap&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;  &lt;/span&gt;run &lt;span class=&quot;s2&quot;&gt;&amp;quot;echo HelloWorld! $HOSTNAME&amp;quot;&lt;/span&gt;
end
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;section-1&quot;&gt;デプロイの実行&lt;/h2&gt;
&lt;p&gt;コマンドを実行してデプロイ&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;&amp;gt; cap deploy:hw
  * executing &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;deploy:hw&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt;
  * executing &lt;span class=&quot;s2&quot;&gt;&amp;quot;echo HelloWorld! $HOSTNAME&amp;quot;&lt;/span&gt;
    servers: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;127.0.0.1&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  connection failed &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;: 127.0.0.1 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Errno::ECONNREFUSED: 対象のコンピューターによって拒否されたため、接続できませんでした。 - connect&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;タスクが実行される。
ローカルにSSH接続できなかったので、タスクに失敗したことを確認。&lt;/p&gt;

&lt;p&gt;※Railsのプロジェクトを用意してなかったので、これは想定通りの動きなのでとりあえず今はOK&lt;/p&gt;

&lt;p&gt;想定の動作としては、↓のような感じ&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;&amp;gt; cap deploy:hw
  * executing &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;deploy:hw&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt;
  * executing &lt;span class=&quot;s2&quot;&gt;&amp;quot;echo HelloWorld! $HOSTNAME&amp;quot;&lt;/span&gt;
  servers: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;127.0.0.1&amp;quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&amp;quot;127.0.0.1&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;127.0.0.1&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; executing &lt;span class=&quot;nb&quot;&gt;command&lt;/span&gt;
  **&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;out :: 127.0.0.1&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;HelloWorld! &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;
  **&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;out :: 127.0.0.1&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;HelloWorld! app
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;section-2&quot;&gt;最後に&lt;/h2&gt;
&lt;p&gt;なんとなく動かして、Capistranoからコマンドを実行する手前までは確認。
あとは、デプロイ対象のサーバとSSH接続して、どうコマンドを実行させるかって感じでしょうか。
もっといろいろ触ってみてよう&lt;/p&gt;
</description>
                <link>http://modalsoul.github.io/ci/2012/02/01/setup-capistrano</link>
                <guid>http://modalsoul.github.io/ci/2012/02/01/setup-capistrano</guid>
                <pubDate>2012-02-01T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>ScalaでFizzBuzzしてみた</title>
                <description>&lt;p&gt;&lt;a href=&quot;http://ja.wikipedia.org/wiki/Fizz_Buzz&quot;&gt;&lt;img title=&quot;Fizz Buzz - Wikipedia&quot; src=&quot;http://capture.heartrails.com/200x120/cool?http://ja.wikipedia.org/wiki/Fizz_Buzz&quot; alt=&quot;http://ja.wikipedia.org/wiki/Fizz_Buzz&quot; width=&quot;200&quot; height=&quot;120&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;社内でFizzBuzz大会をやりました。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;社内のチームでFizzBuzz大会をやろう、という話自体は去年の秋ごろからあって
年が明けて、今日開催しました。&lt;/p&gt;

&lt;h2 id=&quot;fizzbuzz&quot;&gt;FizzBuzz大会要綱&lt;/h2&gt;
&lt;div style=&quot;width:425px&quot; id=&quot;__ss_11253526&quot;&gt; 
&lt;strong style=&quot;display:block;margin:12px 0 4px&quot;&gt;
&lt;a href=&quot;http://www.slideshare.net/modalsoul/fizz-buzz-publish-11253526&quot; title=&quot;Fizz buzz publish&quot; target=&quot;_blank&quot;&gt;Fizz buzz publish&lt;/a&gt;
&lt;/strong&gt; 
&lt;iframe src=&quot;http://www.slideshare.net/slideshow/embed_code/11253526&quot; width=&quot;425&quot; height=&quot;355&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot;&gt;
&lt;/iframe&gt; 
&lt;div style=&quot;padding:5px 0 12px&quot;&gt; View more &lt;a href=&quot;http://www.slideshare.net/&quot; target=&quot;_blank&quot;&gt;presentations
&lt;/a&gt; from &lt;a href=&quot;http://www.slideshare.net/modalsoul&quot; target=&quot;_blank&quot;&gt;modalsoul&lt;/a&gt; &lt;/div&gt; &lt;/div&gt;

&lt;h3 id=&quot;section-1&quot;&gt;大会参加者&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;15名&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-2&quot;&gt;ルール&lt;/h3&gt;
&lt;p&gt;####ルールその１
引数n(正の整数)が渡されたときに 1～nまでのFizzBuzzを表示する関数を書きなさい。表示形式はFizzBuzzであるとわかれば何でも可
####ルールその２
実装言語は何でもOK
####ルールその３
何度(何種類)回答してもOK&lt;/p&gt;

&lt;p&gt;※ただし、評価対象は１つだけ
####ルールその４
テストコードもあるとイイネ！
####ルールその５
他人のコードを盗まない&lt;/p&gt;

&lt;p&gt;※&amp;#8221;FizzBuzz&amp;#8221;をググってコピペするのも、もちろんNG&lt;/p&gt;

&lt;p&gt;※言語のリファレンスを見る、技術書を見るのはOK
####ルールその５
制限時間は、30分
###大会タイムスケジュール
* 10:00 概要説明
* 10:10 環境準備・コーディング開始
* 10:40 コーディング終了
* 10:45 LT（コードのロジック説明等）
* 11:35 集計
* 11:40 表彰&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;評価方法&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;1人持ち時間3分でロジックを解説。LT形式&lt;/li&gt;
  &lt;li&gt;これはスゴイと思った順に、3点、2点、1点を投票。&lt;/li&gt;
  &lt;li&gt;合計点数で&amp;#8221;Most IKETERU Programer&amp;#8221;:MIPを決定&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-4&quot;&gt;やって、どうなった？&lt;/h2&gt;
&lt;p&gt;実装言語は縛らなかったので、いろいろなFizzBuzzが出てきました。
* PHP
* Java
* JavaScript
* C言語
* シェルスクリプト
* CSS
* バッチ&lt;/p&gt;

&lt;p&gt;制限時間は、結局10分延長。
それでも何人かは書きあがらなくて、ロジックの説明のみ参戦。
いつもはブラウザで動作させているものを、
コマンドラインから動かすときに「あれ引数どうやってとるんだっけ？」
みたいなところが嵌りポイントっぽかったです。&lt;/p&gt;

&lt;h3 id=&quot;fizzbuzz-1&quot;&gt;面白かったFizzBuzz&lt;/h3&gt;
&lt;p&gt;個人的に、おぉっと思ったものがいくつか、、&lt;/p&gt;

&lt;h4 id=&quot;cssfizzbuzz&quot;&gt;CSSでFizzBuzz&lt;/h4&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;li:nth-child&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;3n+1&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
   color:#f9c;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;↑で、3の倍数の色が#f9cになるっていう。
これと同じパターンで、5の倍数・3と5の倍数の時に色が変わるって。&lt;/p&gt;

&lt;p&gt;CSS使って、FizzとBuzzを色の違いで表現するとはっ！！
完全に盲点でした。&lt;/p&gt;

&lt;p&gt;これ文字列でFizzもBuzzも出力してなくて、見た感じわかりづらいんですけどね。。すごかったですｗ&lt;/p&gt;

&lt;h3 id=&quot;chromefizzbuzz&quot;&gt;Chrome上でFizzBuzz&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;var &lt;span class=&quot;nv&quot;&gt;fizzbuzz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;n&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;n % 15&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; ? &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;n % 3 ? &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; n % 5 ? n : &lt;span class=&quot;s2&quot;&gt;&amp;quot;Buzz&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&amp;quot;Fizz&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&amp;quot;FizzBuzz&amp;quot;&lt;/span&gt;;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;まず1行でFizｚBuzzしてるところが、Cool！！
そして何より、LTで
ChromeのJavaScriptコンソール上で実行して見せるところがすげぇっ！！って感じｗ&lt;/p&gt;

&lt;h2 id=&quot;fizzbuzz-2&quot;&gt;自分のFizzBuzz解答&lt;/h2&gt;
&lt;p&gt;もちろん私はScalaで書きました。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;def fizzbuzz&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;args:Int&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1 to args&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; map&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;gt;
		&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;i%5,i%3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; match&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0,0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;FizzBuzz&amp;quot;&lt;/span&gt; 
			&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;_,0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Fizz&amp;quot;&lt;/span&gt; 
			&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0,_&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Buzz&amp;quot;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;case &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;gt; i
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; foreach println
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
fizzbuzz&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;15&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;自分なりのポイントとしては、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;剰余算の結果を&amp;#8221;== 0&amp;#8221;と比較するのは、なんかイケてない&lt;/li&gt;
  &lt;li&gt;折角Scalaなので、Mapとパターンマッチを使ってみる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;もっと短く書けるだろうけど、今はこれが精一杯。&lt;/p&gt;

&lt;h2 id=&quot;section-5&quot;&gt;最後に&lt;/h2&gt;
&lt;p&gt;実際にFizzBuzzを書くようなシーンは仕事では出会わないだろうけど、
「ここをこうしたらもっとカッコいい！」ってワクワクできるのはいいですよね&lt;/p&gt;

&lt;p&gt;もっとカッコいいコードが書けるようになりたいなぁと思いました&lt;/p&gt;
</description>
                <link>http://modalsoul.github.io/programing/2012/01/24/fizz-buzz</link>
                <guid>http://modalsoul.github.io/programing/2012/01/24/fizz-buzz</guid>
                <pubDate>2012-01-24T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>Jekyllによる静的Ｗebサイト構築入門してみた</title>
                <description>&lt;p&gt;&lt;img src=&quot;http://capture.heartrails.com/free?http://www.ksr-it.net/pdf/kushiro-jekyll-text.pdf&quot; alt=&quot;Jekyllによる静的Ｗebサイト構築入門&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.ksr-it.net/pdf/kushiro-jekyll-text.pdf&quot;&gt;こちら&lt;/a&gt;を参考にしました。&lt;/p&gt;

&lt;p&gt;いろいろ嵌りポイントがあったので、後世の遺産として書き残します。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;環境構築&lt;/h2&gt;
&lt;p&gt;※ここで使った環境は、Windows7です。
###Rubyのインストール
ActiveScriptRubyを&lt;a href=&quot;http://www.geocities.co.jp/SiliconValley-PaloAlto/9251/ruby/&quot;&gt;ダウンロード&lt;/a&gt;＆インストール。
デフォルト設定でインストールしたら、↓に入った。(うろ覚え、たしかあってると思う)&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;C:&lt;span class=&quot;se&quot;&gt;\P&lt;/span&gt;roguram files&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;x86&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r&lt;/span&gt;uby-1.8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;path&quot;&gt;Pathの設定&lt;/h3&gt;
&lt;p&gt;環境変数に↓を追加&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;C:\Proguram files(x86)\ruby-1.8\bin&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;rubygems&quot;&gt;RubyGemsのセットアップ&lt;/h3&gt;
&lt;p&gt;gemのバージョンを確認。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gem -v
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;バージョン1.3.6以前には対応していないので、1.3.6以前だった場合は更新する。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gem update --sytem
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;jekyll&quot;&gt;Jekyllのインストール&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gem install jekyll
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;インストールできるはずなんだけど、なんかエラーがでる。。
どうやら、Program files(x86)配下に書き込み権限がないから、らしい。&lt;/p&gt;

&lt;h3 id=&quot;ruby&quot;&gt;再：Rubyのインストール&lt;/h3&gt;
&lt;p&gt;もう一度、今度は、C:\直下にインストール。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;C:&lt;span class=&quot;se&quot;&gt;\r&lt;/span&gt;uby-1.8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;path-1&quot;&gt;再：Pathの設定&lt;/h3&gt;
&lt;p&gt;Rubyのパスを↓に変更する。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;C:&lt;span class=&quot;se&quot;&gt;\r&lt;/span&gt;uby-1.8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;jekyll-1&quot;&gt;再：Jekyllのインストール&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gem install jekyll
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;で、インストールできるはずなんだけど、なんかエラーがでる。。
どうやらWindows環境だと、MAKE無くてエラーになってるらしい。
Mac、Linux環境だとmakeはデフォルトはいっているので、Windows環境の嵌りポイント。&lt;/p&gt;

&lt;h3 id=&quot;nmake&quot;&gt;NMAKEのインストール&lt;/h3&gt;
&lt;p&gt;こちらを参考にWindows環境用のMAKE：NMAKEのインストールを試みる。
&lt;a href=&quot;http://d.hatena.ne.jp/perlcodesample/20081025/1225035398&quot;&gt;http://d.hatena.ne.jp/perlcodesample/20081025/1225035398&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://capture.heartrails.com/free?http://d.hatena.ne.jp/perlcodesample/20081025/1225035398&quot; alt=&quot;http://d.hatena.ne.jp/perlcodesample/20081025/1225035398&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Nake15.exeをダウンロード＆インストールしようとしたら、&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/nmake15-error.jpg&quot; alt=&quot;nmake error diag&quot; /&gt;&lt;/p&gt;

&lt;p&gt;手持ちの環境では、このNMAKEは使えないらしい。
別の方法を探す。&lt;/p&gt;

&lt;h3 id=&quot;visualstudio&quot;&gt;VisualStudioのインストール&lt;/h3&gt;
&lt;p&gt;VC++ CompilerにNMAKEが同梱されているようなので、VisualStudioをインストール。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.microsoft.com/japan/msdn/vstudio/express/&quot;&gt;VisualStudio 2010 Express&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://capture.heartrails.com/free?http://www.microsoft.com/japan/msdn/vstudio/express/&quot; alt=&quot;VisualStudio 2010 Express&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Microsoft Visual C++ 2010 Expressをインストール。
インストール後に、再度Jekyllインストールしてみてもやっぱりダメ。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;NMAKE : fatal error U1077: &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;quot;～\bin\cl.EXE&amp;quot;&amp;#39;&lt;/span&gt; : リターン コード &lt;span class=&quot;s1&quot;&gt;&amp;#39;0xc0000135&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;まだ何か足りないっぽい。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;環境変数の設定&lt;/h3&gt;

&lt;p&gt;環境変数を設定してやる必要があるらしい。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www7.atwiki.jp/smashonline/?cmd=word&amp;amp;word=cl.exe%200xc0000135&amp;amp;type=normal&amp;amp;page=nmake&quot;&gt;http://www7.atwiki.jp/smashonline/?cmd=word&amp;amp;word=cl.exe%200xc0000135&amp;amp;type=normal&amp;amp;page=nmake&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://capture.heartrails.com/free?http://www7.atwiki.jp/smashonline/?cmd=word&amp;amp;word=cl.exe%200xc0000135&amp;amp;type=normal&amp;amp;page=nmake&quot; alt=&quot;http://www7.atwiki.jp/smashonline/?cmd=word&amp;amp;word=cl.exe%200xc0000135&amp;amp;type=normal&amp;amp;page=nmake&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;C:&lt;span class=&quot;se&quot;&gt;\P&lt;/span&gt;rogram Files &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;x86&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\M&lt;/span&gt;icrosoft Visual Studio 10.0&lt;span class=&quot;se&quot;&gt;\V&lt;/span&gt;C&lt;span class=&quot;se&quot;&gt;\b&lt;/span&gt;in&lt;span class=&quot;se&quot;&gt;\v&lt;/span&gt;cvars32.bat
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;jekyll-2&quot;&gt;再：Jekyllのインストール&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gem install jekyll
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;なんとかJekyllのインストールに成功。&lt;/p&gt;

&lt;h2 id=&quot;jekyll-3&quot;&gt;Jekyllの実行&lt;/h2&gt;

&lt;p&gt;ローカルのgithub:pagesのルートディレクトリ配下に移動してJekyllを実行。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;jekyll --server --auto
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;section-2&quot;&gt;ブラウザで表示&lt;/h2&gt;

&lt;p&gt;デフォルトのポートが4000なので、&lt;/p&gt;

&lt;p&gt;http://localhost:4000&lt;/p&gt;

&lt;p&gt;にアクセスする。&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;最後に&lt;/h2&gt;

&lt;p&gt;時間がたってからこの記事を書いたので、一部詳細があってないところもあるだろうけれど
大体こんな流れでした。&lt;/p&gt;
</description>
                <link>http://modalsoul.github.io/record/2012/01/15/setup-jekyll</link>
                <guid>http://modalsoul.github.io/record/2012/01/15/setup-jekyll</guid>
                <pubDate>2012-01-15T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>GitHub+Jekyllでブログを立ててみた。</title>
                <description>&lt;p&gt;&lt;img src=&quot;http://capture.heartrails.com/free?http://mattn.kaoriya.net/software/lang/ruby/20090409185248.htm&quot; alt=&quot;Jekyllで始める簡単ブログ&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://mattn.kaoriya.net/software/lang/ruby/20090409185248.htm&quot;&gt;こちら&lt;/a&gt;の記事を参考にしました。&lt;/p&gt;

&lt;p&gt;まだまだ見栄えのしないお粗末な見た目ですが、これから少しずついじってみますよ。&lt;/p&gt;
</description>
                <link>http://modalsoul.github.io/record/2012/01/11/first-post</link>
                <guid>http://modalsoul.github.io/record/2012/01/11/first-post</guid>
                <pubDate>2012-01-11T00:00:00+09:00</pubDate>
        </item>


</channel>
</rss>
